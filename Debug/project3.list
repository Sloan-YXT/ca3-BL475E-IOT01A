
project3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007298  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000458  08007428  08007428  00017428  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007880  08007880  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007880  08007880  00017880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007888  08007888  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007888  08007888  00017888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800788c  0800788c  0001788c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007890  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  200001dc  08007a6c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000804  20000354  08007a6c  00020354  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c0d3  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001be1  00000000  00000000  0002c2df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af0  00000000  00000000  0002dec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a08  00000000  00000000  0002e9b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000821c  00000000  00000000  0002f3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00004565  00000000  00000000  000375d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0003bb39  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000041c8  00000000  00000000  0003bb8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .stab         00000024  00000000  00000000  0003fd54  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      0000003c  00000000  00000000  0003fd78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007410 	.word	0x08007410

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08007410 	.word	0x08007410

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <MX_RTC_Init>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void MX_RTC_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af00      	add	r7, sp, #0
	  RTC_TimeTypeDef sTime = {0};
 8000eb2:	1d3b      	adds	r3, r7, #4
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]
	  RTC_DateTypeDef sDate = {0};
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	603b      	str	r3, [r7, #0]
	  /* USER CODE END RTC_Init 1 */
	  /**Initialize RTC Only
	  */
	  hrtc.Instance = RTC;
 8000ec4:	4b2d      	ldr	r3, [pc, #180]	; (8000f7c <MX_RTC_Init+0xd0>)
 8000ec6:	4a2e      	ldr	r2, [pc, #184]	; (8000f80 <MX_RTC_Init+0xd4>)
 8000ec8:	601a      	str	r2, [r3, #0]
	  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000eca:	4b2c      	ldr	r3, [pc, #176]	; (8000f7c <MX_RTC_Init+0xd0>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	605a      	str	r2, [r3, #4]
	  hrtc.Init.AsynchPrediv = 127;
 8000ed0:	4b2a      	ldr	r3, [pc, #168]	; (8000f7c <MX_RTC_Init+0xd0>)
 8000ed2:	227f      	movs	r2, #127	; 0x7f
 8000ed4:	609a      	str	r2, [r3, #8]
	  hrtc.Init.SynchPrediv = 255;
 8000ed6:	4b29      	ldr	r3, [pc, #164]	; (8000f7c <MX_RTC_Init+0xd0>)
 8000ed8:	22ff      	movs	r2, #255	; 0xff
 8000eda:	60da      	str	r2, [r3, #12]
	  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000edc:	4b27      	ldr	r3, [pc, #156]	; (8000f7c <MX_RTC_Init+0xd0>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	611a      	str	r2, [r3, #16]
	  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000ee2:	4b26      	ldr	r3, [pc, #152]	; (8000f7c <MX_RTC_Init+0xd0>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	615a      	str	r2, [r3, #20]
	  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000ee8:	4b24      	ldr	r3, [pc, #144]	; (8000f7c <MX_RTC_Init+0xd0>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	619a      	str	r2, [r3, #24]
	  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000eee:	4b23      	ldr	r3, [pc, #140]	; (8000f7c <MX_RTC_Init+0xd0>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	61da      	str	r2, [r3, #28]
	  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ef4:	4821      	ldr	r0, [pc, #132]	; (8000f7c <MX_RTC_Init+0xd0>)
 8000ef6:	f002 f929 	bl	800314c <HAL_RTC_Init>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_RTC_Init+0x58>
	  {
	    Error_Handler();
 8000f00:	f000 f89c 	bl	800103c <Error_Handler>
	  }
	if(HAL_RTCEx_BKUPRead(&hrtc,RTC_BKP_DR1)!= 0x5051)
 8000f04:	2101      	movs	r1, #1
 8000f06:	481d      	ldr	r0, [pc, #116]	; (8000f7c <MX_RTC_Init+0xd0>)
 8000f08:	f002 fc55 	bl	80037b6 <HAL_RTCEx_BKUPRead>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	f245 0251 	movw	r2, #20561	; 0x5051
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d02d      	beq.n	8000f72 <MX_RTC_Init+0xc6>
	{
		sTime.Hours = 0x0;
 8000f16:	2300      	movs	r3, #0
 8000f18:	713b      	strb	r3, [r7, #4]
		sTime.Minutes = 0x35;
 8000f1a:	2335      	movs	r3, #53	; 0x35
 8000f1c:	717b      	strb	r3, [r7, #5]
		sTime.Seconds = 0x0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	71bb      	strb	r3, [r7, #6]
		sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000f22:	2300      	movs	r3, #0
 8000f24:	613b      	str	r3, [r7, #16]
		sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000f26:	2300      	movs	r3, #0
 8000f28:	617b      	str	r3, [r7, #20]
		if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000f2a:	1d3b      	adds	r3, r7, #4
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4812      	ldr	r0, [pc, #72]	; (8000f7c <MX_RTC_Init+0xd0>)
 8000f32:	f002 f989 	bl	8003248 <HAL_RTC_SetTime>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_RTC_Init+0x94>
		{
		  Error_Handler();
 8000f3c:	f000 f87e 	bl	800103c <Error_Handler>
		}
		sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 8000f40:	2307      	movs	r3, #7
 8000f42:	703b      	strb	r3, [r7, #0]
		sDate.Month = RTC_MONTH_APRIL;
 8000f44:	2304      	movs	r3, #4
 8000f46:	707b      	strb	r3, [r7, #1]
		sDate.Date = 0x16;
 8000f48:	2316      	movs	r3, #22
 8000f4a:	70bb      	strb	r3, [r7, #2]
		sDate.Year = 0x23;
 8000f4c:	2323      	movs	r3, #35	; 0x23
 8000f4e:	70fb      	strb	r3, [r7, #3]

		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000f50:	463b      	mov	r3, r7
 8000f52:	2201      	movs	r2, #1
 8000f54:	4619      	mov	r1, r3
 8000f56:	4809      	ldr	r0, [pc, #36]	; (8000f7c <MX_RTC_Init+0xd0>)
 8000f58:	f002 fa6f 	bl	800343a <HAL_RTC_SetDate>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_RTC_Init+0xba>
		{
		  Error_Handler();
 8000f62:	f000 f86b 	bl	800103c <Error_Handler>
		}
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x5051);//向指定的后备区域寄存器写入数据
 8000f66:	f245 0251 	movw	r2, #20561	; 0x5051
 8000f6a:	2101      	movs	r1, #1
 8000f6c:	4803      	ldr	r0, [pc, #12]	; (8000f7c <MX_RTC_Init+0xd0>)
 8000f6e:	f002 fc09 	bl	8003784 <HAL_RTCEx_BKUPWrite>
   }

}
 8000f72:	bf00      	nop
 8000f74:	3718      	adds	r7, #24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	200001f8 	.word	0x200001f8
 8000f80:	40002800 	.word	0x40002800

08000f84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 8000f8a:	af02      	add	r7, sp, #8


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f8c:	f000 fac1 	bl	8001512 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f90:	f000 f858 	bl	8001044 <SystemClock_Config>
    MX_RTC_Init();
 8000f94:	f7ff ff8a 	bl	8000eac <MX_RTC_Init>
//  MX_SPI3_Init();
    MX_USART1_UART_Init();
 8000f98:	f000 f8ec 	bl	8001174 <MX_USART1_UART_Init>

  RTC_TimeTypeDef GetTime;   //获取时间结构体
  char message_box[1000];
  while (1)
  {
	  HAL_RTC_GetTime(&hrtc, &GetTime, RTC_FORMAT_BIN);
 8000f9c:	f507 737a 	add.w	r3, r7, #1000	; 0x3e8
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4821      	ldr	r0, [pc, #132]	; (800102c <main+0xa8>)
 8000fa6:	f002 f9ec 	bl	8003382 <HAL_RTC_GetTime>
	        /* Get the RTC current Date */
	  HAL_RTC_GetDate(&hrtc, &GetData, RTC_FORMAT_BIN);
 8000faa:	f507 737f 	add.w	r3, r7, #1020	; 0x3fc
 8000fae:	2200      	movs	r2, #0
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	481e      	ldr	r0, [pc, #120]	; (800102c <main+0xa8>)
 8000fb4:	f002 fac8 	bl	8003548 <HAL_RTC_GetDate>
	        /* Display date Format : yy/mm/dd */
	  sprintf(message_box,"RTC time captured:%02d/%02d/%02d :",2000 + GetData.Year, GetData.Month, GetData.Date);
 8000fb8:	f897 33ff 	ldrb.w	r3, [r7, #1023]	; 0x3ff
 8000fbc:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 8000fc0:	f897 33fd 	ldrb.w	r3, [r7, #1021]	; 0x3fd
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	f897 33fe 	ldrb.w	r3, [r7, #1022]	; 0x3fe
 8000fca:	4638      	mov	r0, r7
 8000fcc:	9300      	str	r3, [sp, #0]
 8000fce:	460b      	mov	r3, r1
 8000fd0:	4917      	ldr	r1, [pc, #92]	; (8001030 <main+0xac>)
 8000fd2:	f004 f997 	bl	8005304 <siprintf>
	        /* Display time Format : hh:mm:ss */
	  HAL_UART_Transmit(&huart1, (uint8_t*)message_box, strlen(message_box),0xFFFF);
 8000fd6:	463b      	mov	r3, r7
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff f8f9 	bl	80001d0 <strlen>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	b29a      	uxth	r2, r3
 8000fe2:	4639      	mov	r1, r7
 8000fe4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fe8:	4812      	ldr	r0, [pc, #72]	; (8001034 <main+0xb0>)
 8000fea:	f002 fc48 	bl	800387e <HAL_UART_Transmit>
	  sprintf(message_box,"%02d:%02d:%02d\r\n\r\n",GetTime.Hours, GetTime.Minutes, GetTime.Seconds);
 8000fee:	f897 33e8 	ldrb.w	r3, [r7, #1000]	; 0x3e8
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	f897 33e9 	ldrb.w	r3, [r7, #1001]	; 0x3e9
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	f897 33ea 	ldrb.w	r3, [r7, #1002]	; 0x3ea
 8000ffe:	4638      	mov	r0, r7
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	460b      	mov	r3, r1
 8001004:	490c      	ldr	r1, [pc, #48]	; (8001038 <main+0xb4>)
 8001006:	f004 f97d 	bl	8005304 <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)message_box, strlen(message_box),0xFFFF);
 800100a:	463b      	mov	r3, r7
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff f8df 	bl	80001d0 <strlen>
 8001012:	4603      	mov	r3, r0
 8001014:	b29a      	uxth	r2, r3
 8001016:	4639      	mov	r1, r7
 8001018:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800101c:	4805      	ldr	r0, [pc, #20]	; (8001034 <main+0xb0>)
 800101e:	f002 fc2e 	bl	800387e <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8001022:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001026:	f000 fae5 	bl	80015f4 <HAL_Delay>
	  HAL_RTC_GetTime(&hrtc, &GetTime, RTC_FORMAT_BIN);
 800102a:	e7b7      	b.n	8000f9c <main+0x18>
 800102c:	200001f8 	.word	0x200001f8
 8001030:	08007428 	.word	0x08007428
 8001034:	2000021c 	.word	0x2000021c
 8001038:	0800744c 	.word	0x0800744c

0800103c <Error_Handler>:
  }
  /* USER CODE END 3 */
}
void Error_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  while(1)
 8001040:	e7fe      	b.n	8001040 <Error_Handler+0x4>
	...

08001044 <SystemClock_Config>:
  {

  }
}
void SystemClock_Config(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b0b8      	sub	sp, #224	; 0xe0
 8001048:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800104a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800104e:	2244      	movs	r2, #68	; 0x44
 8001050:	2100      	movs	r1, #0
 8001052:	4618      	mov	r0, r3
 8001054:	f003 fbf4 	bl	8004840 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001058:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001068:	463b      	mov	r3, r7
 800106a:	2288      	movs	r2, #136	; 0x88
 800106c:	2100      	movs	r1, #0
 800106e:	4618      	mov	r0, r3
 8001070:	f003 fbe6 	bl	8004840 <memset>

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001074:	230a      	movs	r3, #10
 8001076:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800107a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800107e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001082:	2310      	movs	r3, #16
 8001084:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001088:	2301      	movs	r3, #1
 800108a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800108e:	2302      	movs	r3, #2
 8001090:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001094:	2302      	movs	r3, #2
 8001096:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800109a:	2301      	movs	r3, #1
 800109c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 20;
 80010a0:	2314      	movs	r3, #20
 80010a2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80010a6:	2307      	movs	r3, #7
 80010a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010ac:	2302      	movs	r3, #2
 80010ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 80010b2:	2304      	movs	r3, #4
 80010b4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010bc:	4618      	mov	r0, r3
 80010be:	f000 fdd3 	bl	8001c68 <HAL_RCC_OscConfig>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <SystemClock_Config+0x88>
  {
    Error_Handler();
 80010c8:	f7ff ffb8 	bl	800103c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010cc:	230f      	movs	r3, #15
 80010ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010d2:	2303      	movs	r3, #3
 80010d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010d8:	2300      	movs	r3, #0
 80010da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010de:	2300      	movs	r3, #0
 80010e0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010e4:	2300      	movs	r3, #0
 80010e6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010ea:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80010ee:	2104      	movs	r1, #4
 80010f0:	4618      	mov	r0, r3
 80010f2:	f001 f969 	bl	80023c8 <HAL_RCC_ClockConfig>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80010fc:	f7ff ff9e 	bl	800103c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 8001100:	4b1b      	ldr	r3, [pc, #108]	; (8001170 <SystemClock_Config+0x12c>)
 8001102:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001104:	2300      	movs	r3, #0
 8001106:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001108:	2300      	movs	r3, #0
 800110a:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800110c:	2300      	movs	r3, #0
 800110e:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001110:	2300      	movs	r3, #0
 8001112:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001116:	f44f 7300 	mov.w	r3, #512	; 0x200
 800111a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800111e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001122:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001124:	2302      	movs	r3, #2
 8001126:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001128:	2301      	movs	r3, #1
 800112a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 800112c:	230c      	movs	r3, #12
 800112e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001130:	2307      	movs	r3, #7
 8001132:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 8001134:	2304      	movs	r3, #4
 8001136:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001138:	2302      	movs	r3, #2
 800113a:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800113c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001140:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001142:	463b      	mov	r3, r7
 8001144:	4618      	mov	r0, r3
 8001146:	f001 fb45 	bl	80027d4 <HAL_RCCEx_PeriphCLKConfig>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8001150:	f7ff ff74 	bl	800103c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001154:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001158:	f000 fd30 	bl	8001bbc <HAL_PWREx_ControlVoltageScaling>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <SystemClock_Config+0x122>
  {
    Error_Handler();
 8001162:	f7ff ff6b 	bl	800103c <Error_Handler>
  }
}
 8001166:	bf00      	nop
 8001168:	37e0      	adds	r7, #224	; 0xe0
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	00032085 	.word	0x00032085

08001174 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001178:	4b14      	ldr	r3, [pc, #80]	; (80011cc <MX_USART1_UART_Init+0x58>)
 800117a:	4a15      	ldr	r2, [pc, #84]	; (80011d0 <MX_USART1_UART_Init+0x5c>)
 800117c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800117e:	4b13      	ldr	r3, [pc, #76]	; (80011cc <MX_USART1_UART_Init+0x58>)
 8001180:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001184:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001186:	4b11      	ldr	r3, [pc, #68]	; (80011cc <MX_USART1_UART_Init+0x58>)
 8001188:	2200      	movs	r2, #0
 800118a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800118c:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <MX_USART1_UART_Init+0x58>)
 800118e:	2200      	movs	r2, #0
 8001190:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001192:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <MX_USART1_UART_Init+0x58>)
 8001194:	2200      	movs	r2, #0
 8001196:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001198:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <MX_USART1_UART_Init+0x58>)
 800119a:	220c      	movs	r2, #12
 800119c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800119e:	4b0b      	ldr	r3, [pc, #44]	; (80011cc <MX_USART1_UART_Init+0x58>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011a4:	4b09      	ldr	r3, [pc, #36]	; (80011cc <MX_USART1_UART_Init+0x58>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011aa:	4b08      	ldr	r3, [pc, #32]	; (80011cc <MX_USART1_UART_Init+0x58>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011b0:	4b06      	ldr	r3, [pc, #24]	; (80011cc <MX_USART1_UART_Init+0x58>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011b6:	4805      	ldr	r0, [pc, #20]	; (80011cc <MX_USART1_UART_Init+0x58>)
 80011b8:	f002 fb13 	bl	80037e2 <HAL_UART_Init>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80011c2:	f7ff ff3b 	bl	800103c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	2000021c 	.word	0x2000021c
 80011d0:	40013800 	.word	0x40013800

080011d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011da:	4b0f      	ldr	r3, [pc, #60]	; (8001218 <HAL_MspInit+0x44>)
 80011dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011de:	4a0e      	ldr	r2, [pc, #56]	; (8001218 <HAL_MspInit+0x44>)
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	6613      	str	r3, [r2, #96]	; 0x60
 80011e6:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <HAL_MspInit+0x44>)
 80011e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	607b      	str	r3, [r7, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011f2:	4b09      	ldr	r3, [pc, #36]	; (8001218 <HAL_MspInit+0x44>)
 80011f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f6:	4a08      	ldr	r2, [pc, #32]	; (8001218 <HAL_MspInit+0x44>)
 80011f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011fc:	6593      	str	r3, [r2, #88]	; 0x58
 80011fe:	4b06      	ldr	r3, [pc, #24]	; (8001218 <HAL_MspInit+0x44>)
 8001200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001206:	603b      	str	r3, [r7, #0]
 8001208:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800120a:	bf00      	nop
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	40021000 	.word	0x40021000

0800121c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a08      	ldr	r2, [pc, #32]	; (800124c <HAL_RTC_MspInit+0x30>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d107      	bne.n	800123e <HAL_RTC_MspInit+0x22>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800122e:	4b08      	ldr	r3, [pc, #32]	; (8001250 <HAL_RTC_MspInit+0x34>)
 8001230:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001234:	4a06      	ldr	r2, [pc, #24]	; (8001250 <HAL_RTC_MspInit+0x34>)
 8001236:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800123a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	40002800 	.word	0x40002800
 8001250:	40021000 	.word	0x40021000

08001254 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08c      	sub	sp, #48	; 0x30
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125c:	f107 031c 	add.w	r3, r7, #28
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
 800126a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a2e      	ldr	r2, [pc, #184]	; (800132c <HAL_UART_MspInit+0xd8>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d128      	bne.n	80012c8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001276:	4b2e      	ldr	r3, [pc, #184]	; (8001330 <HAL_UART_MspInit+0xdc>)
 8001278:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800127a:	4a2d      	ldr	r2, [pc, #180]	; (8001330 <HAL_UART_MspInit+0xdc>)
 800127c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001280:	6613      	str	r3, [r2, #96]	; 0x60
 8001282:	4b2b      	ldr	r3, [pc, #172]	; (8001330 <HAL_UART_MspInit+0xdc>)
 8001284:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001286:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800128a:	61bb      	str	r3, [r7, #24]
 800128c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800128e:	4b28      	ldr	r3, [pc, #160]	; (8001330 <HAL_UART_MspInit+0xdc>)
 8001290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001292:	4a27      	ldr	r2, [pc, #156]	; (8001330 <HAL_UART_MspInit+0xdc>)
 8001294:	f043 0302 	orr.w	r3, r3, #2
 8001298:	64d3      	str	r3, [r2, #76]	; 0x4c
 800129a:	4b25      	ldr	r3, [pc, #148]	; (8001330 <HAL_UART_MspInit+0xdc>)
 800129c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	617b      	str	r3, [r7, #20]
 80012a4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80012a6:	23c0      	movs	r3, #192	; 0xc0
 80012a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012aa:	2302      	movs	r3, #2
 80012ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ae:	2300      	movs	r3, #0
 80012b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b2:	2303      	movs	r3, #3
 80012b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012b6:	2307      	movs	r3, #7
 80012b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ba:	f107 031c 	add.w	r3, r7, #28
 80012be:	4619      	mov	r1, r3
 80012c0:	481c      	ldr	r0, [pc, #112]	; (8001334 <HAL_UART_MspInit+0xe0>)
 80012c2:	f000 fa9f 	bl	8001804 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80012c6:	e02d      	b.n	8001324 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a1a      	ldr	r2, [pc, #104]	; (8001338 <HAL_UART_MspInit+0xe4>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d128      	bne.n	8001324 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80012d2:	4b17      	ldr	r3, [pc, #92]	; (8001330 <HAL_UART_MspInit+0xdc>)
 80012d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012d6:	4a16      	ldr	r2, [pc, #88]	; (8001330 <HAL_UART_MspInit+0xdc>)
 80012d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012dc:	6593      	str	r3, [r2, #88]	; 0x58
 80012de:	4b14      	ldr	r3, [pc, #80]	; (8001330 <HAL_UART_MspInit+0xdc>)
 80012e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012e6:	613b      	str	r3, [r7, #16]
 80012e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ea:	4b11      	ldr	r3, [pc, #68]	; (8001330 <HAL_UART_MspInit+0xdc>)
 80012ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ee:	4a10      	ldr	r2, [pc, #64]	; (8001330 <HAL_UART_MspInit+0xdc>)
 80012f0:	f043 0308 	orr.w	r3, r3, #8
 80012f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012f6:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <HAL_UART_MspInit+0xdc>)
 80012f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fa:	f003 0308 	and.w	r3, r3, #8
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001302:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001306:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001308:	2302      	movs	r3, #2
 800130a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001310:	2303      	movs	r3, #3
 8001312:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001314:	2307      	movs	r3, #7
 8001316:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001318:	f107 031c 	add.w	r3, r7, #28
 800131c:	4619      	mov	r1, r3
 800131e:	4807      	ldr	r0, [pc, #28]	; (800133c <HAL_UART_MspInit+0xe8>)
 8001320:	f000 fa70 	bl	8001804 <HAL_GPIO_Init>
}
 8001324:	bf00      	nop
 8001326:	3730      	adds	r7, #48	; 0x30
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40013800 	.word	0x40013800
 8001330:	40021000 	.word	0x40021000
 8001334:	48000400 	.word	0x48000400
 8001338:	40004800 	.word	0x40004800
 800133c:	48000c00 	.word	0x48000c00

08001340 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001344:	bf00      	nop
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr

0800134e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800134e:	b480      	push	{r7}
 8001350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001352:	e7fe      	b.n	8001352 <HardFault_Handler+0x4>

08001354 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001358:	e7fe      	b.n	8001358 <MemManage_Handler+0x4>

0800135a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800135a:	b480      	push	{r7}
 800135c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800135e:	e7fe      	b.n	800135e <BusFault_Handler+0x4>

08001360 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001364:	e7fe      	b.n	8001364 <UsageFault_Handler+0x4>

08001366 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001366:	b480      	push	{r7}
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800136a:	bf00      	nop
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr

08001382 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001382:	b480      	push	{r7}
 8001384:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001394:	f000 f910 	bl	80015b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001398:	bf00      	nop
 800139a:	bd80      	pop	{r7, pc}

0800139c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80013a0:	2020      	movs	r0, #32
 80013a2:	f000 fbd9 	bl	8001b58 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80013a6:	2040      	movs	r0, #64	; 0x40
 80013a8:	f000 fbd6 	bl	8001b58 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80013ac:	2080      	movs	r0, #128	; 0x80
 80013ae:	f000 fbd3 	bl	8001b58 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80013b2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80013b6:	f000 fbcf 	bl	8001b58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}

080013be <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80013c2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80013c6:	f000 fbc7 	bl	8001b58 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80013ca:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80013ce:	f000 fbc3 	bl	8001b58 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80013d2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80013d6:	f000 fbbf 	bl	8001b58 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80013da:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80013de:	f000 fbbb 	bl	8001b58 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80013e2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80013e6:	f000 fbb7 	bl	8001b58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}

080013ee <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80013f2:	2002      	movs	r0, #2
 80013f4:	f000 fbb0 	bl	8001b58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80013f8:	bf00      	nop
 80013fa:	bd80      	pop	{r7, pc}

080013fc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001404:	4b11      	ldr	r3, [pc, #68]	; (800144c <_sbrk+0x50>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d102      	bne.n	8001412 <_sbrk+0x16>
		heap_end = &end;
 800140c:	4b0f      	ldr	r3, [pc, #60]	; (800144c <_sbrk+0x50>)
 800140e:	4a10      	ldr	r2, [pc, #64]	; (8001450 <_sbrk+0x54>)
 8001410:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001412:	4b0e      	ldr	r3, [pc, #56]	; (800144c <_sbrk+0x50>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001418:	4b0c      	ldr	r3, [pc, #48]	; (800144c <_sbrk+0x50>)
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	4413      	add	r3, r2
 8001420:	466a      	mov	r2, sp
 8001422:	4293      	cmp	r3, r2
 8001424:	d907      	bls.n	8001436 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001426:	f003 f8d1 	bl	80045cc <__errno>
 800142a:	4603      	mov	r3, r0
 800142c:	220c      	movs	r2, #12
 800142e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001430:	f04f 33ff 	mov.w	r3, #4294967295
 8001434:	e006      	b.n	8001444 <_sbrk+0x48>
	}

	heap_end += incr;
 8001436:	4b05      	ldr	r3, [pc, #20]	; (800144c <_sbrk+0x50>)
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4413      	add	r3, r2
 800143e:	4a03      	ldr	r2, [pc, #12]	; (800144c <_sbrk+0x50>)
 8001440:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001442:	68fb      	ldr	r3, [r7, #12]
}
 8001444:	4618      	mov	r0, r3
 8001446:	3710      	adds	r7, #16
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	2000029c 	.word	0x2000029c
 8001450:	20000358 	.word	0x20000358

08001454 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001458:	4b17      	ldr	r3, [pc, #92]	; (80014b8 <SystemInit+0x64>)
 800145a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800145e:	4a16      	ldr	r2, [pc, #88]	; (80014b8 <SystemInit+0x64>)
 8001460:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001464:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001468:	4b14      	ldr	r3, [pc, #80]	; (80014bc <SystemInit+0x68>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a13      	ldr	r2, [pc, #76]	; (80014bc <SystemInit+0x68>)
 800146e:	f043 0301 	orr.w	r3, r3, #1
 8001472:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001474:	4b11      	ldr	r3, [pc, #68]	; (80014bc <SystemInit+0x68>)
 8001476:	2200      	movs	r2, #0
 8001478:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800147a:	4b10      	ldr	r3, [pc, #64]	; (80014bc <SystemInit+0x68>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a0f      	ldr	r2, [pc, #60]	; (80014bc <SystemInit+0x68>)
 8001480:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001484:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001488:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800148a:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <SystemInit+0x68>)
 800148c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001490:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001492:	4b0a      	ldr	r3, [pc, #40]	; (80014bc <SystemInit+0x68>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a09      	ldr	r2, [pc, #36]	; (80014bc <SystemInit+0x68>)
 8001498:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800149c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800149e:	4b07      	ldr	r3, [pc, #28]	; (80014bc <SystemInit+0x68>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014a4:	4b04      	ldr	r3, [pc, #16]	; (80014b8 <SystemInit+0x64>)
 80014a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014aa:	609a      	str	r2, [r3, #8]
#endif
}
 80014ac:	bf00      	nop
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	e000ed00 	.word	0xe000ed00
 80014bc:	40021000 	.word	0x40021000

080014c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80014c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014f8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80014c4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80014c6:	e003      	b.n	80014d0 <LoopCopyDataInit>

080014c8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80014c8:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80014ca:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80014cc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80014ce:	3104      	adds	r1, #4

080014d0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80014d0:	480b      	ldr	r0, [pc, #44]	; (8001500 <LoopForever+0xa>)
	ldr	r3, =_edata
 80014d2:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <LoopForever+0xe>)
	adds	r2, r0, r1
 80014d4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80014d6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80014d8:	d3f6      	bcc.n	80014c8 <CopyDataInit>
	ldr	r2, =_sbss
 80014da:	4a0b      	ldr	r2, [pc, #44]	; (8001508 <LoopForever+0x12>)
	b	LoopFillZerobss
 80014dc:	e002      	b.n	80014e4 <LoopFillZerobss>

080014de <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80014de:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80014e0:	f842 3b04 	str.w	r3, [r2], #4

080014e4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80014e4:	4b09      	ldr	r3, [pc, #36]	; (800150c <LoopForever+0x16>)
	cmp	r2, r3
 80014e6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80014e8:	d3f9      	bcc.n	80014de <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014ea:	f7ff ffb3 	bl	8001454 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014ee:	f003 f969 	bl	80047c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014f2:	f7ff fd47 	bl	8000f84 <main>

080014f6 <LoopForever>:

LoopForever:
    b LoopForever
 80014f6:	e7fe      	b.n	80014f6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80014f8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80014fc:	08007890 	.word	0x08007890
	ldr	r0, =_sdata
 8001500:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001504:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 8001508:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 800150c:	20000354 	.word	0x20000354

08001510 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001510:	e7fe      	b.n	8001510 <ADC1_2_IRQHandler>

08001512 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b082      	sub	sp, #8
 8001516:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001518:	2300      	movs	r3, #0
 800151a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800151c:	2003      	movs	r0, #3
 800151e:	f000 f93d 	bl	800179c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001522:	2000      	movs	r0, #0
 8001524:	f000 f80e 	bl	8001544 <HAL_InitTick>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d002      	beq.n	8001534 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	71fb      	strb	r3, [r7, #7]
 8001532:	e001      	b.n	8001538 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001534:	f7ff fe4e 	bl	80011d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001538:	79fb      	ldrb	r3, [r7, #7]
}
 800153a:	4618      	mov	r0, r3
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
	...

08001544 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800154c:	2300      	movs	r3, #0
 800154e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001550:	4b16      	ldr	r3, [pc, #88]	; (80015ac <HAL_InitTick+0x68>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d022      	beq.n	800159e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001558:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <HAL_InitTick+0x6c>)
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	4b13      	ldr	r3, [pc, #76]	; (80015ac <HAL_InitTick+0x68>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001564:	fbb1 f3f3 	udiv	r3, r1, r3
 8001568:	fbb2 f3f3 	udiv	r3, r2, r3
 800156c:	4618      	mov	r0, r3
 800156e:	f000 f93c 	bl	80017ea <HAL_SYSTICK_Config>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d10f      	bne.n	8001598 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2b0f      	cmp	r3, #15
 800157c:	d809      	bhi.n	8001592 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800157e:	2200      	movs	r2, #0
 8001580:	6879      	ldr	r1, [r7, #4]
 8001582:	f04f 30ff 	mov.w	r0, #4294967295
 8001586:	f000 f914 	bl	80017b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800158a:	4a0a      	ldr	r2, [pc, #40]	; (80015b4 <HAL_InitTick+0x70>)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6013      	str	r3, [r2, #0]
 8001590:	e007      	b.n	80015a2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	73fb      	strb	r3, [r7, #15]
 8001596:	e004      	b.n	80015a2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	73fb      	strb	r3, [r7, #15]
 800159c:	e001      	b.n	80015a2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3710      	adds	r7, #16
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	20000008 	.word	0x20000008
 80015b0:	20000000 	.word	0x20000000
 80015b4:	20000004 	.word	0x20000004

080015b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015bc:	4b05      	ldr	r3, [pc, #20]	; (80015d4 <HAL_IncTick+0x1c>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	4b05      	ldr	r3, [pc, #20]	; (80015d8 <HAL_IncTick+0x20>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4413      	add	r3, r2
 80015c6:	4a03      	ldr	r2, [pc, #12]	; (80015d4 <HAL_IncTick+0x1c>)
 80015c8:	6013      	str	r3, [r2, #0]
}
 80015ca:	bf00      	nop
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	200002a0 	.word	0x200002a0
 80015d8:	20000008 	.word	0x20000008

080015dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  return uwTick;
 80015e0:	4b03      	ldr	r3, [pc, #12]	; (80015f0 <HAL_GetTick+0x14>)
 80015e2:	681b      	ldr	r3, [r3, #0]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	200002a0 	.word	0x200002a0

080015f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015fc:	f7ff ffee 	bl	80015dc <HAL_GetTick>
 8001600:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800160c:	d004      	beq.n	8001618 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800160e:	4b09      	ldr	r3, [pc, #36]	; (8001634 <HAL_Delay+0x40>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	68fa      	ldr	r2, [r7, #12]
 8001614:	4413      	add	r3, r2
 8001616:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001618:	bf00      	nop
 800161a:	f7ff ffdf 	bl	80015dc <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	68fa      	ldr	r2, [r7, #12]
 8001626:	429a      	cmp	r2, r3
 8001628:	d8f7      	bhi.n	800161a <HAL_Delay+0x26>
  {
  }
}
 800162a:	bf00      	nop
 800162c:	bf00      	nop
 800162e:	3710      	adds	r7, #16
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	20000008 	.word	0x20000008

08001638 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001638:	b480      	push	{r7}
 800163a:	b085      	sub	sp, #20
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f003 0307 	and.w	r3, r3, #7
 8001646:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001648:	4b0c      	ldr	r3, [pc, #48]	; (800167c <__NVIC_SetPriorityGrouping+0x44>)
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800164e:	68ba      	ldr	r2, [r7, #8]
 8001650:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001654:	4013      	ands	r3, r2
 8001656:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001660:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001664:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001668:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800166a:	4a04      	ldr	r2, [pc, #16]	; (800167c <__NVIC_SetPriorityGrouping+0x44>)
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	60d3      	str	r3, [r2, #12]
}
 8001670:	bf00      	nop
 8001672:	3714      	adds	r7, #20
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	e000ed00 	.word	0xe000ed00

08001680 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001684:	4b04      	ldr	r3, [pc, #16]	; (8001698 <__NVIC_GetPriorityGrouping+0x18>)
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	0a1b      	lsrs	r3, r3, #8
 800168a:	f003 0307 	and.w	r3, r3, #7
}
 800168e:	4618      	mov	r0, r3
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr
 8001698:	e000ed00 	.word	0xe000ed00

0800169c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	6039      	str	r1, [r7, #0]
 80016a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	db0a      	blt.n	80016c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	b2da      	uxtb	r2, r3
 80016b4:	490c      	ldr	r1, [pc, #48]	; (80016e8 <__NVIC_SetPriority+0x4c>)
 80016b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ba:	0112      	lsls	r2, r2, #4
 80016bc:	b2d2      	uxtb	r2, r2
 80016be:	440b      	add	r3, r1
 80016c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016c4:	e00a      	b.n	80016dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	b2da      	uxtb	r2, r3
 80016ca:	4908      	ldr	r1, [pc, #32]	; (80016ec <__NVIC_SetPriority+0x50>)
 80016cc:	79fb      	ldrb	r3, [r7, #7]
 80016ce:	f003 030f 	and.w	r3, r3, #15
 80016d2:	3b04      	subs	r3, #4
 80016d4:	0112      	lsls	r2, r2, #4
 80016d6:	b2d2      	uxtb	r2, r2
 80016d8:	440b      	add	r3, r1
 80016da:	761a      	strb	r2, [r3, #24]
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	e000e100 	.word	0xe000e100
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b089      	sub	sp, #36	; 0x24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f003 0307 	and.w	r3, r3, #7
 8001702:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	f1c3 0307 	rsb	r3, r3, #7
 800170a:	2b04      	cmp	r3, #4
 800170c:	bf28      	it	cs
 800170e:	2304      	movcs	r3, #4
 8001710:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	3304      	adds	r3, #4
 8001716:	2b06      	cmp	r3, #6
 8001718:	d902      	bls.n	8001720 <NVIC_EncodePriority+0x30>
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	3b03      	subs	r3, #3
 800171e:	e000      	b.n	8001722 <NVIC_EncodePriority+0x32>
 8001720:	2300      	movs	r3, #0
 8001722:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001724:	f04f 32ff 	mov.w	r2, #4294967295
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	43da      	mvns	r2, r3
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	401a      	ands	r2, r3
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001738:	f04f 31ff 	mov.w	r1, #4294967295
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	fa01 f303 	lsl.w	r3, r1, r3
 8001742:	43d9      	mvns	r1, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001748:	4313      	orrs	r3, r2
         );
}
 800174a:	4618      	mov	r0, r3
 800174c:	3724      	adds	r7, #36	; 0x24
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
	...

08001758 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	3b01      	subs	r3, #1
 8001764:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001768:	d301      	bcc.n	800176e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800176a:	2301      	movs	r3, #1
 800176c:	e00f      	b.n	800178e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800176e:	4a0a      	ldr	r2, [pc, #40]	; (8001798 <SysTick_Config+0x40>)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	3b01      	subs	r3, #1
 8001774:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001776:	210f      	movs	r1, #15
 8001778:	f04f 30ff 	mov.w	r0, #4294967295
 800177c:	f7ff ff8e 	bl	800169c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001780:	4b05      	ldr	r3, [pc, #20]	; (8001798 <SysTick_Config+0x40>)
 8001782:	2200      	movs	r2, #0
 8001784:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001786:	4b04      	ldr	r3, [pc, #16]	; (8001798 <SysTick_Config+0x40>)
 8001788:	2207      	movs	r2, #7
 800178a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	e000e010 	.word	0xe000e010

0800179c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f7ff ff47 	bl	8001638 <__NVIC_SetPriorityGrouping>
}
 80017aa:	bf00      	nop
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b086      	sub	sp, #24
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	4603      	mov	r3, r0
 80017ba:	60b9      	str	r1, [r7, #8]
 80017bc:	607a      	str	r2, [r7, #4]
 80017be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80017c0:	2300      	movs	r3, #0
 80017c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017c4:	f7ff ff5c 	bl	8001680 <__NVIC_GetPriorityGrouping>
 80017c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	68b9      	ldr	r1, [r7, #8]
 80017ce:	6978      	ldr	r0, [r7, #20]
 80017d0:	f7ff ff8e 	bl	80016f0 <NVIC_EncodePriority>
 80017d4:	4602      	mov	r2, r0
 80017d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017da:	4611      	mov	r1, r2
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff ff5d 	bl	800169c <__NVIC_SetPriority>
}
 80017e2:	bf00      	nop
 80017e4:	3718      	adds	r7, #24
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b082      	sub	sp, #8
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f7ff ffb0 	bl	8001758 <SysTick_Config>
 80017f8:	4603      	mov	r3, r0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
	...

08001804 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001804:	b480      	push	{r7}
 8001806:	b087      	sub	sp, #28
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800180e:	2300      	movs	r3, #0
 8001810:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001812:	e17f      	b.n	8001b14 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	2101      	movs	r1, #1
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	fa01 f303 	lsl.w	r3, r1, r3
 8001820:	4013      	ands	r3, r2
 8001822:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2b00      	cmp	r3, #0
 8001828:	f000 8171 	beq.w	8001b0e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	2b02      	cmp	r3, #2
 8001832:	d003      	beq.n	800183c <HAL_GPIO_Init+0x38>
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	2b12      	cmp	r3, #18
 800183a:	d123      	bne.n	8001884 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	08da      	lsrs	r2, r3, #3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3208      	adds	r2, #8
 8001844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001848:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	f003 0307 	and.w	r3, r3, #7
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	220f      	movs	r2, #15
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	43db      	mvns	r3, r3
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	4013      	ands	r3, r2
 800185e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	691a      	ldr	r2, [r3, #16]
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	f003 0307 	and.w	r3, r3, #7
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	693a      	ldr	r2, [r7, #16]
 8001872:	4313      	orrs	r3, r2
 8001874:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	08da      	lsrs	r2, r3, #3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	3208      	adds	r2, #8
 800187e:	6939      	ldr	r1, [r7, #16]
 8001880:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	2203      	movs	r2, #3
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	43db      	mvns	r3, r3
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	4013      	ands	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f003 0203 	and.w	r2, r3, #3
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	693a      	ldr	r2, [r7, #16]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d00b      	beq.n	80018d8 <HAL_GPIO_Init+0xd4>
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d007      	beq.n	80018d8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018cc:	2b11      	cmp	r3, #17
 80018ce:	d003      	beq.n	80018d8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	2b12      	cmp	r3, #18
 80018d6:	d130      	bne.n	800193a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	2203      	movs	r2, #3
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	43db      	mvns	r3, r3
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	4013      	ands	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	68da      	ldr	r2, [r3, #12]
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	4313      	orrs	r3, r2
 8001900:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800190e:	2201      	movs	r2, #1
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	43db      	mvns	r3, r3
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	4013      	ands	r3, r2
 800191c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	091b      	lsrs	r3, r3, #4
 8001924:	f003 0201 	and.w	r2, r3, #1
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	4313      	orrs	r3, r2
 8001932:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f003 0303 	and.w	r3, r3, #3
 8001942:	2b03      	cmp	r3, #3
 8001944:	d118      	bne.n	8001978 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800194a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800194c:	2201      	movs	r2, #1
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	43db      	mvns	r3, r3
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	4013      	ands	r3, r2
 800195a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	08db      	lsrs	r3, r3, #3
 8001962:	f003 0201 	and.w	r2, r3, #1
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	693a      	ldr	r2, [r7, #16]
 800196e:	4313      	orrs	r3, r2
 8001970:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	693a      	ldr	r2, [r7, #16]
 8001976:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	2203      	movs	r2, #3
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	43db      	mvns	r3, r3
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	4013      	ands	r3, r2
 800198e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	689a      	ldr	r2, [r3, #8]
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	693a      	ldr	r2, [r7, #16]
 800199e:	4313      	orrs	r3, r2
 80019a0:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	693a      	ldr	r2, [r7, #16]
 80019a6:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	f000 80ac 	beq.w	8001b0e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019b6:	4b5f      	ldr	r3, [pc, #380]	; (8001b34 <HAL_GPIO_Init+0x330>)
 80019b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019ba:	4a5e      	ldr	r2, [pc, #376]	; (8001b34 <HAL_GPIO_Init+0x330>)
 80019bc:	f043 0301 	orr.w	r3, r3, #1
 80019c0:	6613      	str	r3, [r2, #96]	; 0x60
 80019c2:	4b5c      	ldr	r3, [pc, #368]	; (8001b34 <HAL_GPIO_Init+0x330>)
 80019c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	60bb      	str	r3, [r7, #8]
 80019cc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019ce:	4a5a      	ldr	r2, [pc, #360]	; (8001b38 <HAL_GPIO_Init+0x334>)
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	089b      	lsrs	r3, r3, #2
 80019d4:	3302      	adds	r3, #2
 80019d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019da:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	f003 0303 	and.w	r3, r3, #3
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	220f      	movs	r2, #15
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	43db      	mvns	r3, r3
 80019ec:	693a      	ldr	r2, [r7, #16]
 80019ee:	4013      	ands	r3, r2
 80019f0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019f8:	d025      	beq.n	8001a46 <HAL_GPIO_Init+0x242>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a4f      	ldr	r2, [pc, #316]	; (8001b3c <HAL_GPIO_Init+0x338>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d01f      	beq.n	8001a42 <HAL_GPIO_Init+0x23e>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a4e      	ldr	r2, [pc, #312]	; (8001b40 <HAL_GPIO_Init+0x33c>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d019      	beq.n	8001a3e <HAL_GPIO_Init+0x23a>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a4d      	ldr	r2, [pc, #308]	; (8001b44 <HAL_GPIO_Init+0x340>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d013      	beq.n	8001a3a <HAL_GPIO_Init+0x236>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a4c      	ldr	r2, [pc, #304]	; (8001b48 <HAL_GPIO_Init+0x344>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d00d      	beq.n	8001a36 <HAL_GPIO_Init+0x232>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a4b      	ldr	r2, [pc, #300]	; (8001b4c <HAL_GPIO_Init+0x348>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d007      	beq.n	8001a32 <HAL_GPIO_Init+0x22e>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a4a      	ldr	r2, [pc, #296]	; (8001b50 <HAL_GPIO_Init+0x34c>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d101      	bne.n	8001a2e <HAL_GPIO_Init+0x22a>
 8001a2a:	2306      	movs	r3, #6
 8001a2c:	e00c      	b.n	8001a48 <HAL_GPIO_Init+0x244>
 8001a2e:	2307      	movs	r3, #7
 8001a30:	e00a      	b.n	8001a48 <HAL_GPIO_Init+0x244>
 8001a32:	2305      	movs	r3, #5
 8001a34:	e008      	b.n	8001a48 <HAL_GPIO_Init+0x244>
 8001a36:	2304      	movs	r3, #4
 8001a38:	e006      	b.n	8001a48 <HAL_GPIO_Init+0x244>
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e004      	b.n	8001a48 <HAL_GPIO_Init+0x244>
 8001a3e:	2302      	movs	r3, #2
 8001a40:	e002      	b.n	8001a48 <HAL_GPIO_Init+0x244>
 8001a42:	2301      	movs	r3, #1
 8001a44:	e000      	b.n	8001a48 <HAL_GPIO_Init+0x244>
 8001a46:	2300      	movs	r3, #0
 8001a48:	697a      	ldr	r2, [r7, #20]
 8001a4a:	f002 0203 	and.w	r2, r2, #3
 8001a4e:	0092      	lsls	r2, r2, #2
 8001a50:	4093      	lsls	r3, r2
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a58:	4937      	ldr	r1, [pc, #220]	; (8001b38 <HAL_GPIO_Init+0x334>)
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	089b      	lsrs	r3, r3, #2
 8001a5e:	3302      	adds	r3, #2
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001a66:	4b3b      	ldr	r3, [pc, #236]	; (8001b54 <HAL_GPIO_Init+0x350>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	4013      	ands	r3, r2
 8001a74:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d003      	beq.n	8001a8a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a8a:	4a32      	ldr	r2, [pc, #200]	; (8001b54 <HAL_GPIO_Init+0x350>)
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001a90:	4b30      	ldr	r3, [pc, #192]	; (8001b54 <HAL_GPIO_Init+0x350>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d003      	beq.n	8001ab4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001aac:	693a      	ldr	r2, [r7, #16]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ab4:	4a27      	ldr	r2, [pc, #156]	; (8001b54 <HAL_GPIO_Init+0x350>)
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001aba:	4b26      	ldr	r3, [pc, #152]	; (8001b54 <HAL_GPIO_Init+0x350>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	693a      	ldr	r2, [r7, #16]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d003      	beq.n	8001ade <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ade:	4a1d      	ldr	r2, [pc, #116]	; (8001b54 <HAL_GPIO_Init+0x350>)
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ae4:	4b1b      	ldr	r3, [pc, #108]	; (8001b54 <HAL_GPIO_Init+0x350>)
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	43db      	mvns	r3, r3
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	4013      	ands	r3, r2
 8001af2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d003      	beq.n	8001b08 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001b00:	693a      	ldr	r2, [r7, #16]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b08:	4a12      	ldr	r2, [pc, #72]	; (8001b54 <HAL_GPIO_Init+0x350>)
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	3301      	adds	r3, #1
 8001b12:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	f47f ae78 	bne.w	8001814 <HAL_GPIO_Init+0x10>
  }
}
 8001b24:	bf00      	nop
 8001b26:	bf00      	nop
 8001b28:	371c      	adds	r7, #28
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	40021000 	.word	0x40021000
 8001b38:	40010000 	.word	0x40010000
 8001b3c:	48000400 	.word	0x48000400
 8001b40:	48000800 	.word	0x48000800
 8001b44:	48000c00 	.word	0x48000c00
 8001b48:	48001000 	.word	0x48001000
 8001b4c:	48001400 	.word	0x48001400
 8001b50:	48001800 	.word	0x48001800
 8001b54:	40010400 	.word	0x40010400

08001b58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b62:	4b08      	ldr	r3, [pc, #32]	; (8001b84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b64:	695a      	ldr	r2, [r3, #20]
 8001b66:	88fb      	ldrh	r3, [r7, #6]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d006      	beq.n	8001b7c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b6e:	4a05      	ldr	r2, [pc, #20]	; (8001b84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b70:	88fb      	ldrh	r3, [r7, #6]
 8001b72:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b74:	88fb      	ldrh	r3, [r7, #6]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f000 f806 	bl	8001b88 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b7c:	bf00      	nop
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40010400 	.word	0x40010400

08001b88 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
	...

08001ba0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001ba4:	4b04      	ldr	r3, [pc, #16]	; (8001bb8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	40007000 	.word	0x40007000

08001bbc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bca:	d130      	bne.n	8001c2e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bcc:	4b23      	ldr	r3, [pc, #140]	; (8001c5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bd8:	d038      	beq.n	8001c4c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bda:	4b20      	ldr	r3, [pc, #128]	; (8001c5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001be2:	4a1e      	ldr	r2, [pc, #120]	; (8001c5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001be4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001be8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001bea:	4b1d      	ldr	r3, [pc, #116]	; (8001c60 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2232      	movs	r2, #50	; 0x32
 8001bf0:	fb02 f303 	mul.w	r3, r2, r3
 8001bf4:	4a1b      	ldr	r2, [pc, #108]	; (8001c64 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bfa:	0c9b      	lsrs	r3, r3, #18
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c00:	e002      	b.n	8001c08 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	3b01      	subs	r3, #1
 8001c06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c08:	4b14      	ldr	r3, [pc, #80]	; (8001c5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c0a:	695b      	ldr	r3, [r3, #20]
 8001c0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c14:	d102      	bne.n	8001c1c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d1f2      	bne.n	8001c02 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c1c:	4b0f      	ldr	r3, [pc, #60]	; (8001c5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c1e:	695b      	ldr	r3, [r3, #20]
 8001c20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c28:	d110      	bne.n	8001c4c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e00f      	b.n	8001c4e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c2e:	4b0b      	ldr	r3, [pc, #44]	; (8001c5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c3a:	d007      	beq.n	8001c4c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c3c:	4b07      	ldr	r3, [pc, #28]	; (8001c5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c44:	4a05      	ldr	r2, [pc, #20]	; (8001c5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c4a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3714      	adds	r7, #20
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	40007000 	.word	0x40007000
 8001c60:	20000000 	.word	0x20000000
 8001c64:	431bde83 	.word	0x431bde83

08001c68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b088      	sub	sp, #32
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d101      	bne.n	8001c7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e39d      	b.n	80023b6 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c7a:	4b95      	ldr	r3, [pc, #596]	; (8001ed0 <HAL_RCC_OscConfig+0x268>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f003 030c 	and.w	r3, r3, #12
 8001c82:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c84:	4b92      	ldr	r3, [pc, #584]	; (8001ed0 <HAL_RCC_OscConfig+0x268>)
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	f003 0303 	and.w	r3, r3, #3
 8001c8c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0310 	and.w	r3, r3, #16
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	f000 80e1 	beq.w	8001e5e <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d007      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x4a>
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	2b0c      	cmp	r3, #12
 8001ca6:	f040 8088 	bne.w	8001dba <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	f040 8084 	bne.w	8001dba <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cb2:	4b87      	ldr	r3, [pc, #540]	; (8001ed0 <HAL_RCC_OscConfig+0x268>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d005      	beq.n	8001cca <HAL_RCC_OscConfig+0x62>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d101      	bne.n	8001cca <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e375      	b.n	80023b6 <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a1a      	ldr	r2, [r3, #32]
 8001cce:	4b80      	ldr	r3, [pc, #512]	; (8001ed0 <HAL_RCC_OscConfig+0x268>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0308 	and.w	r3, r3, #8
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d004      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x7c>
 8001cda:	4b7d      	ldr	r3, [pc, #500]	; (8001ed0 <HAL_RCC_OscConfig+0x268>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ce2:	e005      	b.n	8001cf0 <HAL_RCC_OscConfig+0x88>
 8001ce4:	4b7a      	ldr	r3, [pc, #488]	; (8001ed0 <HAL_RCC_OscConfig+0x268>)
 8001ce6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cea:	091b      	lsrs	r3, r3, #4
 8001cec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d223      	bcs.n	8001d3c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6a1b      	ldr	r3, [r3, #32]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f000 fd0b 	bl	8002714 <RCC_SetFlashLatencyFromMSIRange>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e356      	b.n	80023b6 <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d08:	4b71      	ldr	r3, [pc, #452]	; (8001ed0 <HAL_RCC_OscConfig+0x268>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a70      	ldr	r2, [pc, #448]	; (8001ed0 <HAL_RCC_OscConfig+0x268>)
 8001d0e:	f043 0308 	orr.w	r3, r3, #8
 8001d12:	6013      	str	r3, [r2, #0]
 8001d14:	4b6e      	ldr	r3, [pc, #440]	; (8001ed0 <HAL_RCC_OscConfig+0x268>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a1b      	ldr	r3, [r3, #32]
 8001d20:	496b      	ldr	r1, [pc, #428]	; (8001ed0 <HAL_RCC_OscConfig+0x268>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d26:	4b6a      	ldr	r3, [pc, #424]	; (8001ed0 <HAL_RCC_OscConfig+0x268>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	69db      	ldr	r3, [r3, #28]
 8001d32:	021b      	lsls	r3, r3, #8
 8001d34:	4966      	ldr	r1, [pc, #408]	; (8001ed0 <HAL_RCC_OscConfig+0x268>)
 8001d36:	4313      	orrs	r3, r2
 8001d38:	604b      	str	r3, [r1, #4]
 8001d3a:	e022      	b.n	8001d82 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d3c:	4b64      	ldr	r3, [pc, #400]	; (8001ed0 <HAL_RCC_OscConfig+0x268>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a63      	ldr	r2, [pc, #396]	; (8001ed0 <HAL_RCC_OscConfig+0x268>)
 8001d42:	f043 0308 	orr.w	r3, r3, #8
 8001d46:	6013      	str	r3, [r2, #0]
 8001d48:	4b61      	ldr	r3, [pc, #388]	; (8001ed0 <HAL_RCC_OscConfig+0x268>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a1b      	ldr	r3, [r3, #32]
 8001d54:	495e      	ldr	r1, [pc, #376]	; (8001ed0 <HAL_RCC_OscConfig+0x268>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d5a:	4b5d      	ldr	r3, [pc, #372]	; (8001ed0 <HAL_RCC_OscConfig+0x268>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	69db      	ldr	r3, [r3, #28]
 8001d66:	021b      	lsls	r3, r3, #8
 8001d68:	4959      	ldr	r1, [pc, #356]	; (8001ed0 <HAL_RCC_OscConfig+0x268>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a1b      	ldr	r3, [r3, #32]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f000 fcce 	bl	8002714 <RCC_SetFlashLatencyFromMSIRange>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e319      	b.n	80023b6 <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d82:	f000 fc03 	bl	800258c <HAL_RCC_GetSysClockFreq>
 8001d86:	4602      	mov	r2, r0
 8001d88:	4b51      	ldr	r3, [pc, #324]	; (8001ed0 <HAL_RCC_OscConfig+0x268>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	091b      	lsrs	r3, r3, #4
 8001d8e:	f003 030f 	and.w	r3, r3, #15
 8001d92:	4950      	ldr	r1, [pc, #320]	; (8001ed4 <HAL_RCC_OscConfig+0x26c>)
 8001d94:	5ccb      	ldrb	r3, [r1, r3]
 8001d96:	f003 031f 	and.w	r3, r3, #31
 8001d9a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d9e:	4a4e      	ldr	r2, [pc, #312]	; (8001ed8 <HAL_RCC_OscConfig+0x270>)
 8001da0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001da2:	4b4e      	ldr	r3, [pc, #312]	; (8001edc <HAL_RCC_OscConfig+0x274>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff fbcc 	bl	8001544 <HAL_InitTick>
 8001dac:	4603      	mov	r3, r0
 8001dae:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001db0:	7bfb      	ldrb	r3, [r7, #15]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d052      	beq.n	8001e5c <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8001db6:	7bfb      	ldrb	r3, [r7, #15]
 8001db8:	e2fd      	b.n	80023b6 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	699b      	ldr	r3, [r3, #24]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d032      	beq.n	8001e28 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001dc2:	4b43      	ldr	r3, [pc, #268]	; (8001ed0 <HAL_RCC_OscConfig+0x268>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a42      	ldr	r2, [pc, #264]	; (8001ed0 <HAL_RCC_OscConfig+0x268>)
 8001dc8:	f043 0301 	orr.w	r3, r3, #1
 8001dcc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001dce:	f7ff fc05 	bl	80015dc <HAL_GetTick>
 8001dd2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dd4:	e008      	b.n	8001de8 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001dd6:	f7ff fc01 	bl	80015dc <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d901      	bls.n	8001de8 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e2e6      	b.n	80023b6 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001de8:	4b39      	ldr	r3, [pc, #228]	; (8001ed0 <HAL_RCC_OscConfig+0x268>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0302 	and.w	r3, r3, #2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d0f0      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001df4:	4b36      	ldr	r3, [pc, #216]	; (8001ed0 <HAL_RCC_OscConfig+0x268>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a35      	ldr	r2, [pc, #212]	; (8001ed0 <HAL_RCC_OscConfig+0x268>)
 8001dfa:	f043 0308 	orr.w	r3, r3, #8
 8001dfe:	6013      	str	r3, [r2, #0]
 8001e00:	4b33      	ldr	r3, [pc, #204]	; (8001ed0 <HAL_RCC_OscConfig+0x268>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a1b      	ldr	r3, [r3, #32]
 8001e0c:	4930      	ldr	r1, [pc, #192]	; (8001ed0 <HAL_RCC_OscConfig+0x268>)
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e12:	4b2f      	ldr	r3, [pc, #188]	; (8001ed0 <HAL_RCC_OscConfig+0x268>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	69db      	ldr	r3, [r3, #28]
 8001e1e:	021b      	lsls	r3, r3, #8
 8001e20:	492b      	ldr	r1, [pc, #172]	; (8001ed0 <HAL_RCC_OscConfig+0x268>)
 8001e22:	4313      	orrs	r3, r2
 8001e24:	604b      	str	r3, [r1, #4]
 8001e26:	e01a      	b.n	8001e5e <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e28:	4b29      	ldr	r3, [pc, #164]	; (8001ed0 <HAL_RCC_OscConfig+0x268>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a28      	ldr	r2, [pc, #160]	; (8001ed0 <HAL_RCC_OscConfig+0x268>)
 8001e2e:	f023 0301 	bic.w	r3, r3, #1
 8001e32:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e34:	f7ff fbd2 	bl	80015dc <HAL_GetTick>
 8001e38:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e3a:	e008      	b.n	8001e4e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e3c:	f7ff fbce 	bl	80015dc <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e2b3      	b.n	80023b6 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e4e:	4b20      	ldr	r3, [pc, #128]	; (8001ed0 <HAL_RCC_OscConfig+0x268>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1f0      	bne.n	8001e3c <HAL_RCC_OscConfig+0x1d4>
 8001e5a:	e000      	b.n	8001e5e <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e5c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d073      	beq.n	8001f52 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	2b08      	cmp	r3, #8
 8001e6e:	d005      	beq.n	8001e7c <HAL_RCC_OscConfig+0x214>
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	2b0c      	cmp	r3, #12
 8001e74:	d10e      	bne.n	8001e94 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	2b03      	cmp	r3, #3
 8001e7a:	d10b      	bne.n	8001e94 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e7c:	4b14      	ldr	r3, [pc, #80]	; (8001ed0 <HAL_RCC_OscConfig+0x268>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d063      	beq.n	8001f50 <HAL_RCC_OscConfig+0x2e8>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d15f      	bne.n	8001f50 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e290      	b.n	80023b6 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e9c:	d106      	bne.n	8001eac <HAL_RCC_OscConfig+0x244>
 8001e9e:	4b0c      	ldr	r3, [pc, #48]	; (8001ed0 <HAL_RCC_OscConfig+0x268>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a0b      	ldr	r2, [pc, #44]	; (8001ed0 <HAL_RCC_OscConfig+0x268>)
 8001ea4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ea8:	6013      	str	r3, [r2, #0]
 8001eaa:	e025      	b.n	8001ef8 <HAL_RCC_OscConfig+0x290>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001eb4:	d114      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x278>
 8001eb6:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <HAL_RCC_OscConfig+0x268>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a05      	ldr	r2, [pc, #20]	; (8001ed0 <HAL_RCC_OscConfig+0x268>)
 8001ebc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ec0:	6013      	str	r3, [r2, #0]
 8001ec2:	4b03      	ldr	r3, [pc, #12]	; (8001ed0 <HAL_RCC_OscConfig+0x268>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a02      	ldr	r2, [pc, #8]	; (8001ed0 <HAL_RCC_OscConfig+0x268>)
 8001ec8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ecc:	6013      	str	r3, [r2, #0]
 8001ece:	e013      	b.n	8001ef8 <HAL_RCC_OscConfig+0x290>
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	08007460 	.word	0x08007460
 8001ed8:	20000000 	.word	0x20000000
 8001edc:	20000004 	.word	0x20000004
 8001ee0:	4ba0      	ldr	r3, [pc, #640]	; (8002164 <HAL_RCC_OscConfig+0x4fc>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a9f      	ldr	r2, [pc, #636]	; (8002164 <HAL_RCC_OscConfig+0x4fc>)
 8001ee6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eea:	6013      	str	r3, [r2, #0]
 8001eec:	4b9d      	ldr	r3, [pc, #628]	; (8002164 <HAL_RCC_OscConfig+0x4fc>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a9c      	ldr	r2, [pc, #624]	; (8002164 <HAL_RCC_OscConfig+0x4fc>)
 8001ef2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ef6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d013      	beq.n	8001f28 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f00:	f7ff fb6c 	bl	80015dc <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0x2b2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f08:	f7ff fb68 	bl	80015dc <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b64      	cmp	r3, #100	; 0x64
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x2b2>
          {
            return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e24d      	b.n	80023b6 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f1a:	4b92      	ldr	r3, [pc, #584]	; (8002164 <HAL_RCC_OscConfig+0x4fc>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d0f0      	beq.n	8001f08 <HAL_RCC_OscConfig+0x2a0>
 8001f26:	e014      	b.n	8001f52 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f28:	f7ff fb58 	bl	80015dc <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0x2da>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f30:	f7ff fb54 	bl	80015dc <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b64      	cmp	r3, #100	; 0x64
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x2da>
          {
            return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e239      	b.n	80023b6 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f42:	4b88      	ldr	r3, [pc, #544]	; (8002164 <HAL_RCC_OscConfig+0x4fc>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1f0      	bne.n	8001f30 <HAL_RCC_OscConfig+0x2c8>
 8001f4e:	e000      	b.n	8001f52 <HAL_RCC_OscConfig+0x2ea>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d060      	beq.n	8002020 <HAL_RCC_OscConfig+0x3b8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	2b04      	cmp	r3, #4
 8001f62:	d005      	beq.n	8001f70 <HAL_RCC_OscConfig+0x308>
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	2b0c      	cmp	r3, #12
 8001f68:	d119      	bne.n	8001f9e <HAL_RCC_OscConfig+0x336>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d116      	bne.n	8001f9e <HAL_RCC_OscConfig+0x336>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f70:	4b7c      	ldr	r3, [pc, #496]	; (8002164 <HAL_RCC_OscConfig+0x4fc>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d005      	beq.n	8001f88 <HAL_RCC_OscConfig+0x320>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d101      	bne.n	8001f88 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e216      	b.n	80023b6 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f88:	4b76      	ldr	r3, [pc, #472]	; (8002164 <HAL_RCC_OscConfig+0x4fc>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	691b      	ldr	r3, [r3, #16]
 8001f94:	061b      	lsls	r3, r3, #24
 8001f96:	4973      	ldr	r1, [pc, #460]	; (8002164 <HAL_RCC_OscConfig+0x4fc>)
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f9c:	e040      	b.n	8002020 <HAL_RCC_OscConfig+0x3b8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d023      	beq.n	8001fee <HAL_RCC_OscConfig+0x386>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fa6:	4b6f      	ldr	r3, [pc, #444]	; (8002164 <HAL_RCC_OscConfig+0x4fc>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a6e      	ldr	r2, [pc, #440]	; (8002164 <HAL_RCC_OscConfig+0x4fc>)
 8001fac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb2:	f7ff fb13 	bl	80015dc <HAL_GetTick>
 8001fb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fb8:	e008      	b.n	8001fcc <HAL_RCC_OscConfig+0x364>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fba:	f7ff fb0f 	bl	80015dc <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d901      	bls.n	8001fcc <HAL_RCC_OscConfig+0x364>
          {
            return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e1f4      	b.n	80023b6 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fcc:	4b65      	ldr	r3, [pc, #404]	; (8002164 <HAL_RCC_OscConfig+0x4fc>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d0f0      	beq.n	8001fba <HAL_RCC_OscConfig+0x352>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd8:	4b62      	ldr	r3, [pc, #392]	; (8002164 <HAL_RCC_OscConfig+0x4fc>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	691b      	ldr	r3, [r3, #16]
 8001fe4:	061b      	lsls	r3, r3, #24
 8001fe6:	495f      	ldr	r1, [pc, #380]	; (8002164 <HAL_RCC_OscConfig+0x4fc>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	604b      	str	r3, [r1, #4]
 8001fec:	e018      	b.n	8002020 <HAL_RCC_OscConfig+0x3b8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fee:	4b5d      	ldr	r3, [pc, #372]	; (8002164 <HAL_RCC_OscConfig+0x4fc>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a5c      	ldr	r2, [pc, #368]	; (8002164 <HAL_RCC_OscConfig+0x4fc>)
 8001ff4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ff8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ffa:	f7ff faef 	bl	80015dc <HAL_GetTick>
 8001ffe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002000:	e008      	b.n	8002014 <HAL_RCC_OscConfig+0x3ac>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002002:	f7ff faeb 	bl	80015dc <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	2b02      	cmp	r3, #2
 800200e:	d901      	bls.n	8002014 <HAL_RCC_OscConfig+0x3ac>
          {
            return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e1d0      	b.n	80023b6 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002014:	4b53      	ldr	r3, [pc, #332]	; (8002164 <HAL_RCC_OscConfig+0x4fc>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800201c:	2b00      	cmp	r3, #0
 800201e:	d1f0      	bne.n	8002002 <HAL_RCC_OscConfig+0x39a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0308 	and.w	r3, r3, #8
 8002028:	2b00      	cmp	r3, #0
 800202a:	d03c      	beq.n	80020a6 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	695b      	ldr	r3, [r3, #20]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d01c      	beq.n	800206e <HAL_RCC_OscConfig+0x406>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002034:	4b4b      	ldr	r3, [pc, #300]	; (8002164 <HAL_RCC_OscConfig+0x4fc>)
 8002036:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800203a:	4a4a      	ldr	r2, [pc, #296]	; (8002164 <HAL_RCC_OscConfig+0x4fc>)
 800203c:	f043 0301 	orr.w	r3, r3, #1
 8002040:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002044:	f7ff faca 	bl	80015dc <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0x3f6>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800204c:	f7ff fac6 	bl	80015dc <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x3f6>
        {
          return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e1ab      	b.n	80023b6 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800205e:	4b41      	ldr	r3, [pc, #260]	; (8002164 <HAL_RCC_OscConfig+0x4fc>)
 8002060:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d0ef      	beq.n	800204c <HAL_RCC_OscConfig+0x3e4>
 800206c:	e01b      	b.n	80020a6 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800206e:	4b3d      	ldr	r3, [pc, #244]	; (8002164 <HAL_RCC_OscConfig+0x4fc>)
 8002070:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002074:	4a3b      	ldr	r2, [pc, #236]	; (8002164 <HAL_RCC_OscConfig+0x4fc>)
 8002076:	f023 0301 	bic.w	r3, r3, #1
 800207a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800207e:	f7ff faad 	bl	80015dc <HAL_GetTick>
 8002082:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002084:	e008      	b.n	8002098 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002086:	f7ff faa9 	bl	80015dc <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b02      	cmp	r3, #2
 8002092:	d901      	bls.n	8002098 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e18e      	b.n	80023b6 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002098:	4b32      	ldr	r3, [pc, #200]	; (8002164 <HAL_RCC_OscConfig+0x4fc>)
 800209a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d1ef      	bne.n	8002086 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0304 	and.w	r3, r3, #4
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f000 80a6 	beq.w	8002200 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020b4:	2300      	movs	r3, #0
 80020b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80020b8:	4b2a      	ldr	r3, [pc, #168]	; (8002164 <HAL_RCC_OscConfig+0x4fc>)
 80020ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d10d      	bne.n	80020e0 <HAL_RCC_OscConfig+0x478>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020c4:	4b27      	ldr	r3, [pc, #156]	; (8002164 <HAL_RCC_OscConfig+0x4fc>)
 80020c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c8:	4a26      	ldr	r2, [pc, #152]	; (8002164 <HAL_RCC_OscConfig+0x4fc>)
 80020ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ce:	6593      	str	r3, [r2, #88]	; 0x58
 80020d0:	4b24      	ldr	r3, [pc, #144]	; (8002164 <HAL_RCC_OscConfig+0x4fc>)
 80020d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d8:	60bb      	str	r3, [r7, #8]
 80020da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020dc:	2301      	movs	r3, #1
 80020de:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020e0:	4b21      	ldr	r3, [pc, #132]	; (8002168 <HAL_RCC_OscConfig+0x500>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d118      	bne.n	800211e <HAL_RCC_OscConfig+0x4b6>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020ec:	4b1e      	ldr	r3, [pc, #120]	; (8002168 <HAL_RCC_OscConfig+0x500>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a1d      	ldr	r2, [pc, #116]	; (8002168 <HAL_RCC_OscConfig+0x500>)
 80020f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020f8:	f7ff fa70 	bl	80015dc <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020fe:	e008      	b.n	8002112 <HAL_RCC_OscConfig+0x4aa>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002100:	f7ff fa6c 	bl	80015dc <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x4aa>
        {
          return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e151      	b.n	80023b6 <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002112:	4b15      	ldr	r3, [pc, #84]	; (8002168 <HAL_RCC_OscConfig+0x500>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800211a:	2b00      	cmp	r3, #0
 800211c:	d0f0      	beq.n	8002100 <HAL_RCC_OscConfig+0x498>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d108      	bne.n	8002138 <HAL_RCC_OscConfig+0x4d0>
 8002126:	4b0f      	ldr	r3, [pc, #60]	; (8002164 <HAL_RCC_OscConfig+0x4fc>)
 8002128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800212c:	4a0d      	ldr	r2, [pc, #52]	; (8002164 <HAL_RCC_OscConfig+0x4fc>)
 800212e:	f043 0301 	orr.w	r3, r3, #1
 8002132:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002136:	e029      	b.n	800218c <HAL_RCC_OscConfig+0x524>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	2b05      	cmp	r3, #5
 800213e:	d115      	bne.n	800216c <HAL_RCC_OscConfig+0x504>
 8002140:	4b08      	ldr	r3, [pc, #32]	; (8002164 <HAL_RCC_OscConfig+0x4fc>)
 8002142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002146:	4a07      	ldr	r2, [pc, #28]	; (8002164 <HAL_RCC_OscConfig+0x4fc>)
 8002148:	f043 0304 	orr.w	r3, r3, #4
 800214c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002150:	4b04      	ldr	r3, [pc, #16]	; (8002164 <HAL_RCC_OscConfig+0x4fc>)
 8002152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002156:	4a03      	ldr	r2, [pc, #12]	; (8002164 <HAL_RCC_OscConfig+0x4fc>)
 8002158:	f043 0301 	orr.w	r3, r3, #1
 800215c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002160:	e014      	b.n	800218c <HAL_RCC_OscConfig+0x524>
 8002162:	bf00      	nop
 8002164:	40021000 	.word	0x40021000
 8002168:	40007000 	.word	0x40007000
 800216c:	4b94      	ldr	r3, [pc, #592]	; (80023c0 <HAL_RCC_OscConfig+0x758>)
 800216e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002172:	4a93      	ldr	r2, [pc, #588]	; (80023c0 <HAL_RCC_OscConfig+0x758>)
 8002174:	f023 0301 	bic.w	r3, r3, #1
 8002178:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800217c:	4b90      	ldr	r3, [pc, #576]	; (80023c0 <HAL_RCC_OscConfig+0x758>)
 800217e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002182:	4a8f      	ldr	r2, [pc, #572]	; (80023c0 <HAL_RCC_OscConfig+0x758>)
 8002184:	f023 0304 	bic.w	r3, r3, #4
 8002188:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d016      	beq.n	80021c2 <HAL_RCC_OscConfig+0x55a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002194:	f7ff fa22 	bl	80015dc <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800219a:	e00a      	b.n	80021b2 <HAL_RCC_OscConfig+0x54a>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800219c:	f7ff fa1e 	bl	80015dc <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0x54a>
        {
          return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e101      	b.n	80023b6 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021b2:	4b83      	ldr	r3, [pc, #524]	; (80023c0 <HAL_RCC_OscConfig+0x758>)
 80021b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d0ed      	beq.n	800219c <HAL_RCC_OscConfig+0x534>
 80021c0:	e015      	b.n	80021ee <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021c2:	f7ff fa0b 	bl	80015dc <HAL_GetTick>
 80021c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021c8:	e00a      	b.n	80021e0 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ca:	f7ff fa07 	bl	80015dc <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021d8:	4293      	cmp	r3, r2
 80021da:	d901      	bls.n	80021e0 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e0ea      	b.n	80023b6 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021e0:	4b77      	ldr	r3, [pc, #476]	; (80023c0 <HAL_RCC_OscConfig+0x758>)
 80021e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1ed      	bne.n	80021ca <HAL_RCC_OscConfig+0x562>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021ee:	7ffb      	ldrb	r3, [r7, #31]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d105      	bne.n	8002200 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021f4:	4b72      	ldr	r3, [pc, #456]	; (80023c0 <HAL_RCC_OscConfig+0x758>)
 80021f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f8:	4a71      	ldr	r2, [pc, #452]	; (80023c0 <HAL_RCC_OscConfig+0x758>)
 80021fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021fe:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002204:	2b00      	cmp	r3, #0
 8002206:	f000 80d5 	beq.w	80023b4 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	2b0c      	cmp	r3, #12
 800220e:	f000 808e 	beq.w	800232e <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002216:	2b02      	cmp	r3, #2
 8002218:	d15b      	bne.n	80022d2 <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800221a:	4b69      	ldr	r3, [pc, #420]	; (80023c0 <HAL_RCC_OscConfig+0x758>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a68      	ldr	r2, [pc, #416]	; (80023c0 <HAL_RCC_OscConfig+0x758>)
 8002220:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002224:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002226:	f7ff f9d9 	bl	80015dc <HAL_GetTick>
 800222a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800222c:	e008      	b.n	8002240 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800222e:	f7ff f9d5 	bl	80015dc <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b02      	cmp	r3, #2
 800223a:	d901      	bls.n	8002240 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e0ba      	b.n	80023b6 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002240:	4b5f      	ldr	r3, [pc, #380]	; (80023c0 <HAL_RCC_OscConfig+0x758>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d1f0      	bne.n	800222e <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800224c:	4b5c      	ldr	r3, [pc, #368]	; (80023c0 <HAL_RCC_OscConfig+0x758>)
 800224e:	68da      	ldr	r2, [r3, #12]
 8002250:	4b5c      	ldr	r3, [pc, #368]	; (80023c4 <HAL_RCC_OscConfig+0x75c>)
 8002252:	4013      	ands	r3, r2
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800225c:	3a01      	subs	r2, #1
 800225e:	0112      	lsls	r2, r2, #4
 8002260:	4311      	orrs	r1, r2
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002266:	0212      	lsls	r2, r2, #8
 8002268:	4311      	orrs	r1, r2
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800226e:	0852      	lsrs	r2, r2, #1
 8002270:	3a01      	subs	r2, #1
 8002272:	0552      	lsls	r2, r2, #21
 8002274:	4311      	orrs	r1, r2
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800227a:	0852      	lsrs	r2, r2, #1
 800227c:	3a01      	subs	r2, #1
 800227e:	0652      	lsls	r2, r2, #25
 8002280:	4311      	orrs	r1, r2
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002286:	0912      	lsrs	r2, r2, #4
 8002288:	0452      	lsls	r2, r2, #17
 800228a:	430a      	orrs	r2, r1
 800228c:	494c      	ldr	r1, [pc, #304]	; (80023c0 <HAL_RCC_OscConfig+0x758>)
 800228e:	4313      	orrs	r3, r2
 8002290:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002292:	4b4b      	ldr	r3, [pc, #300]	; (80023c0 <HAL_RCC_OscConfig+0x758>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a4a      	ldr	r2, [pc, #296]	; (80023c0 <HAL_RCC_OscConfig+0x758>)
 8002298:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800229c:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800229e:	4b48      	ldr	r3, [pc, #288]	; (80023c0 <HAL_RCC_OscConfig+0x758>)
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	4a47      	ldr	r2, [pc, #284]	; (80023c0 <HAL_RCC_OscConfig+0x758>)
 80022a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022a8:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022aa:	f7ff f997 	bl	80015dc <HAL_GetTick>
 80022ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022b0:	e008      	b.n	80022c4 <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022b2:	f7ff f993 	bl	80015dc <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d901      	bls.n	80022c4 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e078      	b.n	80023b6 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022c4:	4b3e      	ldr	r3, [pc, #248]	; (80023c0 <HAL_RCC_OscConfig+0x758>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d0f0      	beq.n	80022b2 <HAL_RCC_OscConfig+0x64a>
 80022d0:	e070      	b.n	80023b4 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022d2:	4b3b      	ldr	r3, [pc, #236]	; (80023c0 <HAL_RCC_OscConfig+0x758>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a3a      	ldr	r2, [pc, #232]	; (80023c0 <HAL_RCC_OscConfig+0x758>)
 80022d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022dc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80022de:	4b38      	ldr	r3, [pc, #224]	; (80023c0 <HAL_RCC_OscConfig+0x758>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d105      	bne.n	80022f6 <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80022ea:	4b35      	ldr	r3, [pc, #212]	; (80023c0 <HAL_RCC_OscConfig+0x758>)
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	4a34      	ldr	r2, [pc, #208]	; (80023c0 <HAL_RCC_OscConfig+0x758>)
 80022f0:	f023 0303 	bic.w	r3, r3, #3
 80022f4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80022f6:	4b32      	ldr	r3, [pc, #200]	; (80023c0 <HAL_RCC_OscConfig+0x758>)
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	4a31      	ldr	r2, [pc, #196]	; (80023c0 <HAL_RCC_OscConfig+0x758>)
 80022fc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002300:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002304:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002306:	f7ff f969 	bl	80015dc <HAL_GetTick>
 800230a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800230c:	e008      	b.n	8002320 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800230e:	f7ff f965 	bl	80015dc <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d901      	bls.n	8002320 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e04a      	b.n	80023b6 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002320:	4b27      	ldr	r3, [pc, #156]	; (80023c0 <HAL_RCC_OscConfig+0x758>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d1f0      	bne.n	800230e <HAL_RCC_OscConfig+0x6a6>
 800232c:	e042      	b.n	80023b4 <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002332:	2b01      	cmp	r3, #1
 8002334:	d101      	bne.n	800233a <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e03d      	b.n	80023b6 <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 800233a:	4b21      	ldr	r3, [pc, #132]	; (80023c0 <HAL_RCC_OscConfig+0x758>)
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	f003 0203 	and.w	r2, r3, #3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234a:	429a      	cmp	r2, r3
 800234c:	d130      	bne.n	80023b0 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002358:	3b01      	subs	r3, #1
 800235a:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800235c:	429a      	cmp	r2, r3
 800235e:	d127      	bne.n	80023b0 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800236a:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800236c:	429a      	cmp	r2, r3
 800236e:	d11f      	bne.n	80023b0 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800237a:	2a07      	cmp	r2, #7
 800237c:	bf14      	ite	ne
 800237e:	2201      	movne	r2, #1
 8002380:	2200      	moveq	r2, #0
 8002382:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002384:	4293      	cmp	r3, r2
 8002386:	d113      	bne.n	80023b0 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002392:	085b      	lsrs	r3, r3, #1
 8002394:	3b01      	subs	r3, #1
 8002396:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002398:	429a      	cmp	r2, r3
 800239a:	d109      	bne.n	80023b0 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a6:	085b      	lsrs	r3, r3, #1
 80023a8:	3b01      	subs	r3, #1
 80023aa:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d001      	beq.n	80023b4 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e000      	b.n	80023b6 <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3720      	adds	r7, #32
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	40021000 	.word	0x40021000
 80023c4:	f99d808c 	.word	0xf99d808c

080023c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d101      	bne.n	80023dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e0c8      	b.n	800256e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023dc:	4b66      	ldr	r3, [pc, #408]	; (8002578 <HAL_RCC_ClockConfig+0x1b0>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0307 	and.w	r3, r3, #7
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d910      	bls.n	800240c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ea:	4b63      	ldr	r3, [pc, #396]	; (8002578 <HAL_RCC_ClockConfig+0x1b0>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f023 0207 	bic.w	r2, r3, #7
 80023f2:	4961      	ldr	r1, [pc, #388]	; (8002578 <HAL_RCC_ClockConfig+0x1b0>)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023fa:	4b5f      	ldr	r3, [pc, #380]	; (8002578 <HAL_RCC_ClockConfig+0x1b0>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0307 	and.w	r3, r3, #7
 8002402:	683a      	ldr	r2, [r7, #0]
 8002404:	429a      	cmp	r2, r3
 8002406:	d001      	beq.n	800240c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e0b0      	b.n	800256e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	2b00      	cmp	r3, #0
 8002416:	d04c      	beq.n	80024b2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	2b03      	cmp	r3, #3
 800241e:	d107      	bne.n	8002430 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002420:	4b56      	ldr	r3, [pc, #344]	; (800257c <HAL_RCC_ClockConfig+0x1b4>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d121      	bne.n	8002470 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e09e      	b.n	800256e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	2b02      	cmp	r3, #2
 8002436:	d107      	bne.n	8002448 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002438:	4b50      	ldr	r3, [pc, #320]	; (800257c <HAL_RCC_ClockConfig+0x1b4>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d115      	bne.n	8002470 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e092      	b.n	800256e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d107      	bne.n	8002460 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002450:	4b4a      	ldr	r3, [pc, #296]	; (800257c <HAL_RCC_ClockConfig+0x1b4>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d109      	bne.n	8002470 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e086      	b.n	800256e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002460:	4b46      	ldr	r3, [pc, #280]	; (800257c <HAL_RCC_ClockConfig+0x1b4>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002468:	2b00      	cmp	r3, #0
 800246a:	d101      	bne.n	8002470 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e07e      	b.n	800256e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002470:	4b42      	ldr	r3, [pc, #264]	; (800257c <HAL_RCC_ClockConfig+0x1b4>)
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f023 0203 	bic.w	r2, r3, #3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	493f      	ldr	r1, [pc, #252]	; (800257c <HAL_RCC_ClockConfig+0x1b4>)
 800247e:	4313      	orrs	r3, r2
 8002480:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002482:	f7ff f8ab 	bl	80015dc <HAL_GetTick>
 8002486:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002488:	e00a      	b.n	80024a0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800248a:	f7ff f8a7 	bl	80015dc <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	f241 3288 	movw	r2, #5000	; 0x1388
 8002498:	4293      	cmp	r3, r2
 800249a:	d901      	bls.n	80024a0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e066      	b.n	800256e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024a0:	4b36      	ldr	r3, [pc, #216]	; (800257c <HAL_RCC_ClockConfig+0x1b4>)
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f003 020c 	and.w	r2, r3, #12
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d1eb      	bne.n	800248a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d008      	beq.n	80024d0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024be:	4b2f      	ldr	r3, [pc, #188]	; (800257c <HAL_RCC_ClockConfig+0x1b4>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	492c      	ldr	r1, [pc, #176]	; (800257c <HAL_RCC_ClockConfig+0x1b4>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024d0:	4b29      	ldr	r3, [pc, #164]	; (8002578 <HAL_RCC_ClockConfig+0x1b0>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0307 	and.w	r3, r3, #7
 80024d8:	683a      	ldr	r2, [r7, #0]
 80024da:	429a      	cmp	r2, r3
 80024dc:	d210      	bcs.n	8002500 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024de:	4b26      	ldr	r3, [pc, #152]	; (8002578 <HAL_RCC_ClockConfig+0x1b0>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f023 0207 	bic.w	r2, r3, #7
 80024e6:	4924      	ldr	r1, [pc, #144]	; (8002578 <HAL_RCC_ClockConfig+0x1b0>)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ee:	4b22      	ldr	r3, [pc, #136]	; (8002578 <HAL_RCC_ClockConfig+0x1b0>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0307 	and.w	r3, r3, #7
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d001      	beq.n	8002500 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e036      	b.n	800256e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0304 	and.w	r3, r3, #4
 8002508:	2b00      	cmp	r3, #0
 800250a:	d008      	beq.n	800251e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800250c:	4b1b      	ldr	r3, [pc, #108]	; (800257c <HAL_RCC_ClockConfig+0x1b4>)
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	4918      	ldr	r1, [pc, #96]	; (800257c <HAL_RCC_ClockConfig+0x1b4>)
 800251a:	4313      	orrs	r3, r2
 800251c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0308 	and.w	r3, r3, #8
 8002526:	2b00      	cmp	r3, #0
 8002528:	d009      	beq.n	800253e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800252a:	4b14      	ldr	r3, [pc, #80]	; (800257c <HAL_RCC_ClockConfig+0x1b4>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	00db      	lsls	r3, r3, #3
 8002538:	4910      	ldr	r1, [pc, #64]	; (800257c <HAL_RCC_ClockConfig+0x1b4>)
 800253a:	4313      	orrs	r3, r2
 800253c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800253e:	f000 f825 	bl	800258c <HAL_RCC_GetSysClockFreq>
 8002542:	4602      	mov	r2, r0
 8002544:	4b0d      	ldr	r3, [pc, #52]	; (800257c <HAL_RCC_ClockConfig+0x1b4>)
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	091b      	lsrs	r3, r3, #4
 800254a:	f003 030f 	and.w	r3, r3, #15
 800254e:	490c      	ldr	r1, [pc, #48]	; (8002580 <HAL_RCC_ClockConfig+0x1b8>)
 8002550:	5ccb      	ldrb	r3, [r1, r3]
 8002552:	f003 031f 	and.w	r3, r3, #31
 8002556:	fa22 f303 	lsr.w	r3, r2, r3
 800255a:	4a0a      	ldr	r2, [pc, #40]	; (8002584 <HAL_RCC_ClockConfig+0x1bc>)
 800255c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800255e:	4b0a      	ldr	r3, [pc, #40]	; (8002588 <HAL_RCC_ClockConfig+0x1c0>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4618      	mov	r0, r3
 8002564:	f7fe ffee 	bl	8001544 <HAL_InitTick>
 8002568:	4603      	mov	r3, r0
 800256a:	72fb      	strb	r3, [r7, #11]

  return status;
 800256c:	7afb      	ldrb	r3, [r7, #11]
}
 800256e:	4618      	mov	r0, r3
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	40022000 	.word	0x40022000
 800257c:	40021000 	.word	0x40021000
 8002580:	08007460 	.word	0x08007460
 8002584:	20000000 	.word	0x20000000
 8002588:	20000004 	.word	0x20000004

0800258c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800258c:	b480      	push	{r7}
 800258e:	b089      	sub	sp, #36	; 0x24
 8002590:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002592:	2300      	movs	r3, #0
 8002594:	61fb      	str	r3, [r7, #28]
 8002596:	2300      	movs	r3, #0
 8002598:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800259a:	4b3e      	ldr	r3, [pc, #248]	; (8002694 <HAL_RCC_GetSysClockFreq+0x108>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f003 030c 	and.w	r3, r3, #12
 80025a2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025a4:	4b3b      	ldr	r3, [pc, #236]	; (8002694 <HAL_RCC_GetSysClockFreq+0x108>)
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	f003 0303 	and.w	r3, r3, #3
 80025ac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d005      	beq.n	80025c0 <HAL_RCC_GetSysClockFreq+0x34>
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	2b0c      	cmp	r3, #12
 80025b8:	d121      	bne.n	80025fe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d11e      	bne.n	80025fe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80025c0:	4b34      	ldr	r3, [pc, #208]	; (8002694 <HAL_RCC_GetSysClockFreq+0x108>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0308 	and.w	r3, r3, #8
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d107      	bne.n	80025dc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80025cc:	4b31      	ldr	r3, [pc, #196]	; (8002694 <HAL_RCC_GetSysClockFreq+0x108>)
 80025ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025d2:	0a1b      	lsrs	r3, r3, #8
 80025d4:	f003 030f 	and.w	r3, r3, #15
 80025d8:	61fb      	str	r3, [r7, #28]
 80025da:	e005      	b.n	80025e8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80025dc:	4b2d      	ldr	r3, [pc, #180]	; (8002694 <HAL_RCC_GetSysClockFreq+0x108>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	091b      	lsrs	r3, r3, #4
 80025e2:	f003 030f 	and.w	r3, r3, #15
 80025e6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80025e8:	4a2b      	ldr	r2, [pc, #172]	; (8002698 <HAL_RCC_GetSysClockFreq+0x10c>)
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025f0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d10d      	bne.n	8002614 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025fc:	e00a      	b.n	8002614 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	2b04      	cmp	r3, #4
 8002602:	d102      	bne.n	800260a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002604:	4b25      	ldr	r3, [pc, #148]	; (800269c <HAL_RCC_GetSysClockFreq+0x110>)
 8002606:	61bb      	str	r3, [r7, #24]
 8002608:	e004      	b.n	8002614 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	2b08      	cmp	r3, #8
 800260e:	d101      	bne.n	8002614 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002610:	4b23      	ldr	r3, [pc, #140]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002612:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	2b0c      	cmp	r3, #12
 8002618:	d134      	bne.n	8002684 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800261a:	4b1e      	ldr	r3, [pc, #120]	; (8002694 <HAL_RCC_GetSysClockFreq+0x108>)
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	f003 0303 	and.w	r3, r3, #3
 8002622:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	2b02      	cmp	r3, #2
 8002628:	d003      	beq.n	8002632 <HAL_RCC_GetSysClockFreq+0xa6>
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	2b03      	cmp	r3, #3
 800262e:	d003      	beq.n	8002638 <HAL_RCC_GetSysClockFreq+0xac>
 8002630:	e005      	b.n	800263e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002632:	4b1a      	ldr	r3, [pc, #104]	; (800269c <HAL_RCC_GetSysClockFreq+0x110>)
 8002634:	617b      	str	r3, [r7, #20]
      break;
 8002636:	e005      	b.n	8002644 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002638:	4b19      	ldr	r3, [pc, #100]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x114>)
 800263a:	617b      	str	r3, [r7, #20]
      break;
 800263c:	e002      	b.n	8002644 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	617b      	str	r3, [r7, #20]
      break;
 8002642:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002644:	4b13      	ldr	r3, [pc, #76]	; (8002694 <HAL_RCC_GetSysClockFreq+0x108>)
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	091b      	lsrs	r3, r3, #4
 800264a:	f003 0307 	and.w	r3, r3, #7
 800264e:	3301      	adds	r3, #1
 8002650:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002652:	4b10      	ldr	r3, [pc, #64]	; (8002694 <HAL_RCC_GetSysClockFreq+0x108>)
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	0a1b      	lsrs	r3, r3, #8
 8002658:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800265c:	697a      	ldr	r2, [r7, #20]
 800265e:	fb03 f202 	mul.w	r2, r3, r2
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	fbb2 f3f3 	udiv	r3, r2, r3
 8002668:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800266a:	4b0a      	ldr	r3, [pc, #40]	; (8002694 <HAL_RCC_GetSysClockFreq+0x108>)
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	0e5b      	lsrs	r3, r3, #25
 8002670:	f003 0303 	and.w	r3, r3, #3
 8002674:	3301      	adds	r3, #1
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800267a:	697a      	ldr	r2, [r7, #20]
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002682:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002684:	69bb      	ldr	r3, [r7, #24]
}
 8002686:	4618      	mov	r0, r3
 8002688:	3724      	adds	r7, #36	; 0x24
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	40021000 	.word	0x40021000
 8002698:	08007478 	.word	0x08007478
 800269c:	00f42400 	.word	0x00f42400
 80026a0:	007a1200 	.word	0x007a1200

080026a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026a8:	4b03      	ldr	r3, [pc, #12]	; (80026b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80026aa:	681b      	ldr	r3, [r3, #0]
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	20000000 	.word	0x20000000

080026bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80026c0:	f7ff fff0 	bl	80026a4 <HAL_RCC_GetHCLKFreq>
 80026c4:	4602      	mov	r2, r0
 80026c6:	4b06      	ldr	r3, [pc, #24]	; (80026e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	0a1b      	lsrs	r3, r3, #8
 80026cc:	f003 0307 	and.w	r3, r3, #7
 80026d0:	4904      	ldr	r1, [pc, #16]	; (80026e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80026d2:	5ccb      	ldrb	r3, [r1, r3]
 80026d4:	f003 031f 	and.w	r3, r3, #31
 80026d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026dc:	4618      	mov	r0, r3
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	40021000 	.word	0x40021000
 80026e4:	08007470 	.word	0x08007470

080026e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80026ec:	f7ff ffda 	bl	80026a4 <HAL_RCC_GetHCLKFreq>
 80026f0:	4602      	mov	r2, r0
 80026f2:	4b06      	ldr	r3, [pc, #24]	; (800270c <HAL_RCC_GetPCLK2Freq+0x24>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	0adb      	lsrs	r3, r3, #11
 80026f8:	f003 0307 	and.w	r3, r3, #7
 80026fc:	4904      	ldr	r1, [pc, #16]	; (8002710 <HAL_RCC_GetPCLK2Freq+0x28>)
 80026fe:	5ccb      	ldrb	r3, [r1, r3]
 8002700:	f003 031f 	and.w	r3, r3, #31
 8002704:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002708:	4618      	mov	r0, r3
 800270a:	bd80      	pop	{r7, pc}
 800270c:	40021000 	.word	0x40021000
 8002710:	08007470 	.word	0x08007470

08002714 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800271c:	2300      	movs	r3, #0
 800271e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002720:	4b2a      	ldr	r3, [pc, #168]	; (80027cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002724:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d003      	beq.n	8002734 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800272c:	f7ff fa38 	bl	8001ba0 <HAL_PWREx_GetVoltageRange>
 8002730:	6178      	str	r0, [r7, #20]
 8002732:	e014      	b.n	800275e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002734:	4b25      	ldr	r3, [pc, #148]	; (80027cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002738:	4a24      	ldr	r2, [pc, #144]	; (80027cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800273a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800273e:	6593      	str	r3, [r2, #88]	; 0x58
 8002740:	4b22      	ldr	r3, [pc, #136]	; (80027cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002748:	60fb      	str	r3, [r7, #12]
 800274a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800274c:	f7ff fa28 	bl	8001ba0 <HAL_PWREx_GetVoltageRange>
 8002750:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002752:	4b1e      	ldr	r3, [pc, #120]	; (80027cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002756:	4a1d      	ldr	r2, [pc, #116]	; (80027cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002758:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800275c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002764:	d10b      	bne.n	800277e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2b80      	cmp	r3, #128	; 0x80
 800276a:	d919      	bls.n	80027a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2ba0      	cmp	r3, #160	; 0xa0
 8002770:	d902      	bls.n	8002778 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002772:	2302      	movs	r3, #2
 8002774:	613b      	str	r3, [r7, #16]
 8002776:	e013      	b.n	80027a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002778:	2301      	movs	r3, #1
 800277a:	613b      	str	r3, [r7, #16]
 800277c:	e010      	b.n	80027a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2b80      	cmp	r3, #128	; 0x80
 8002782:	d902      	bls.n	800278a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002784:	2303      	movs	r3, #3
 8002786:	613b      	str	r3, [r7, #16]
 8002788:	e00a      	b.n	80027a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2b80      	cmp	r3, #128	; 0x80
 800278e:	d102      	bne.n	8002796 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002790:	2302      	movs	r3, #2
 8002792:	613b      	str	r3, [r7, #16]
 8002794:	e004      	b.n	80027a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2b70      	cmp	r3, #112	; 0x70
 800279a:	d101      	bne.n	80027a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800279c:	2301      	movs	r3, #1
 800279e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80027a0:	4b0b      	ldr	r3, [pc, #44]	; (80027d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f023 0207 	bic.w	r2, r3, #7
 80027a8:	4909      	ldr	r1, [pc, #36]	; (80027d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80027b0:	4b07      	ldr	r3, [pc, #28]	; (80027d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0307 	and.w	r3, r3, #7
 80027b8:	693a      	ldr	r2, [r7, #16]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d001      	beq.n	80027c2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e000      	b.n	80027c4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3718      	adds	r7, #24
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	40021000 	.word	0x40021000
 80027d0:	40022000 	.word	0x40022000

080027d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80027dc:	2300      	movs	r3, #0
 80027de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80027e0:	2300      	movs	r3, #0
 80027e2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d041      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027f4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80027f8:	d02a      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80027fa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80027fe:	d824      	bhi.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002800:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002804:	d008      	beq.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002806:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800280a:	d81e      	bhi.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800280c:	2b00      	cmp	r3, #0
 800280e:	d00a      	beq.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002810:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002814:	d010      	beq.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002816:	e018      	b.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002818:	4b86      	ldr	r3, [pc, #536]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	4a85      	ldr	r2, [pc, #532]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800281e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002822:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002824:	e015      	b.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	3304      	adds	r3, #4
 800282a:	2100      	movs	r1, #0
 800282c:	4618      	mov	r0, r3
 800282e:	f000 fabb 	bl	8002da8 <RCCEx_PLLSAI1_Config>
 8002832:	4603      	mov	r3, r0
 8002834:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002836:	e00c      	b.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	3320      	adds	r3, #32
 800283c:	2100      	movs	r1, #0
 800283e:	4618      	mov	r0, r3
 8002840:	f000 fba6 	bl	8002f90 <RCCEx_PLLSAI2_Config>
 8002844:	4603      	mov	r3, r0
 8002846:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002848:	e003      	b.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	74fb      	strb	r3, [r7, #19]
      break;
 800284e:	e000      	b.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002850:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002852:	7cfb      	ldrb	r3, [r7, #19]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d10b      	bne.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002858:	4b76      	ldr	r3, [pc, #472]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800285a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800285e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002866:	4973      	ldr	r1, [pc, #460]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002868:	4313      	orrs	r3, r2
 800286a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800286e:	e001      	b.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002870:	7cfb      	ldrb	r3, [r7, #19]
 8002872:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d041      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002884:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002888:	d02a      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800288a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800288e:	d824      	bhi.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002890:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002894:	d008      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002896:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800289a:	d81e      	bhi.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x106>
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00a      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80028a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028a4:	d010      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80028a6:	e018      	b.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80028a8:	4b62      	ldr	r3, [pc, #392]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	4a61      	ldr	r2, [pc, #388]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028b2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80028b4:	e015      	b.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	3304      	adds	r3, #4
 80028ba:	2100      	movs	r1, #0
 80028bc:	4618      	mov	r0, r3
 80028be:	f000 fa73 	bl	8002da8 <RCCEx_PLLSAI1_Config>
 80028c2:	4603      	mov	r3, r0
 80028c4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80028c6:	e00c      	b.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	3320      	adds	r3, #32
 80028cc:	2100      	movs	r1, #0
 80028ce:	4618      	mov	r0, r3
 80028d0:	f000 fb5e 	bl	8002f90 <RCCEx_PLLSAI2_Config>
 80028d4:	4603      	mov	r3, r0
 80028d6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80028d8:	e003      	b.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	74fb      	strb	r3, [r7, #19]
      break;
 80028de:	e000      	b.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80028e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028e2:	7cfb      	ldrb	r3, [r7, #19]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d10b      	bne.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80028e8:	4b52      	ldr	r3, [pc, #328]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ee:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028f6:	494f      	ldr	r1, [pc, #316]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80028fe:	e001      	b.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002900:	7cfb      	ldrb	r3, [r7, #19]
 8002902:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290c:	2b00      	cmp	r3, #0
 800290e:	f000 80a0 	beq.w	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002912:	2300      	movs	r3, #0
 8002914:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002916:	4b47      	ldr	r3, [pc, #284]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800291a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d101      	bne.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002922:	2301      	movs	r3, #1
 8002924:	e000      	b.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002926:	2300      	movs	r3, #0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d00d      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800292c:	4b41      	ldr	r3, [pc, #260]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800292e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002930:	4a40      	ldr	r2, [pc, #256]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002932:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002936:	6593      	str	r3, [r2, #88]	; 0x58
 8002938:	4b3e      	ldr	r3, [pc, #248]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800293a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800293c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002940:	60bb      	str	r3, [r7, #8]
 8002942:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002944:	2301      	movs	r3, #1
 8002946:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002948:	4b3b      	ldr	r3, [pc, #236]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a3a      	ldr	r2, [pc, #232]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800294e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002952:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002954:	f7fe fe42 	bl	80015dc <HAL_GetTick>
 8002958:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800295a:	e009      	b.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800295c:	f7fe fe3e 	bl	80015dc <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b02      	cmp	r3, #2
 8002968:	d902      	bls.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	74fb      	strb	r3, [r7, #19]
        break;
 800296e:	e005      	b.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002970:	4b31      	ldr	r3, [pc, #196]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002978:	2b00      	cmp	r3, #0
 800297a:	d0ef      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800297c:	7cfb      	ldrb	r3, [r7, #19]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d15c      	bne.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002982:	4b2c      	ldr	r3, [pc, #176]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002988:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800298c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d01f      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800299a:	697a      	ldr	r2, [r7, #20]
 800299c:	429a      	cmp	r2, r3
 800299e:	d019      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80029a0:	4b24      	ldr	r3, [pc, #144]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029aa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80029ac:	4b21      	ldr	r3, [pc, #132]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b2:	4a20      	ldr	r2, [pc, #128]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029bc:	4b1d      	ldr	r3, [pc, #116]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029c2:	4a1c      	ldr	r2, [pc, #112]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80029cc:	4a19      	ldr	r2, [pc, #100]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d016      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029de:	f7fe fdfd 	bl	80015dc <HAL_GetTick>
 80029e2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029e4:	e00b      	b.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029e6:	f7fe fdf9 	bl	80015dc <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d902      	bls.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	74fb      	strb	r3, [r7, #19]
            break;
 80029fc:	e006      	b.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029fe:	4b0d      	ldr	r3, [pc, #52]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d0ec      	beq.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002a0c:	7cfb      	ldrb	r3, [r7, #19]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d10c      	bne.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a12:	4b08      	ldr	r3, [pc, #32]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a22:	4904      	ldr	r1, [pc, #16]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002a2a:	e009      	b.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a2c:	7cfb      	ldrb	r3, [r7, #19]
 8002a2e:	74bb      	strb	r3, [r7, #18]
 8002a30:	e006      	b.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002a32:	bf00      	nop
 8002a34:	40021000 	.word	0x40021000
 8002a38:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a3c:	7cfb      	ldrb	r3, [r7, #19]
 8002a3e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a40:	7c7b      	ldrb	r3, [r7, #17]
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d105      	bne.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a46:	4b9e      	ldr	r3, [pc, #632]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a4a:	4a9d      	ldr	r2, [pc, #628]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a50:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00a      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a5e:	4b98      	ldr	r3, [pc, #608]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a64:	f023 0203 	bic.w	r2, r3, #3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a6c:	4994      	ldr	r1, [pc, #592]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d00a      	beq.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a80:	4b8f      	ldr	r3, [pc, #572]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a86:	f023 020c 	bic.w	r2, r3, #12
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a8e:	498c      	ldr	r1, [pc, #560]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0304 	and.w	r3, r3, #4
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00a      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002aa2:	4b87      	ldr	r3, [pc, #540]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab0:	4983      	ldr	r1, [pc, #524]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0308 	and.w	r3, r3, #8
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d00a      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ac4:	4b7e      	ldr	r3, [pc, #504]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad2:	497b      	ldr	r1, [pc, #492]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0310 	and.w	r3, r3, #16
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d00a      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ae6:	4b76      	ldr	r3, [pc, #472]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002af4:	4972      	ldr	r1, [pc, #456]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0320 	and.w	r3, r3, #32
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d00a      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b08:	4b6d      	ldr	r3, [pc, #436]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b0e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b16:	496a      	ldr	r1, [pc, #424]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00a      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b2a:	4b65      	ldr	r3, [pc, #404]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b30:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b38:	4961      	ldr	r1, [pc, #388]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d00a      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002b4c:	4b5c      	ldr	r3, [pc, #368]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b52:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b5a:	4959      	ldr	r1, [pc, #356]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00a      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b6e:	4b54      	ldr	r3, [pc, #336]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b74:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b7c:	4950      	ldr	r1, [pc, #320]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d00a      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b90:	4b4b      	ldr	r3, [pc, #300]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b96:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b9e:	4948      	ldr	r1, [pc, #288]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00a      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002bb2:	4b43      	ldr	r3, [pc, #268]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bb8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc0:	493f      	ldr	r1, [pc, #252]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d028      	beq.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002bd4:	4b3a      	ldr	r3, [pc, #232]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bda:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002be2:	4937      	ldr	r1, [pc, #220]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bf2:	d106      	bne.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bf4:	4b32      	ldr	r3, [pc, #200]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	4a31      	ldr	r2, [pc, #196]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bfe:	60d3      	str	r3, [r2, #12]
 8002c00:	e011      	b.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c06:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c0a:	d10c      	bne.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	3304      	adds	r3, #4
 8002c10:	2101      	movs	r1, #1
 8002c12:	4618      	mov	r0, r3
 8002c14:	f000 f8c8 	bl	8002da8 <RCCEx_PLLSAI1_Config>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002c1c:	7cfb      	ldrb	r3, [r7, #19]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002c22:	7cfb      	ldrb	r3, [r7, #19]
 8002c24:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d028      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c32:	4b23      	ldr	r3, [pc, #140]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c38:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c40:	491f      	ldr	r1, [pc, #124]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c50:	d106      	bne.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c52:	4b1b      	ldr	r3, [pc, #108]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	4a1a      	ldr	r2, [pc, #104]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c5c:	60d3      	str	r3, [r2, #12]
 8002c5e:	e011      	b.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c68:	d10c      	bne.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	3304      	adds	r3, #4
 8002c6e:	2101      	movs	r1, #1
 8002c70:	4618      	mov	r0, r3
 8002c72:	f000 f899 	bl	8002da8 <RCCEx_PLLSAI1_Config>
 8002c76:	4603      	mov	r3, r0
 8002c78:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c7a:	7cfb      	ldrb	r3, [r7, #19]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002c80:	7cfb      	ldrb	r3, [r7, #19]
 8002c82:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d02b      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c90:	4b0b      	ldr	r3, [pc, #44]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c96:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c9e:	4908      	ldr	r1, [pc, #32]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002caa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cae:	d109      	bne.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cb0:	4b03      	ldr	r3, [pc, #12]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	4a02      	ldr	r2, [pc, #8]	; (8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cba:	60d3      	str	r3, [r2, #12]
 8002cbc:	e014      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002cbe:	bf00      	nop
 8002cc0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cc8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ccc:	d10c      	bne.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	3304      	adds	r3, #4
 8002cd2:	2101      	movs	r1, #1
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f000 f867 	bl	8002da8 <RCCEx_PLLSAI1_Config>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cde:	7cfb      	ldrb	r3, [r7, #19]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002ce4:	7cfb      	ldrb	r3, [r7, #19]
 8002ce6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d02f      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002cf4:	4b2b      	ldr	r3, [pc, #172]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cfa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d02:	4928      	ldr	r1, [pc, #160]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d12:	d10d      	bne.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	3304      	adds	r3, #4
 8002d18:	2102      	movs	r1, #2
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f000 f844 	bl	8002da8 <RCCEx_PLLSAI1_Config>
 8002d20:	4603      	mov	r3, r0
 8002d22:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d24:	7cfb      	ldrb	r3, [r7, #19]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d014      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002d2a:	7cfb      	ldrb	r3, [r7, #19]
 8002d2c:	74bb      	strb	r3, [r7, #18]
 8002d2e:	e011      	b.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d38:	d10c      	bne.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	3320      	adds	r3, #32
 8002d3e:	2102      	movs	r1, #2
 8002d40:	4618      	mov	r0, r3
 8002d42:	f000 f925 	bl	8002f90 <RCCEx_PLLSAI2_Config>
 8002d46:	4603      	mov	r3, r0
 8002d48:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d4a:	7cfb      	ldrb	r3, [r7, #19]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d001      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002d50:	7cfb      	ldrb	r3, [r7, #19]
 8002d52:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d00a      	beq.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002d60:	4b10      	ldr	r3, [pc, #64]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d66:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d6e:	490d      	ldr	r1, [pc, #52]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00b      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002d82:	4b08      	ldr	r3, [pc, #32]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d88:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d92:	4904      	ldr	r1, [pc, #16]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002d9a:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3718      	adds	r7, #24
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	40021000 	.word	0x40021000

08002da8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002db2:	2300      	movs	r3, #0
 8002db4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002db6:	4b75      	ldr	r3, [pc, #468]	; (8002f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	f003 0303 	and.w	r3, r3, #3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d018      	beq.n	8002df4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002dc2:	4b72      	ldr	r3, [pc, #456]	; (8002f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	f003 0203 	and.w	r2, r3, #3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d10d      	bne.n	8002dee <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
       ||
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d009      	beq.n	8002dee <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002dda:	4b6c      	ldr	r3, [pc, #432]	; (8002f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	091b      	lsrs	r3, r3, #4
 8002de0:	f003 0307 	and.w	r3, r3, #7
 8002de4:	1c5a      	adds	r2, r3, #1
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
       ||
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d047      	beq.n	8002e7e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	73fb      	strb	r3, [r7, #15]
 8002df2:	e044      	b.n	8002e7e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2b03      	cmp	r3, #3
 8002dfa:	d018      	beq.n	8002e2e <RCCEx_PLLSAI1_Config+0x86>
 8002dfc:	2b03      	cmp	r3, #3
 8002dfe:	d825      	bhi.n	8002e4c <RCCEx_PLLSAI1_Config+0xa4>
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d002      	beq.n	8002e0a <RCCEx_PLLSAI1_Config+0x62>
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d009      	beq.n	8002e1c <RCCEx_PLLSAI1_Config+0x74>
 8002e08:	e020      	b.n	8002e4c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e0a:	4b60      	ldr	r3, [pc, #384]	; (8002f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d11d      	bne.n	8002e52 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e1a:	e01a      	b.n	8002e52 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e1c:	4b5b      	ldr	r3, [pc, #364]	; (8002f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d116      	bne.n	8002e56 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e2c:	e013      	b.n	8002e56 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e2e:	4b57      	ldr	r3, [pc, #348]	; (8002f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d10f      	bne.n	8002e5a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e3a:	4b54      	ldr	r3, [pc, #336]	; (8002f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d109      	bne.n	8002e5a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e4a:	e006      	b.n	8002e5a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	73fb      	strb	r3, [r7, #15]
      break;
 8002e50:	e004      	b.n	8002e5c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e52:	bf00      	nop
 8002e54:	e002      	b.n	8002e5c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e56:	bf00      	nop
 8002e58:	e000      	b.n	8002e5c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e5a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e5c:	7bfb      	ldrb	r3, [r7, #15]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d10d      	bne.n	8002e7e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e62:	4b4a      	ldr	r3, [pc, #296]	; (8002f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6819      	ldr	r1, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	3b01      	subs	r3, #1
 8002e74:	011b      	lsls	r3, r3, #4
 8002e76:	430b      	orrs	r3, r1
 8002e78:	4944      	ldr	r1, [pc, #272]	; (8002f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e7e:	7bfb      	ldrb	r3, [r7, #15]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d17d      	bne.n	8002f80 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002e84:	4b41      	ldr	r3, [pc, #260]	; (8002f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a40      	ldr	r2, [pc, #256]	; (8002f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e8a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e90:	f7fe fba4 	bl	80015dc <HAL_GetTick>
 8002e94:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e96:	e009      	b.n	8002eac <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e98:	f7fe fba0 	bl	80015dc <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d902      	bls.n	8002eac <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	73fb      	strb	r3, [r7, #15]
        break;
 8002eaa:	e005      	b.n	8002eb8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002eac:	4b37      	ldr	r3, [pc, #220]	; (8002f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d1ef      	bne.n	8002e98 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002eb8:	7bfb      	ldrb	r3, [r7, #15]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d160      	bne.n	8002f80 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d111      	bne.n	8002ee8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ec4:	4b31      	ldr	r3, [pc, #196]	; (8002f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002ecc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	6892      	ldr	r2, [r2, #8]
 8002ed4:	0211      	lsls	r1, r2, #8
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	68d2      	ldr	r2, [r2, #12]
 8002eda:	0912      	lsrs	r2, r2, #4
 8002edc:	0452      	lsls	r2, r2, #17
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	492a      	ldr	r1, [pc, #168]	; (8002f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	610b      	str	r3, [r1, #16]
 8002ee6:	e027      	b.n	8002f38 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d112      	bne.n	8002f14 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002eee:	4b27      	ldr	r3, [pc, #156]	; (8002f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ef0:	691b      	ldr	r3, [r3, #16]
 8002ef2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002ef6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	6892      	ldr	r2, [r2, #8]
 8002efe:	0211      	lsls	r1, r2, #8
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	6912      	ldr	r2, [r2, #16]
 8002f04:	0852      	lsrs	r2, r2, #1
 8002f06:	3a01      	subs	r2, #1
 8002f08:	0552      	lsls	r2, r2, #21
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	491f      	ldr	r1, [pc, #124]	; (8002f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	610b      	str	r3, [r1, #16]
 8002f12:	e011      	b.n	8002f38 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f14:	4b1d      	ldr	r3, [pc, #116]	; (8002f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002f1c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	6892      	ldr	r2, [r2, #8]
 8002f24:	0211      	lsls	r1, r2, #8
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	6952      	ldr	r2, [r2, #20]
 8002f2a:	0852      	lsrs	r2, r2, #1
 8002f2c:	3a01      	subs	r2, #1
 8002f2e:	0652      	lsls	r2, r2, #25
 8002f30:	430a      	orrs	r2, r1
 8002f32:	4916      	ldr	r1, [pc, #88]	; (8002f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002f38:	4b14      	ldr	r3, [pc, #80]	; (8002f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a13      	ldr	r2, [pc, #76]	; (8002f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f3e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f42:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f44:	f7fe fb4a 	bl	80015dc <HAL_GetTick>
 8002f48:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f4a:	e009      	b.n	8002f60 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f4c:	f7fe fb46 	bl	80015dc <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d902      	bls.n	8002f60 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	73fb      	strb	r3, [r7, #15]
          break;
 8002f5e:	e005      	b.n	8002f6c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f60:	4b0a      	ldr	r3, [pc, #40]	; (8002f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d0ef      	beq.n	8002f4c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002f6c:	7bfb      	ldrb	r3, [r7, #15]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d106      	bne.n	8002f80 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002f72:	4b06      	ldr	r3, [pc, #24]	; (8002f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f74:	691a      	ldr	r2, [r3, #16]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	4904      	ldr	r1, [pc, #16]	; (8002f8c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3710      	adds	r7, #16
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	40021000 	.word	0x40021000

08002f90 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f9e:	4b6a      	ldr	r3, [pc, #424]	; (8003148 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	f003 0303 	and.w	r3, r3, #3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d018      	beq.n	8002fdc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002faa:	4b67      	ldr	r3, [pc, #412]	; (8003148 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	f003 0203 	and.w	r2, r3, #3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d10d      	bne.n	8002fd6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
       ||
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d009      	beq.n	8002fd6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002fc2:	4b61      	ldr	r3, [pc, #388]	; (8003148 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	091b      	lsrs	r3, r3, #4
 8002fc8:	f003 0307 	and.w	r3, r3, #7
 8002fcc:	1c5a      	adds	r2, r3, #1
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
       ||
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d047      	beq.n	8003066 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	73fb      	strb	r3, [r7, #15]
 8002fda:	e044      	b.n	8003066 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2b03      	cmp	r3, #3
 8002fe2:	d018      	beq.n	8003016 <RCCEx_PLLSAI2_Config+0x86>
 8002fe4:	2b03      	cmp	r3, #3
 8002fe6:	d825      	bhi.n	8003034 <RCCEx_PLLSAI2_Config+0xa4>
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d002      	beq.n	8002ff2 <RCCEx_PLLSAI2_Config+0x62>
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d009      	beq.n	8003004 <RCCEx_PLLSAI2_Config+0x74>
 8002ff0:	e020      	b.n	8003034 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ff2:	4b55      	ldr	r3, [pc, #340]	; (8003148 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d11d      	bne.n	800303a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003002:	e01a      	b.n	800303a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003004:	4b50      	ldr	r3, [pc, #320]	; (8003148 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800300c:	2b00      	cmp	r3, #0
 800300e:	d116      	bne.n	800303e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003014:	e013      	b.n	800303e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003016:	4b4c      	ldr	r3, [pc, #304]	; (8003148 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d10f      	bne.n	8003042 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003022:	4b49      	ldr	r3, [pc, #292]	; (8003148 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d109      	bne.n	8003042 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003032:	e006      	b.n	8003042 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	73fb      	strb	r3, [r7, #15]
      break;
 8003038:	e004      	b.n	8003044 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800303a:	bf00      	nop
 800303c:	e002      	b.n	8003044 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800303e:	bf00      	nop
 8003040:	e000      	b.n	8003044 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003042:	bf00      	nop
    }

    if(status == HAL_OK)
 8003044:	7bfb      	ldrb	r3, [r7, #15]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d10d      	bne.n	8003066 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800304a:	4b3f      	ldr	r3, [pc, #252]	; (8003148 <RCCEx_PLLSAI2_Config+0x1b8>)
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6819      	ldr	r1, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	3b01      	subs	r3, #1
 800305c:	011b      	lsls	r3, r3, #4
 800305e:	430b      	orrs	r3, r1
 8003060:	4939      	ldr	r1, [pc, #228]	; (8003148 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003062:	4313      	orrs	r3, r2
 8003064:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003066:	7bfb      	ldrb	r3, [r7, #15]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d167      	bne.n	800313c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800306c:	4b36      	ldr	r3, [pc, #216]	; (8003148 <RCCEx_PLLSAI2_Config+0x1b8>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a35      	ldr	r2, [pc, #212]	; (8003148 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003072:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003076:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003078:	f7fe fab0 	bl	80015dc <HAL_GetTick>
 800307c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800307e:	e009      	b.n	8003094 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003080:	f7fe faac 	bl	80015dc <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b02      	cmp	r3, #2
 800308c:	d902      	bls.n	8003094 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	73fb      	strb	r3, [r7, #15]
        break;
 8003092:	e005      	b.n	80030a0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003094:	4b2c      	ldr	r3, [pc, #176]	; (8003148 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1ef      	bne.n	8003080 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80030a0:	7bfb      	ldrb	r3, [r7, #15]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d14a      	bne.n	800313c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d111      	bne.n	80030d0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80030ac:	4b26      	ldr	r3, [pc, #152]	; (8003148 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030ae:	695b      	ldr	r3, [r3, #20]
 80030b0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80030b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	6892      	ldr	r2, [r2, #8]
 80030bc:	0211      	lsls	r1, r2, #8
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	68d2      	ldr	r2, [r2, #12]
 80030c2:	0912      	lsrs	r2, r2, #4
 80030c4:	0452      	lsls	r2, r2, #17
 80030c6:	430a      	orrs	r2, r1
 80030c8:	491f      	ldr	r1, [pc, #124]	; (8003148 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	614b      	str	r3, [r1, #20]
 80030ce:	e011      	b.n	80030f4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80030d0:	4b1d      	ldr	r3, [pc, #116]	; (8003148 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030d2:	695b      	ldr	r3, [r3, #20]
 80030d4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80030d8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	6892      	ldr	r2, [r2, #8]
 80030e0:	0211      	lsls	r1, r2, #8
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	6912      	ldr	r2, [r2, #16]
 80030e6:	0852      	lsrs	r2, r2, #1
 80030e8:	3a01      	subs	r2, #1
 80030ea:	0652      	lsls	r2, r2, #25
 80030ec:	430a      	orrs	r2, r1
 80030ee:	4916      	ldr	r1, [pc, #88]	; (8003148 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80030f4:	4b14      	ldr	r3, [pc, #80]	; (8003148 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a13      	ldr	r2, [pc, #76]	; (8003148 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030fe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003100:	f7fe fa6c 	bl	80015dc <HAL_GetTick>
 8003104:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003106:	e009      	b.n	800311c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003108:	f7fe fa68 	bl	80015dc <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	2b02      	cmp	r3, #2
 8003114:	d902      	bls.n	800311c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	73fb      	strb	r3, [r7, #15]
          break;
 800311a:	e005      	b.n	8003128 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800311c:	4b0a      	ldr	r3, [pc, #40]	; (8003148 <RCCEx_PLLSAI2_Config+0x1b8>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d0ef      	beq.n	8003108 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003128:	7bfb      	ldrb	r3, [r7, #15]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d106      	bne.n	800313c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800312e:	4b06      	ldr	r3, [pc, #24]	; (8003148 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003130:	695a      	ldr	r2, [r3, #20]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	4904      	ldr	r1, [pc, #16]	; (8003148 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003138:	4313      	orrs	r3, r2
 800313a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800313c:	7bfb      	ldrb	r3, [r7, #15]
}
 800313e:	4618      	mov	r0, r3
 8003140:	3710      	adds	r7, #16
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	40021000 	.word	0x40021000

0800314c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d06f      	beq.n	800323e <HAL_RTC_Init+0xf2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b00      	cmp	r3, #0
 8003168:	d106      	bne.n	8003178 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f7fe f852 	bl	800121c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2202      	movs	r2, #2
 800317c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	22ca      	movs	r2, #202	; 0xca
 8003186:	625a      	str	r2, [r3, #36]	; 0x24
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2253      	movs	r2, #83	; 0x53
 800318e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f000 fa4c 	bl	800362e <RTC_EnterInitMode>
 8003196:	4603      	mov	r3, r0
 8003198:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800319a:	7bfb      	ldrb	r3, [r7, #15]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d14e      	bne.n	800323e <HAL_RTC_Init+0xf2>
#if defined(STM32L412xx) || defined(STM32L422xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	6812      	ldr	r2, [r2, #0]
 80031aa:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80031ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031b2:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6899      	ldr	r1, [r3, #8]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685a      	ldr	r2, [r3, #4]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	431a      	orrs	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	699b      	ldr	r3, [r3, #24]
 80031c8:	431a      	orrs	r2, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	430a      	orrs	r2, r1
 80031d0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	68d2      	ldr	r2, [r2, #12]
 80031da:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	6919      	ldr	r1, [r3, #16]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	041a      	lsls	r2, r3, #16
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	430a      	orrs	r2, r1
 80031ee:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f000 fa4f 	bl	8003694 <RTC_ExitInitMode>
 80031f6:	4603      	mov	r3, r0
 80031f8:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80031fa:	7bfb      	ldrb	r3, [r7, #15]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d11e      	bne.n	800323e <HAL_RTC_Init+0xf2>
      {
#if defined(STM32L412xx) || defined(STM32L422xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f022 0203 	bic.w	r2, r2, #3
 800320e:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	69da      	ldr	r2, [r3, #28]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	431a      	orrs	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	430a      	orrs	r2, r1
 8003226:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	22ff      	movs	r2, #255	; 0xff
 800322e:	625a      	str	r2, [r3, #36]	; 0x24

        if (status == HAL_OK)
 8003230:	7bfb      	ldrb	r3, [r7, #15]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d103      	bne.n	800323e <HAL_RTC_Init+0xf2>
        {
          hrtc->State = HAL_RTC_STATE_READY;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2201      	movs	r2, #1
 800323a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        }
      }
    }
  }

  return status;
 800323e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003240:	4618      	mov	r0, r3
 8003242:	3710      	adds	r7, #16
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003248:	b590      	push	{r4, r7, lr}
 800324a:	b087      	sub	sp, #28
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f893 3020 	ldrb.w	r3, [r3, #32]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d101      	bne.n	8003262 <HAL_RTC_SetTime+0x1a>
 800325e:	2302      	movs	r3, #2
 8003260:	e08b      	b.n	800337a <HAL_RTC_SetTime+0x132>
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2201      	movs	r2, #1
 8003266:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2202      	movs	r2, #2
 800326e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	22ca      	movs	r2, #202	; 0xca
 8003278:	625a      	str	r2, [r3, #36]	; 0x24
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2253      	movs	r2, #83	; 0x53
 8003280:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003282:	68f8      	ldr	r0, [r7, #12]
 8003284:	f000 f9d3 	bl	800362e <RTC_EnterInitMode>
 8003288:	4603      	mov	r3, r0
 800328a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800328c:	7cfb      	ldrb	r3, [r7, #19]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d163      	bne.n	800335a <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d126      	bne.n	80032e6 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d102      	bne.n	80032ac <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	2200      	movs	r2, #0
 80032aa:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f000 fa2d 	bl	8003710 <RTC_ByteToBcd2>
 80032b6:	4603      	mov	r3, r0
 80032b8:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	785b      	ldrb	r3, [r3, #1]
 80032be:	4618      	mov	r0, r3
 80032c0:	f000 fa26 	bl	8003710 <RTC_ByteToBcd2>
 80032c4:	4603      	mov	r3, r0
 80032c6:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80032c8:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	789b      	ldrb	r3, [r3, #2]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f000 fa1e 	bl	8003710 <RTC_ByteToBcd2>
 80032d4:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80032d6:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	78db      	ldrb	r3, [r3, #3]
 80032de:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80032e0:	4313      	orrs	r3, r2
 80032e2:	617b      	str	r3, [r7, #20]
 80032e4:	e018      	b.n	8003318 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d102      	bne.n	80032fa <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	2200      	movs	r2, #0
 80032f8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	785b      	ldrb	r3, [r3, #1]
 8003304:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003306:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003308:	68ba      	ldr	r2, [r7, #8]
 800330a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800330c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	78db      	ldrb	r3, [r3, #3]
 8003312:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003314:	4313      	orrs	r3, r2
 8003316:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003322:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003326:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	689a      	ldr	r2, [r3, #8]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003336:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	6899      	ldr	r1, [r3, #8]
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	68da      	ldr	r2, [r3, #12]
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	431a      	orrs	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	430a      	orrs	r2, r1
 800334e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003350:	68f8      	ldr	r0, [r7, #12]
 8003352:	f000 f99f 	bl	8003694 <RTC_ExitInitMode>
 8003356:	4603      	mov	r3, r0
 8003358:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	22ff      	movs	r2, #255	; 0xff
 8003360:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003362:	7cfb      	ldrb	r3, [r7, #19]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d103      	bne.n	8003370 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8003378:	7cfb      	ldrb	r3, [r7, #19]
}
 800337a:	4618      	mov	r0, r3
 800337c:	371c      	adds	r7, #28
 800337e:	46bd      	mov	sp, r7
 8003380:	bd90      	pop	{r4, r7, pc}

08003382 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003382:	b580      	push	{r7, lr}
 8003384:	b086      	sub	sp, #24
 8003386:	af00      	add	r7, sp, #0
 8003388:	60f8      	str	r0, [r7, #12]
 800338a:	60b9      	str	r1, [r7, #8]
 800338c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80033b0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80033b4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	0c1b      	lsrs	r3, r3, #16
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033c0:	b2da      	uxtb	r2, r3
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	0a1b      	lsrs	r3, r3, #8
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033d0:	b2da      	uxtb	r2, r3
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033de:	b2da      	uxtb	r2, r3
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	0d9b      	lsrs	r3, r3, #22
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	b2da      	uxtb	r2, r3
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d11a      	bne.n	8003430 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	4618      	mov	r0, r3
 8003400:	f000 f9a6 	bl	8003750 <RTC_Bcd2ToByte>
 8003404:	4603      	mov	r3, r0
 8003406:	461a      	mov	r2, r3
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	785b      	ldrb	r3, [r3, #1]
 8003410:	4618      	mov	r0, r3
 8003412:	f000 f99d 	bl	8003750 <RTC_Bcd2ToByte>
 8003416:	4603      	mov	r3, r0
 8003418:	461a      	mov	r2, r3
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	789b      	ldrb	r3, [r3, #2]
 8003422:	4618      	mov	r0, r3
 8003424:	f000 f994 	bl	8003750 <RTC_Bcd2ToByte>
 8003428:	4603      	mov	r3, r0
 800342a:	461a      	mov	r2, r3
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3718      	adds	r7, #24
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800343a:	b590      	push	{r4, r7, lr}
 800343c:	b087      	sub	sp, #28
 800343e:	af00      	add	r7, sp, #0
 8003440:	60f8      	str	r0, [r7, #12]
 8003442:	60b9      	str	r1, [r7, #8]
 8003444:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f893 3020 	ldrb.w	r3, [r3, #32]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d101      	bne.n	8003454 <HAL_RTC_SetDate+0x1a>
 8003450:	2302      	movs	r3, #2
 8003452:	e075      	b.n	8003540 <HAL_RTC_SetDate+0x106>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2202      	movs	r2, #2
 8003460:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d10e      	bne.n	8003488 <HAL_RTC_SetDate+0x4e>
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	785b      	ldrb	r3, [r3, #1]
 800346e:	f003 0310 	and.w	r3, r3, #16
 8003472:	2b00      	cmp	r3, #0
 8003474:	d008      	beq.n	8003488 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	785b      	ldrb	r3, [r3, #1]
 800347a:	f023 0310 	bic.w	r3, r3, #16
 800347e:	b2db      	uxtb	r3, r3
 8003480:	330a      	adds	r3, #10
 8003482:	b2da      	uxtb	r2, r3
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d11c      	bne.n	80034c8 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	78db      	ldrb	r3, [r3, #3]
 8003492:	4618      	mov	r0, r3
 8003494:	f000 f93c 	bl	8003710 <RTC_ByteToBcd2>
 8003498:	4603      	mov	r3, r0
 800349a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	785b      	ldrb	r3, [r3, #1]
 80034a0:	4618      	mov	r0, r3
 80034a2:	f000 f935 	bl	8003710 <RTC_ByteToBcd2>
 80034a6:	4603      	mov	r3, r0
 80034a8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80034aa:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	789b      	ldrb	r3, [r3, #2]
 80034b0:	4618      	mov	r0, r3
 80034b2:	f000 f92d 	bl	8003710 <RTC_ByteToBcd2>
 80034b6:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80034b8:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80034c2:	4313      	orrs	r3, r2
 80034c4:	617b      	str	r3, [r7, #20]
 80034c6:	e00e      	b.n	80034e6 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	78db      	ldrb	r3, [r3, #3]
 80034cc:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	785b      	ldrb	r3, [r3, #1]
 80034d2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80034d4:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80034d6:	68ba      	ldr	r2, [r7, #8]
 80034d8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80034da:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80034e2:	4313      	orrs	r3, r2
 80034e4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	22ca      	movs	r2, #202	; 0xca
 80034ec:	625a      	str	r2, [r3, #36]	; 0x24
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2253      	movs	r2, #83	; 0x53
 80034f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f000 f899 	bl	800362e <RTC_EnterInitMode>
 80034fc:	4603      	mov	r3, r0
 80034fe:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003500:	7cfb      	ldrb	r3, [r7, #19]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d10c      	bne.n	8003520 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003510:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003514:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f000 f8bc 	bl	8003694 <RTC_ExitInitMode>
 800351c:	4603      	mov	r3, r0
 800351e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	22ff      	movs	r2, #255	; 0xff
 8003526:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003528:	7cfb      	ldrb	r3, [r7, #19]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d103      	bne.n	8003536 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2201      	movs	r2, #1
 8003532:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800353e:	7cfb      	ldrb	r3, [r7, #19]
}
 8003540:	4618      	mov	r0, r3
 8003542:	371c      	adds	r7, #28
 8003544:	46bd      	mov	sp, r7
 8003546:	bd90      	pop	{r4, r7, pc}

08003548 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b086      	sub	sp, #24
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800355e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003562:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	0c1b      	lsrs	r3, r3, #16
 8003568:	b2da      	uxtb	r2, r3
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	0a1b      	lsrs	r3, r3, #8
 8003572:	b2db      	uxtb	r3, r3
 8003574:	f003 031f 	and.w	r3, r3, #31
 8003578:	b2da      	uxtb	r2, r3
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	b2db      	uxtb	r3, r3
 8003582:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003586:	b2da      	uxtb	r2, r3
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	0b5b      	lsrs	r3, r3, #13
 8003590:	b2db      	uxtb	r3, r3
 8003592:	f003 0307 	and.w	r3, r3, #7
 8003596:	b2da      	uxtb	r2, r3
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d11a      	bne.n	80035d8 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	78db      	ldrb	r3, [r3, #3]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f000 f8d2 	bl	8003750 <RTC_Bcd2ToByte>
 80035ac:	4603      	mov	r3, r0
 80035ae:	461a      	mov	r2, r3
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	785b      	ldrb	r3, [r3, #1]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f000 f8c9 	bl	8003750 <RTC_Bcd2ToByte>
 80035be:	4603      	mov	r3, r0
 80035c0:	461a      	mov	r2, r3
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	789b      	ldrb	r3, [r3, #2]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f000 f8c0 	bl	8003750 <RTC_Bcd2ToByte>
 80035d0:	4603      	mov	r3, r0
 80035d2:	461a      	mov	r2, r3
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3718      	adds	r7, #24
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b084      	sub	sp, #16
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68da      	ldr	r2, [r3, #12]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035f8:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80035fa:	f7fd ffef 	bl	80015dc <HAL_GetTick>
 80035fe:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003600:	e009      	b.n	8003616 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003602:	f7fd ffeb 	bl	80015dc <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003610:	d901      	bls.n	8003616 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e007      	b.n	8003626 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	f003 0320 	and.w	r3, r3, #32
 8003620:	2b00      	cmp	r3, #0
 8003622:	d0ee      	beq.n	8003602 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3710      	adds	r7, #16
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}

0800362e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800362e:	b580      	push	{r7, lr}
 8003630:	b084      	sub	sp, #16
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003636:	2300      	movs	r3, #0
 8003638:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003644:	2b00      	cmp	r3, #0
 8003646:	d120      	bne.n	800368a <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f04f 32ff 	mov.w	r2, #4294967295
 8003650:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003652:	f7fd ffc3 	bl	80015dc <HAL_GetTick>
 8003656:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003658:	e00d      	b.n	8003676 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800365a:	f7fd ffbf 	bl	80015dc <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003668:	d905      	bls.n	8003676 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2203      	movs	r2, #3
 8003672:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003680:	2b00      	cmp	r3, #0
 8003682:	d102      	bne.n	800368a <RTC_EnterInitMode+0x5c>
 8003684:	7bfb      	ldrb	r3, [r7, #15]
 8003686:	2b03      	cmp	r3, #3
 8003688:	d1e7      	bne.n	800365a <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) */

  return status;
 800368a:	7bfb      	ldrb	r3, [r7, #15]
}
 800368c:	4618      	mov	r0, r3
 800368e:	3710      	adds	r7, #16
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800369c:	2300      	movs	r3, #0
 800369e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80036a0:	4b1a      	ldr	r3, [pc, #104]	; (800370c <RTC_ExitInitMode+0x78>)
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	4a19      	ldr	r2, [pc, #100]	; (800370c <RTC_ExitInitMode+0x78>)
 80036a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036aa:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80036ac:	4b17      	ldr	r3, [pc, #92]	; (800370c <RTC_ExitInitMode+0x78>)
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f003 0320 	and.w	r3, r3, #32
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d10c      	bne.n	80036d2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f7ff ff92 	bl	80035e2 <HAL_RTC_WaitForSynchro>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d01e      	beq.n	8003702 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2203      	movs	r2, #3
 80036c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	73fb      	strb	r3, [r7, #15]
 80036d0:	e017      	b.n	8003702 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80036d2:	4b0e      	ldr	r3, [pc, #56]	; (800370c <RTC_ExitInitMode+0x78>)
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	4a0d      	ldr	r2, [pc, #52]	; (800370c <RTC_ExitInitMode+0x78>)
 80036d8:	f023 0320 	bic.w	r3, r3, #32
 80036dc:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f7ff ff7f 	bl	80035e2 <HAL_RTC_WaitForSynchro>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d005      	beq.n	80036f6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2203      	movs	r2, #3
 80036ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80036f6:	4b05      	ldr	r3, [pc, #20]	; (800370c <RTC_ExitInitMode+0x78>)
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	4a04      	ldr	r2, [pc, #16]	; (800370c <RTC_ExitInitMode+0x78>)
 80036fc:	f043 0320 	orr.w	r3, r3, #32
 8003700:	6093      	str	r3, [r2, #8]
  }

  return status;
 8003702:	7bfb      	ldrb	r3, [r7, #15]
}
 8003704:	4618      	mov	r0, r3
 8003706:	3710      	adds	r7, #16
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	40002800 	.word	0x40002800

08003710 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003710:	b480      	push	{r7}
 8003712:	b085      	sub	sp, #20
 8003714:	af00      	add	r7, sp, #0
 8003716:	4603      	mov	r3, r0
 8003718:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800371a:	2300      	movs	r3, #0
 800371c:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800371e:	79fb      	ldrb	r3, [r7, #7]
 8003720:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8003722:	e005      	b.n	8003730 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	3301      	adds	r3, #1
 8003728:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800372a:	7afb      	ldrb	r3, [r7, #11]
 800372c:	3b0a      	subs	r3, #10
 800372e:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8003730:	7afb      	ldrb	r3, [r7, #11]
 8003732:	2b09      	cmp	r3, #9
 8003734:	d8f6      	bhi.n	8003724 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	b2db      	uxtb	r3, r3
 800373a:	011b      	lsls	r3, r3, #4
 800373c:	b2da      	uxtb	r2, r3
 800373e:	7afb      	ldrb	r3, [r7, #11]
 8003740:	4313      	orrs	r3, r2
 8003742:	b2db      	uxtb	r3, r3
}
 8003744:	4618      	mov	r0, r3
 8003746:	3714      	adds	r7, #20
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003750:	b480      	push	{r7}
 8003752:	b085      	sub	sp, #20
 8003754:	af00      	add	r7, sp, #0
 8003756:	4603      	mov	r3, r0
 8003758:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800375a:	79fb      	ldrb	r3, [r7, #7]
 800375c:	091b      	lsrs	r3, r3, #4
 800375e:	b2db      	uxtb	r3, r3
 8003760:	461a      	mov	r2, r3
 8003762:	0092      	lsls	r2, r2, #2
 8003764:	4413      	add	r3, r2
 8003766:	005b      	lsls	r3, r3, #1
 8003768:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800376a:	79fb      	ldrb	r3, [r7, #7]
 800376c:	f003 030f 	and.w	r3, r3, #15
 8003770:	b2da      	uxtb	r2, r3
 8003772:	7bfb      	ldrb	r3, [r7, #15]
 8003774:	4413      	add	r3, r2
 8003776:	b2db      	uxtb	r3, r3
}
 8003778:	4618      	mov	r0, r3
 800377a:	3714      	adds	r7, #20
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8003784:	b480      	push	{r7}
 8003786:	b087      	sub	sp, #28
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
  tmp = (uint32_t) & (tamp->BKP0R);
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) */
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	3350      	adds	r3, #80	; 0x50
 8003796:	617b      	str	r3, [r7, #20]
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) */

  tmp += (BackupRegister * 4U);
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	009a      	lsls	r2, r3, #2
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	4413      	add	r3, r2
 80037a0:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	461a      	mov	r2, r3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6013      	str	r3, [r2, #0]
}
 80037aa:	bf00      	nop
 80037ac:	371c      	adds	r7, #28
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr

080037b6 <HAL_RTCEx_BKUPRead>:
  *         This parameter can be: RTC_BKP_DRx where x can be from 0 to 31 to
  *         specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80037b6:	b480      	push	{r7}
 80037b8:	b085      	sub	sp, #20
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
 80037be:	6039      	str	r1, [r7, #0]
  tmp = (uint32_t) & (tamp->BKP0R);
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) */
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	3350      	adds	r3, #80	; 0x50
 80037c6:	60fb      	str	r3, [r7, #12]
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) */

  tmp += (BackupRegister * 4U);
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	68fa      	ldr	r2, [r7, #12]
 80037ce:	4413      	add	r3, r2
 80037d0:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3714      	adds	r7, #20
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr

080037e2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b082      	sub	sp, #8
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d101      	bne.n	80037f4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e040      	b.n	8003876 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d106      	bne.n	800380a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f7fd fd25 	bl	8001254 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2224      	movs	r2, #36	; 0x24
 800380e:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f022 0201 	bic.w	r2, r2, #1
 800381e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f000 f8bf 	bl	80039a4 <UART_SetConfig>
 8003826:	4603      	mov	r3, r0
 8003828:	2b01      	cmp	r3, #1
 800382a:	d101      	bne.n	8003830 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e022      	b.n	8003876 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003834:	2b00      	cmp	r3, #0
 8003836:	d002      	beq.n	800383e <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f000 fc4b 	bl	80040d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	685a      	ldr	r2, [r3, #4]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800384c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	689a      	ldr	r2, [r3, #8]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800385c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f042 0201 	orr.w	r2, r2, #1
 800386c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 fcd2 	bl	8004218 <UART_CheckIdleState>
 8003874:	4603      	mov	r3, r0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3708      	adds	r7, #8
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}

0800387e <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800387e:	b580      	push	{r7, lr}
 8003880:	b08a      	sub	sp, #40	; 0x28
 8003882:	af02      	add	r7, sp, #8
 8003884:	60f8      	str	r0, [r7, #12]
 8003886:	60b9      	str	r1, [r7, #8]
 8003888:	603b      	str	r3, [r7, #0]
 800388a:	4613      	mov	r3, r2
 800388c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003892:	2b20      	cmp	r3, #32
 8003894:	f040 8081 	bne.w	800399a <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d002      	beq.n	80038a4 <HAL_UART_Transmit+0x26>
 800389e:	88fb      	ldrh	r3, [r7, #6]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d101      	bne.n	80038a8 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e079      	b.n	800399c <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d101      	bne.n	80038b6 <HAL_UART_Transmit+0x38>
 80038b2:	2302      	movs	r3, #2
 80038b4:	e072      	b.n	800399c <HAL_UART_Transmit+0x11e>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2201      	movs	r2, #1
 80038ba:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2221      	movs	r2, #33	; 0x21
 80038c8:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80038ca:	f7fd fe87 	bl	80015dc <HAL_GetTick>
 80038ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	88fa      	ldrh	r2, [r7, #6]
 80038d4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	88fa      	ldrh	r2, [r7, #6]
 80038dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038e8:	d108      	bne.n	80038fc <HAL_UART_Transmit+0x7e>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d104      	bne.n	80038fc <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80038f2:	2300      	movs	r3, #0
 80038f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	61bb      	str	r3, [r7, #24]
 80038fa:	e003      	b.n	8003904 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003900:	2300      	movs	r3, #0
 8003902:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003904:	e02d      	b.n	8003962 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	9300      	str	r3, [sp, #0]
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	2200      	movs	r2, #0
 800390e:	2180      	movs	r1, #128	; 0x80
 8003910:	68f8      	ldr	r0, [r7, #12]
 8003912:	f000 fcc6 	bl	80042a2 <UART_WaitOnFlagUntilTimeout>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d001      	beq.n	8003920 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e03d      	b.n	800399c <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d10b      	bne.n	800393e <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	881a      	ldrh	r2, [r3, #0]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003932:	b292      	uxth	r2, r2
 8003934:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	3302      	adds	r3, #2
 800393a:	61bb      	str	r3, [r7, #24]
 800393c:	e008      	b.n	8003950 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	781a      	ldrb	r2, [r3, #0]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	b292      	uxth	r2, r2
 8003948:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	3301      	adds	r3, #1
 800394e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003956:	b29b      	uxth	r3, r3
 8003958:	3b01      	subs	r3, #1
 800395a:	b29a      	uxth	r2, r3
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003968:	b29b      	uxth	r3, r3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1cb      	bne.n	8003906 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	9300      	str	r3, [sp, #0]
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	2200      	movs	r2, #0
 8003976:	2140      	movs	r1, #64	; 0x40
 8003978:	68f8      	ldr	r0, [r7, #12]
 800397a:	f000 fc92 	bl	80042a2 <UART_WaitOnFlagUntilTimeout>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d001      	beq.n	8003988 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	e009      	b.n	800399c <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2220      	movs	r2, #32
 800398c:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8003996:	2300      	movs	r3, #0
 8003998:	e000      	b.n	800399c <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800399a:	2302      	movs	r3, #2
  }
}
 800399c:	4618      	mov	r0, r3
 800399e:	3720      	adds	r7, #32
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039a8:	b09e      	sub	sp, #120	; 0x78
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	65f8      	str	r0, [r7, #92]	; 0x5c
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80039ae:	2300      	movs	r3, #0
 80039b0:	66fb      	str	r3, [r7, #108]	; 0x6c
  HAL_StatusTypeDef ret               = HAL_OK;
 80039b2:	2300      	movs	r3, #0
 80039b4:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80039b8:	2300      	movs	r3, #0
 80039ba:	667b      	str	r3, [r7, #100]	; 0x64
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039be:	689a      	ldr	r2, [r3, #8]
 80039c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	431a      	orrs	r2, r3
 80039c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039c8:	695b      	ldr	r3, [r3, #20]
 80039ca:	431a      	orrs	r2, r3
 80039cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039ce:	69db      	ldr	r3, [r3, #28]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	677b      	str	r3, [r7, #116]	; 0x74
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	49a4      	ldr	r1, [pc, #656]	; (8003c6c <UART_SetConfig+0x2c8>)
 80039dc:	4019      	ands	r1, r3
 80039de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039e4:	430b      	orrs	r3, r1
 80039e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80039f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039f4:	68d9      	ldr	r1, [r3, #12]
 80039f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	ea40 0301 	orr.w	r3, r0, r1
 80039fe:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a02:	699b      	ldr	r3, [r3, #24]
 8003a04:	677b      	str	r3, [r7, #116]	; 0x74

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	4b99      	ldr	r3, [pc, #612]	; (8003c70 <UART_SetConfig+0x2cc>)
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d004      	beq.n	8003a1a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003a10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a12:	6a1a      	ldr	r2, [r3, #32]
 8003a14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a16:	4313      	orrs	r3, r2
 8003a18:	677b      	str	r3, [r7, #116]	; 0x74
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003a24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a2a:	430b      	orrs	r3, r1
 8003a2c:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	4b90      	ldr	r3, [pc, #576]	; (8003c74 <UART_SetConfig+0x2d0>)
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d125      	bne.n	8003a84 <UART_SetConfig+0xe0>
 8003a38:	4b8f      	ldr	r3, [pc, #572]	; (8003c78 <UART_SetConfig+0x2d4>)
 8003a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a3e:	f003 0303 	and.w	r3, r3, #3
 8003a42:	2b03      	cmp	r3, #3
 8003a44:	d81a      	bhi.n	8003a7c <UART_SetConfig+0xd8>
 8003a46:	a201      	add	r2, pc, #4	; (adr r2, 8003a4c <UART_SetConfig+0xa8>)
 8003a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a4c:	08003a5d 	.word	0x08003a5d
 8003a50:	08003a6d 	.word	0x08003a6d
 8003a54:	08003a65 	.word	0x08003a65
 8003a58:	08003a75 	.word	0x08003a75
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8003a62:	e116      	b.n	8003c92 <UART_SetConfig+0x2ee>
 8003a64:	2302      	movs	r3, #2
 8003a66:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8003a6a:	e112      	b.n	8003c92 <UART_SetConfig+0x2ee>
 8003a6c:	2304      	movs	r3, #4
 8003a6e:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8003a72:	e10e      	b.n	8003c92 <UART_SetConfig+0x2ee>
 8003a74:	2308      	movs	r3, #8
 8003a76:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8003a7a:	e10a      	b.n	8003c92 <UART_SetConfig+0x2ee>
 8003a7c:	2310      	movs	r3, #16
 8003a7e:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8003a82:	e106      	b.n	8003c92 <UART_SetConfig+0x2ee>
 8003a84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	4b7c      	ldr	r3, [pc, #496]	; (8003c7c <UART_SetConfig+0x2d8>)
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d138      	bne.n	8003b00 <UART_SetConfig+0x15c>
 8003a8e:	4b7a      	ldr	r3, [pc, #488]	; (8003c78 <UART_SetConfig+0x2d4>)
 8003a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a94:	f003 030c 	and.w	r3, r3, #12
 8003a98:	2b0c      	cmp	r3, #12
 8003a9a:	d82d      	bhi.n	8003af8 <UART_SetConfig+0x154>
 8003a9c:	a201      	add	r2, pc, #4	; (adr r2, 8003aa4 <UART_SetConfig+0x100>)
 8003a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aa2:	bf00      	nop
 8003aa4:	08003ad9 	.word	0x08003ad9
 8003aa8:	08003af9 	.word	0x08003af9
 8003aac:	08003af9 	.word	0x08003af9
 8003ab0:	08003af9 	.word	0x08003af9
 8003ab4:	08003ae9 	.word	0x08003ae9
 8003ab8:	08003af9 	.word	0x08003af9
 8003abc:	08003af9 	.word	0x08003af9
 8003ac0:	08003af9 	.word	0x08003af9
 8003ac4:	08003ae1 	.word	0x08003ae1
 8003ac8:	08003af9 	.word	0x08003af9
 8003acc:	08003af9 	.word	0x08003af9
 8003ad0:	08003af9 	.word	0x08003af9
 8003ad4:	08003af1 	.word	0x08003af1
 8003ad8:	2300      	movs	r3, #0
 8003ada:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8003ade:	e0d8      	b.n	8003c92 <UART_SetConfig+0x2ee>
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8003ae6:	e0d4      	b.n	8003c92 <UART_SetConfig+0x2ee>
 8003ae8:	2304      	movs	r3, #4
 8003aea:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8003aee:	e0d0      	b.n	8003c92 <UART_SetConfig+0x2ee>
 8003af0:	2308      	movs	r3, #8
 8003af2:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8003af6:	e0cc      	b.n	8003c92 <UART_SetConfig+0x2ee>
 8003af8:	2310      	movs	r3, #16
 8003afa:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8003afe:	e0c8      	b.n	8003c92 <UART_SetConfig+0x2ee>
 8003b00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	4b5e      	ldr	r3, [pc, #376]	; (8003c80 <UART_SetConfig+0x2dc>)
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d125      	bne.n	8003b56 <UART_SetConfig+0x1b2>
 8003b0a:	4b5b      	ldr	r3, [pc, #364]	; (8003c78 <UART_SetConfig+0x2d4>)
 8003b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b10:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003b14:	2b30      	cmp	r3, #48	; 0x30
 8003b16:	d016      	beq.n	8003b46 <UART_SetConfig+0x1a2>
 8003b18:	2b30      	cmp	r3, #48	; 0x30
 8003b1a:	d818      	bhi.n	8003b4e <UART_SetConfig+0x1aa>
 8003b1c:	2b20      	cmp	r3, #32
 8003b1e:	d00a      	beq.n	8003b36 <UART_SetConfig+0x192>
 8003b20:	2b20      	cmp	r3, #32
 8003b22:	d814      	bhi.n	8003b4e <UART_SetConfig+0x1aa>
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d002      	beq.n	8003b2e <UART_SetConfig+0x18a>
 8003b28:	2b10      	cmp	r3, #16
 8003b2a:	d008      	beq.n	8003b3e <UART_SetConfig+0x19a>
 8003b2c:	e00f      	b.n	8003b4e <UART_SetConfig+0x1aa>
 8003b2e:	2300      	movs	r3, #0
 8003b30:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8003b34:	e0ad      	b.n	8003c92 <UART_SetConfig+0x2ee>
 8003b36:	2302      	movs	r3, #2
 8003b38:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8003b3c:	e0a9      	b.n	8003c92 <UART_SetConfig+0x2ee>
 8003b3e:	2304      	movs	r3, #4
 8003b40:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8003b44:	e0a5      	b.n	8003c92 <UART_SetConfig+0x2ee>
 8003b46:	2308      	movs	r3, #8
 8003b48:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8003b4c:	e0a1      	b.n	8003c92 <UART_SetConfig+0x2ee>
 8003b4e:	2310      	movs	r3, #16
 8003b50:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8003b54:	e09d      	b.n	8003c92 <UART_SetConfig+0x2ee>
 8003b56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	4b4a      	ldr	r3, [pc, #296]	; (8003c84 <UART_SetConfig+0x2e0>)
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d125      	bne.n	8003bac <UART_SetConfig+0x208>
 8003b60:	4b45      	ldr	r3, [pc, #276]	; (8003c78 <UART_SetConfig+0x2d4>)
 8003b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b66:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003b6a:	2bc0      	cmp	r3, #192	; 0xc0
 8003b6c:	d016      	beq.n	8003b9c <UART_SetConfig+0x1f8>
 8003b6e:	2bc0      	cmp	r3, #192	; 0xc0
 8003b70:	d818      	bhi.n	8003ba4 <UART_SetConfig+0x200>
 8003b72:	2b80      	cmp	r3, #128	; 0x80
 8003b74:	d00a      	beq.n	8003b8c <UART_SetConfig+0x1e8>
 8003b76:	2b80      	cmp	r3, #128	; 0x80
 8003b78:	d814      	bhi.n	8003ba4 <UART_SetConfig+0x200>
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d002      	beq.n	8003b84 <UART_SetConfig+0x1e0>
 8003b7e:	2b40      	cmp	r3, #64	; 0x40
 8003b80:	d008      	beq.n	8003b94 <UART_SetConfig+0x1f0>
 8003b82:	e00f      	b.n	8003ba4 <UART_SetConfig+0x200>
 8003b84:	2300      	movs	r3, #0
 8003b86:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8003b8a:	e082      	b.n	8003c92 <UART_SetConfig+0x2ee>
 8003b8c:	2302      	movs	r3, #2
 8003b8e:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8003b92:	e07e      	b.n	8003c92 <UART_SetConfig+0x2ee>
 8003b94:	2304      	movs	r3, #4
 8003b96:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8003b9a:	e07a      	b.n	8003c92 <UART_SetConfig+0x2ee>
 8003b9c:	2308      	movs	r3, #8
 8003b9e:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8003ba2:	e076      	b.n	8003c92 <UART_SetConfig+0x2ee>
 8003ba4:	2310      	movs	r3, #16
 8003ba6:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8003baa:	e072      	b.n	8003c92 <UART_SetConfig+0x2ee>
 8003bac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	4b35      	ldr	r3, [pc, #212]	; (8003c88 <UART_SetConfig+0x2e4>)
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d12a      	bne.n	8003c0c <UART_SetConfig+0x268>
 8003bb6:	4b30      	ldr	r3, [pc, #192]	; (8003c78 <UART_SetConfig+0x2d4>)
 8003bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bc0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bc4:	d01a      	beq.n	8003bfc <UART_SetConfig+0x258>
 8003bc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bca:	d81b      	bhi.n	8003c04 <UART_SetConfig+0x260>
 8003bcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bd0:	d00c      	beq.n	8003bec <UART_SetConfig+0x248>
 8003bd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bd6:	d815      	bhi.n	8003c04 <UART_SetConfig+0x260>
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d003      	beq.n	8003be4 <UART_SetConfig+0x240>
 8003bdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003be0:	d008      	beq.n	8003bf4 <UART_SetConfig+0x250>
 8003be2:	e00f      	b.n	8003c04 <UART_SetConfig+0x260>
 8003be4:	2300      	movs	r3, #0
 8003be6:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8003bea:	e052      	b.n	8003c92 <UART_SetConfig+0x2ee>
 8003bec:	2302      	movs	r3, #2
 8003bee:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8003bf2:	e04e      	b.n	8003c92 <UART_SetConfig+0x2ee>
 8003bf4:	2304      	movs	r3, #4
 8003bf6:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8003bfa:	e04a      	b.n	8003c92 <UART_SetConfig+0x2ee>
 8003bfc:	2308      	movs	r3, #8
 8003bfe:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8003c02:	e046      	b.n	8003c92 <UART_SetConfig+0x2ee>
 8003c04:	2310      	movs	r3, #16
 8003c06:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8003c0a:	e042      	b.n	8003c92 <UART_SetConfig+0x2ee>
 8003c0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	4b17      	ldr	r3, [pc, #92]	; (8003c70 <UART_SetConfig+0x2cc>)
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d13a      	bne.n	8003c8c <UART_SetConfig+0x2e8>
 8003c16:	4b18      	ldr	r3, [pc, #96]	; (8003c78 <UART_SetConfig+0x2d4>)
 8003c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c1c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003c20:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c24:	d01a      	beq.n	8003c5c <UART_SetConfig+0x2b8>
 8003c26:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c2a:	d81b      	bhi.n	8003c64 <UART_SetConfig+0x2c0>
 8003c2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c30:	d00c      	beq.n	8003c4c <UART_SetConfig+0x2a8>
 8003c32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c36:	d815      	bhi.n	8003c64 <UART_SetConfig+0x2c0>
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d003      	beq.n	8003c44 <UART_SetConfig+0x2a0>
 8003c3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c40:	d008      	beq.n	8003c54 <UART_SetConfig+0x2b0>
 8003c42:	e00f      	b.n	8003c64 <UART_SetConfig+0x2c0>
 8003c44:	2300      	movs	r3, #0
 8003c46:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8003c4a:	e022      	b.n	8003c92 <UART_SetConfig+0x2ee>
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8003c52:	e01e      	b.n	8003c92 <UART_SetConfig+0x2ee>
 8003c54:	2304      	movs	r3, #4
 8003c56:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8003c5a:	e01a      	b.n	8003c92 <UART_SetConfig+0x2ee>
 8003c5c:	2308      	movs	r3, #8
 8003c5e:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8003c62:	e016      	b.n	8003c92 <UART_SetConfig+0x2ee>
 8003c64:	2310      	movs	r3, #16
 8003c66:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8003c6a:	e012      	b.n	8003c92 <UART_SetConfig+0x2ee>
 8003c6c:	efff69f3 	.word	0xefff69f3
 8003c70:	40008000 	.word	0x40008000
 8003c74:	40013800 	.word	0x40013800
 8003c78:	40021000 	.word	0x40021000
 8003c7c:	40004400 	.word	0x40004400
 8003c80:	40004800 	.word	0x40004800
 8003c84:	40004c00 	.word	0x40004c00
 8003c88:	40005000 	.word	0x40005000
 8003c8c:	2310      	movs	r3, #16
 8003c8e:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	4bba      	ldr	r3, [pc, #744]	; (8003f80 <UART_SetConfig+0x5dc>)
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	f040 810a 	bne.w	8003eb2 <UART_SetConfig+0x50e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003c9e:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8003ca2:	2b08      	cmp	r3, #8
 8003ca4:	d823      	bhi.n	8003cee <UART_SetConfig+0x34a>
 8003ca6:	a201      	add	r2, pc, #4	; (adr r2, 8003cac <UART_SetConfig+0x308>)
 8003ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cac:	08003cd1 	.word	0x08003cd1
 8003cb0:	08003cef 	.word	0x08003cef
 8003cb4:	08003cd9 	.word	0x08003cd9
 8003cb8:	08003cef 	.word	0x08003cef
 8003cbc:	08003cdf 	.word	0x08003cdf
 8003cc0:	08003cef 	.word	0x08003cef
 8003cc4:	08003cef 	.word	0x08003cef
 8003cc8:	08003cef 	.word	0x08003cef
 8003ccc:	08003ce7 	.word	0x08003ce7
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8003cd0:	f7fe fcf4 	bl	80026bc <HAL_RCC_GetPCLK1Freq>
 8003cd4:	6678      	str	r0, [r7, #100]	; 0x64
#endif /* USART_PRESC_PRESCALER */
        break;
 8003cd6:	e00e      	b.n	8003cf6 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8003cd8:	4baa      	ldr	r3, [pc, #680]	; (8003f84 <UART_SetConfig+0x5e0>)
 8003cda:	667b      	str	r3, [r7, #100]	; 0x64
#endif /* USART_PRESC_PRESCALER */
        break;
 8003cdc:	e00b      	b.n	8003cf6 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8003cde:	f7fe fc55 	bl	800258c <HAL_RCC_GetSysClockFreq>
 8003ce2:	6678      	str	r0, [r7, #100]	; 0x64
#endif /* USART_PRESC_PRESCALER */
        break;
 8003ce4:	e007      	b.n	8003cf6 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8003ce6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cea:	667b      	str	r3, [r7, #100]	; 0x64
#endif /* USART_PRESC_PRESCALER */
        break;
 8003cec:	e003      	b.n	8003cf6 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
        break;
 8003cf4:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8003cf6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f000 81de 	beq.w	80040ba <UART_SetConfig+0x716>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003cfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d00:	685a      	ldr	r2, [r3, #4]
 8003d02:	4613      	mov	r3, r2
 8003d04:	005b      	lsls	r3, r3, #1
 8003d06:	441a      	add	r2, r3
 8003d08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d305      	bcc.n	8003d1a <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003d0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003d14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d903      	bls.n	8003d22 <UART_SetConfig+0x37e>
      {
        ret = HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8003d20:	e1cb      	b.n	80040ba <UART_SetConfig+0x716>
      }
      else
      {
        switch (clocksource)
 8003d22:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8003d26:	2b08      	cmp	r3, #8
 8003d28:	f200 80ae 	bhi.w	8003e88 <UART_SetConfig+0x4e4>
 8003d2c:	a201      	add	r2, pc, #4	; (adr r2, 8003d34 <UART_SetConfig+0x390>)
 8003d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d32:	bf00      	nop
 8003d34:	08003d59 	.word	0x08003d59
 8003d38:	08003e89 	.word	0x08003e89
 8003d3c:	08003db7 	.word	0x08003db7
 8003d40:	08003e89 	.word	0x08003e89
 8003d44:	08003df7 	.word	0x08003df7
 8003d48:	08003e89 	.word	0x08003e89
 8003d4c:	08003e89 	.word	0x08003e89
 8003d50:	08003e89 	.word	0x08003e89
 8003d54:	08003e51 	.word	0x08003e51
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003d58:	f7fe fcb0 	bl	80026bc <HAL_RCC_GetPCLK1Freq>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2200      	movs	r2, #0
 8003d60:	4698      	mov	r8, r3
 8003d62:	4691      	mov	r9, r2
 8003d64:	f04f 0200 	mov.w	r2, #0
 8003d68:	f04f 0300 	mov.w	r3, #0
 8003d6c:	ea4f 2309 	mov.w	r3, r9, lsl #8
 8003d70:	ea43 6318 	orr.w	r3, r3, r8, lsr #24
 8003d74:	ea4f 2208 	mov.w	r2, r8, lsl #8
 8003d78:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8003d7a:	6849      	ldr	r1, [r1, #4]
 8003d7c:	0849      	lsrs	r1, r1, #1
 8003d7e:	2000      	movs	r0, #0
 8003d80:	6539      	str	r1, [r7, #80]	; 0x50
 8003d82:	6578      	str	r0, [r7, #84]	; 0x54
 8003d84:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8003d88:	4621      	mov	r1, r4
 8003d8a:	1851      	adds	r1, r2, r1
 8003d8c:	64b9      	str	r1, [r7, #72]	; 0x48
 8003d8e:	4629      	mov	r1, r5
 8003d90:	eb43 0101 	adc.w	r1, r3, r1
 8003d94:	64f9      	str	r1, [r7, #76]	; 0x4c
 8003d96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	643b      	str	r3, [r7, #64]	; 0x40
 8003d9e:	647a      	str	r2, [r7, #68]	; 0x44
 8003da0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003da4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003da8:	f7fc fefe 	bl	8000ba8 <__aeabi_uldivmod>
 8003dac:	4602      	mov	r2, r0
 8003dae:	460b      	mov	r3, r1
 8003db0:	4613      	mov	r3, r2
 8003db2:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
            break;
 8003db4:	e06c      	b.n	8003e90 <UART_SetConfig+0x4ec>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8003db6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	085b      	lsrs	r3, r3, #1
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	63bb      	str	r3, [r7, #56]	; 0x38
 8003dc0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003dc2:	4b71      	ldr	r3, [pc, #452]	; (8003f88 <UART_SetConfig+0x5e4>)
 8003dc4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003dc8:	4602      	mov	r2, r0
 8003dca:	18d3      	adds	r3, r2, r3
 8003dcc:	633b      	str	r3, [r7, #48]	; 0x30
 8003dce:	460b      	mov	r3, r1
 8003dd0:	f143 0300 	adc.w	r3, r3, #0
 8003dd4:	637b      	str	r3, [r7, #52]	; 0x34
 8003dd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dde:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003de0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003de4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003de8:	f7fc fede 	bl	8000ba8 <__aeabi_uldivmod>
 8003dec:	4602      	mov	r2, r0
 8003dee:	460b      	mov	r3, r1
 8003df0:	4613      	mov	r3, r2
 8003df2:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
            break;
 8003df4:	e04c      	b.n	8003e90 <UART_SetConfig+0x4ec>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003df6:	f7fe fbc9 	bl	800258c <HAL_RCC_GetSysClockFreq>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	461c      	mov	r4, r3
 8003e00:	4615      	mov	r5, r2
 8003e02:	f04f 0200 	mov.w	r2, #0
 8003e06:	f04f 0300 	mov.w	r3, #0
 8003e0a:	022b      	lsls	r3, r5, #8
 8003e0c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003e10:	0222      	lsls	r2, r4, #8
 8003e12:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8003e14:	6849      	ldr	r1, [r1, #4]
 8003e16:	0849      	lsrs	r1, r1, #1
 8003e18:	2000      	movs	r0, #0
 8003e1a:	6239      	str	r1, [r7, #32]
 8003e1c:	6278      	str	r0, [r7, #36]	; 0x24
 8003e1e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003e22:	4621      	mov	r1, r4
 8003e24:	1851      	adds	r1, r2, r1
 8003e26:	61b9      	str	r1, [r7, #24]
 8003e28:	4629      	mov	r1, r5
 8003e2a:	eb43 0101 	adc.w	r1, r3, r1
 8003e2e:	61f9      	str	r1, [r7, #28]
 8003e30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	613b      	str	r3, [r7, #16]
 8003e38:	617a      	str	r2, [r7, #20]
 8003e3a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003e3e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003e42:	f7fc feb1 	bl	8000ba8 <__aeabi_uldivmod>
 8003e46:	4602      	mov	r2, r0
 8003e48:	460b      	mov	r3, r1
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
            break;
 8003e4e:	e01f      	b.n	8003e90 <UART_SetConfig+0x4ec>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8003e50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	085b      	lsrs	r3, r3, #1
 8003e56:	2200      	movs	r2, #0
 8003e58:	469a      	mov	sl, r3
 8003e5a:	4693      	mov	fp, r2
 8003e5c:	f51a 0300 	adds.w	r3, sl, #8388608	; 0x800000
 8003e60:	60bb      	str	r3, [r7, #8]
 8003e62:	f14b 0300 	adc.w	r3, fp, #0
 8003e66:	60fb      	str	r3, [r7, #12]
 8003e68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	603b      	str	r3, [r7, #0]
 8003e70:	607a      	str	r2, [r7, #4]
 8003e72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e76:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003e7a:	f7fc fe95 	bl	8000ba8 <__aeabi_uldivmod>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	460b      	mov	r3, r1
 8003e82:	4613      	mov	r3, r2
 8003e84:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
            break;
 8003e86:	e003      	b.n	8003e90 <UART_SetConfig+0x4ec>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
            break;
 8003e8e:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003e90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e96:	d308      	bcc.n	8003eaa <UART_SetConfig+0x506>
 8003e98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e9e:	d204      	bcs.n	8003eaa <UART_SetConfig+0x506>
        {
          huart->Instance->BRR = usartdiv;
 8003ea0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003ea6:	60da      	str	r2, [r3, #12]
 8003ea8:	e107      	b.n	80040ba <UART_SetConfig+0x716>
        }
        else
        {
          ret = HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8003eb0:	e103      	b.n	80040ba <UART_SetConfig+0x716>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003eb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003eb4:	69db      	ldr	r3, [r3, #28]
 8003eb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003eba:	f040 808d 	bne.w	8003fd8 <UART_SetConfig+0x634>
  {
    switch (clocksource)
 8003ebe:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8003ec2:	2b08      	cmp	r3, #8
 8003ec4:	d862      	bhi.n	8003f8c <UART_SetConfig+0x5e8>
 8003ec6:	a201      	add	r2, pc, #4	; (adr r2, 8003ecc <UART_SetConfig+0x528>)
 8003ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ecc:	08003ef1 	.word	0x08003ef1
 8003ed0:	08003f0f 	.word	0x08003f0f
 8003ed4:	08003f2d 	.word	0x08003f2d
 8003ed8:	08003f8d 	.word	0x08003f8d
 8003edc:	08003f49 	.word	0x08003f49
 8003ee0:	08003f8d 	.word	0x08003f8d
 8003ee4:	08003f8d 	.word	0x08003f8d
 8003ee8:	08003f8d 	.word	0x08003f8d
 8003eec:	08003f67 	.word	0x08003f67
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003ef0:	f7fe fbe4 	bl	80026bc <HAL_RCC_GetPCLK1Freq>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	005a      	lsls	r2, r3, #1
 8003ef8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	085b      	lsrs	r3, r3, #1
 8003efe:	441a      	add	r2, r3
 8003f00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8003f0c:	e042      	b.n	8003f94 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003f0e:	f7fe fbeb 	bl	80026e8 <HAL_RCC_GetPCLK2Freq>
 8003f12:	4603      	mov	r3, r0
 8003f14:	005a      	lsls	r2, r3, #1
 8003f16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	085b      	lsrs	r3, r3, #1
 8003f1c:	441a      	add	r2, r3
 8003f1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8003f2a:	e033      	b.n	8003f94 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003f2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	085b      	lsrs	r3, r3, #1
 8003f32:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8003f36:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8003f3a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003f3c:	6852      	ldr	r2, [r2, #4]
 8003f3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8003f46:	e025      	b.n	8003f94 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003f48:	f7fe fb20 	bl	800258c <HAL_RCC_GetSysClockFreq>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	005a      	lsls	r2, r3, #1
 8003f50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	085b      	lsrs	r3, r3, #1
 8003f56:	441a      	add	r2, r3
 8003f58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8003f64:	e016      	b.n	8003f94 <UART_SetConfig+0x5f0>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003f66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	085b      	lsrs	r3, r3, #1
 8003f6c:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003f70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8003f7c:	e00a      	b.n	8003f94 <UART_SetConfig+0x5f0>
 8003f7e:	bf00      	nop
 8003f80:	40008000 	.word	0x40008000
 8003f84:	00f42400 	.word	0x00f42400
 8003f88:	f4240000 	.word	0xf4240000
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
        break;
 8003f92:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f96:	2b0f      	cmp	r3, #15
 8003f98:	d91a      	bls.n	8003fd0 <UART_SetConfig+0x62c>
 8003f9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fa0:	d216      	bcs.n	8003fd0 <UART_SetConfig+0x62c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003fa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	f023 030f 	bic.w	r3, r3, #15
 8003faa:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003fae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fb0:	085b      	lsrs	r3, r3, #1
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	f003 0307 	and.w	r3, r3, #7
 8003fb8:	b29a      	uxth	r2, r3
 8003fba:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
      huart->Instance->BRR = brrtemp;
 8003fc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 8003fcc:	60da      	str	r2, [r3, #12]
 8003fce:	e074      	b.n	80040ba <UART_SetConfig+0x716>
    }
    else
    {
      ret = HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8003fd6:	e070      	b.n	80040ba <UART_SetConfig+0x716>
    }
  }
  else
  {
    switch (clocksource)
 8003fd8:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8003fdc:	2b08      	cmp	r3, #8
 8003fde:	d859      	bhi.n	8004094 <UART_SetConfig+0x6f0>
 8003fe0:	a201      	add	r2, pc, #4	; (adr r2, 8003fe8 <UART_SetConfig+0x644>)
 8003fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fe6:	bf00      	nop
 8003fe8:	0800400d 	.word	0x0800400d
 8003fec:	08004029 	.word	0x08004029
 8003ff0:	08004045 	.word	0x08004045
 8003ff4:	08004095 	.word	0x08004095
 8003ff8:	08004061 	.word	0x08004061
 8003ffc:	08004095 	.word	0x08004095
 8004000:	08004095 	.word	0x08004095
 8004004:	08004095 	.word	0x08004095
 8004008:	0800407d 	.word	0x0800407d
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800400c:	f7fe fb56 	bl	80026bc <HAL_RCC_GetPCLK1Freq>
 8004010:	4602      	mov	r2, r0
 8004012:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	085b      	lsrs	r3, r3, #1
 8004018:	441a      	add	r2, r3
 800401a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004022:	b29b      	uxth	r3, r3
 8004024:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8004026:	e039      	b.n	800409c <UART_SetConfig+0x6f8>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004028:	f7fe fb5e 	bl	80026e8 <HAL_RCC_GetPCLK2Freq>
 800402c:	4602      	mov	r2, r0
 800402e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	085b      	lsrs	r3, r3, #1
 8004034:	441a      	add	r2, r3
 8004036:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	fbb2 f3f3 	udiv	r3, r2, r3
 800403e:	b29b      	uxth	r3, r3
 8004040:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8004042:	e02b      	b.n	800409c <UART_SetConfig+0x6f8>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004044:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	085b      	lsrs	r3, r3, #1
 800404a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800404e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004052:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004054:	6852      	ldr	r2, [r2, #4]
 8004056:	fbb3 f3f2 	udiv	r3, r3, r2
 800405a:	b29b      	uxth	r3, r3
 800405c:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 800405e:	e01d      	b.n	800409c <UART_SetConfig+0x6f8>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004060:	f7fe fa94 	bl	800258c <HAL_RCC_GetSysClockFreq>
 8004064:	4602      	mov	r2, r0
 8004066:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	085b      	lsrs	r3, r3, #1
 800406c:	441a      	add	r2, r3
 800406e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	fbb2 f3f3 	udiv	r3, r2, r3
 8004076:	b29b      	uxth	r3, r3
 8004078:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 800407a:	e00f      	b.n	800409c <UART_SetConfig+0x6f8>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800407c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	085b      	lsrs	r3, r3, #1
 8004082:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004086:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	fbb2 f3f3 	udiv	r3, r2, r3
 800408e:	b29b      	uxth	r3, r3
 8004090:	66fb      	str	r3, [r7, #108]	; 0x6c
#endif /* USART_PRESC_PRESCALER */
        break;
 8004092:	e003      	b.n	800409c <UART_SetConfig+0x6f8>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
        break;
 800409a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800409c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800409e:	2b0f      	cmp	r3, #15
 80040a0:	d908      	bls.n	80040b4 <UART_SetConfig+0x710>
 80040a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040a8:	d204      	bcs.n	80040b4 <UART_SetConfig+0x710>
    {
      huart->Instance->BRR = usartdiv;
 80040aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80040b0:	60da      	str	r2, [r3, #12]
 80040b2:	e002      	b.n	80040ba <UART_SetConfig+0x716>
    }
    else
    {
      ret = HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80040ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040bc:	2200      	movs	r2, #0
 80040be:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80040c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040c2:	2200      	movs	r2, #0
 80040c4:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80040c6:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3778      	adds	r7, #120	; 0x78
 80040ce:	46bd      	mov	sp, r7
 80040d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080040d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e0:	f003 0301 	and.w	r3, r3, #1
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00a      	beq.n	80040fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	430a      	orrs	r2, r1
 80040fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00a      	beq.n	8004120 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	430a      	orrs	r2, r1
 800411e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004124:	f003 0304 	and.w	r3, r3, #4
 8004128:	2b00      	cmp	r3, #0
 800412a:	d00a      	beq.n	8004142 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	430a      	orrs	r2, r1
 8004140:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004146:	f003 0308 	and.w	r3, r3, #8
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00a      	beq.n	8004164 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	430a      	orrs	r2, r1
 8004162:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004168:	f003 0310 	and.w	r3, r3, #16
 800416c:	2b00      	cmp	r3, #0
 800416e:	d00a      	beq.n	8004186 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	430a      	orrs	r2, r1
 8004184:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418a:	f003 0320 	and.w	r3, r3, #32
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00a      	beq.n	80041a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	430a      	orrs	r2, r1
 80041a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d01a      	beq.n	80041ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	430a      	orrs	r2, r1
 80041c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041d2:	d10a      	bne.n	80041ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	430a      	orrs	r2, r1
 80041e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d00a      	beq.n	800420c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	430a      	orrs	r2, r1
 800420a:	605a      	str	r2, [r3, #4]
  }
}
 800420c:	bf00      	nop
 800420e:	370c      	adds	r7, #12
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b086      	sub	sp, #24
 800421c:	af02      	add	r7, sp, #8
 800421e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004226:	f7fd f9d9 	bl	80015dc <HAL_GetTick>
 800422a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0308 	and.w	r3, r3, #8
 8004236:	2b08      	cmp	r3, #8
 8004238:	d10e      	bne.n	8004258 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800423a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800423e:	9300      	str	r3, [sp, #0]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2200      	movs	r2, #0
 8004244:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f000 f82a 	bl	80042a2 <UART_WaitOnFlagUntilTimeout>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d001      	beq.n	8004258 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e020      	b.n	800429a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0304 	and.w	r3, r3, #4
 8004262:	2b04      	cmp	r3, #4
 8004264:	d10e      	bne.n	8004284 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004266:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800426a:	9300      	str	r3, [sp, #0]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2200      	movs	r2, #0
 8004270:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f000 f814 	bl	80042a2 <UART_WaitOnFlagUntilTimeout>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d001      	beq.n	8004284 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004280:	2303      	movs	r3, #3
 8004282:	e00a      	b.n	800429a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2220      	movs	r2, #32
 8004288:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2220      	movs	r2, #32
 800428e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3710      	adds	r7, #16
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b084      	sub	sp, #16
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	60f8      	str	r0, [r7, #12]
 80042aa:	60b9      	str	r1, [r7, #8]
 80042ac:	603b      	str	r3, [r7, #0]
 80042ae:	4613      	mov	r3, r2
 80042b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042b2:	e02a      	b.n	800430a <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ba:	d026      	beq.n	800430a <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042bc:	f7fd f98e 	bl	80015dc <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	69ba      	ldr	r2, [r7, #24]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d302      	bcc.n	80042d2 <UART_WaitOnFlagUntilTimeout+0x30>
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d11b      	bne.n	800430a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80042e0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	689a      	ldr	r2, [r3, #8]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f022 0201 	bic.w	r2, r2, #1
 80042f0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2220      	movs	r2, #32
 80042f6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2220      	movs	r2, #32
 80042fc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e00f      	b.n	800432a <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	69da      	ldr	r2, [r3, #28]
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	4013      	ands	r3, r2
 8004314:	68ba      	ldr	r2, [r7, #8]
 8004316:	429a      	cmp	r2, r3
 8004318:	bf0c      	ite	eq
 800431a:	2301      	moveq	r3, #1
 800431c:	2300      	movne	r3, #0
 800431e:	b2db      	uxtb	r3, r3
 8004320:	461a      	mov	r2, r3
 8004322:	79fb      	ldrb	r3, [r7, #7]
 8004324:	429a      	cmp	r2, r3
 8004326:	d0c5      	beq.n	80042b4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3710      	adds	r7, #16
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
	...

08004334 <findslot>:
 8004334:	4b0a      	ldr	r3, [pc, #40]	; (8004360 <findslot+0x2c>)
 8004336:	b510      	push	{r4, lr}
 8004338:	4604      	mov	r4, r0
 800433a:	6818      	ldr	r0, [r3, #0]
 800433c:	b118      	cbz	r0, 8004346 <findslot+0x12>
 800433e:	6983      	ldr	r3, [r0, #24]
 8004340:	b90b      	cbnz	r3, 8004346 <findslot+0x12>
 8004342:	f000 f9a1 	bl	8004688 <__sinit>
 8004346:	2c13      	cmp	r4, #19
 8004348:	d807      	bhi.n	800435a <findslot+0x26>
 800434a:	4806      	ldr	r0, [pc, #24]	; (8004364 <findslot+0x30>)
 800434c:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8004350:	3201      	adds	r2, #1
 8004352:	d002      	beq.n	800435a <findslot+0x26>
 8004354:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8004358:	bd10      	pop	{r4, pc}
 800435a:	2000      	movs	r0, #0
 800435c:	e7fc      	b.n	8004358 <findslot+0x24>
 800435e:	bf00      	nop
 8004360:	2000000c 	.word	0x2000000c
 8004364:	200002a4 	.word	0x200002a4

08004368 <error>:
 8004368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800436a:	4604      	mov	r4, r0
 800436c:	f000 f92e 	bl	80045cc <__errno>
 8004370:	2613      	movs	r6, #19
 8004372:	4605      	mov	r5, r0
 8004374:	2700      	movs	r7, #0
 8004376:	4630      	mov	r0, r6
 8004378:	4639      	mov	r1, r7
 800437a:	beab      	bkpt	0x00ab
 800437c:	4606      	mov	r6, r0
 800437e:	602e      	str	r6, [r5, #0]
 8004380:	4620      	mov	r0, r4
 8004382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004384 <checkerror>:
 8004384:	1c43      	adds	r3, r0, #1
 8004386:	d101      	bne.n	800438c <checkerror+0x8>
 8004388:	f7ff bfee 	b.w	8004368 <error>
 800438c:	4770      	bx	lr

0800438e <_swiread>:
 800438e:	b530      	push	{r4, r5, lr}
 8004390:	b085      	sub	sp, #20
 8004392:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8004396:	9203      	str	r2, [sp, #12]
 8004398:	2406      	movs	r4, #6
 800439a:	ad01      	add	r5, sp, #4
 800439c:	4620      	mov	r0, r4
 800439e:	4629      	mov	r1, r5
 80043a0:	beab      	bkpt	0x00ab
 80043a2:	4604      	mov	r4, r0
 80043a4:	4620      	mov	r0, r4
 80043a6:	f7ff ffed 	bl	8004384 <checkerror>
 80043aa:	b005      	add	sp, #20
 80043ac:	bd30      	pop	{r4, r5, pc}

080043ae <_read>:
 80043ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80043b0:	4615      	mov	r5, r2
 80043b2:	9101      	str	r1, [sp, #4]
 80043b4:	f7ff ffbe 	bl	8004334 <findslot>
 80043b8:	9901      	ldr	r1, [sp, #4]
 80043ba:	4604      	mov	r4, r0
 80043bc:	b938      	cbnz	r0, 80043ce <_read+0x20>
 80043be:	f000 f905 	bl	80045cc <__errno>
 80043c2:	2309      	movs	r3, #9
 80043c4:	6003      	str	r3, [r0, #0]
 80043c6:	f04f 30ff 	mov.w	r0, #4294967295
 80043ca:	b003      	add	sp, #12
 80043cc:	bd30      	pop	{r4, r5, pc}
 80043ce:	6800      	ldr	r0, [r0, #0]
 80043d0:	462a      	mov	r2, r5
 80043d2:	f7ff ffdc 	bl	800438e <_swiread>
 80043d6:	1c43      	adds	r3, r0, #1
 80043d8:	d0f7      	beq.n	80043ca <_read+0x1c>
 80043da:	6863      	ldr	r3, [r4, #4]
 80043dc:	1a2a      	subs	r2, r5, r0
 80043de:	4413      	add	r3, r2
 80043e0:	6063      	str	r3, [r4, #4]
 80043e2:	4610      	mov	r0, r2
 80043e4:	e7f1      	b.n	80043ca <_read+0x1c>

080043e6 <_swilseek>:
 80043e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80043e8:	460c      	mov	r4, r1
 80043ea:	4616      	mov	r6, r2
 80043ec:	f7ff ffa2 	bl	8004334 <findslot>
 80043f0:	4605      	mov	r5, r0
 80043f2:	b940      	cbnz	r0, 8004406 <_swilseek+0x20>
 80043f4:	f000 f8ea 	bl	80045cc <__errno>
 80043f8:	2309      	movs	r3, #9
 80043fa:	6003      	str	r3, [r0, #0]
 80043fc:	f04f 34ff 	mov.w	r4, #4294967295
 8004400:	4620      	mov	r0, r4
 8004402:	b003      	add	sp, #12
 8004404:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004406:	2e02      	cmp	r6, #2
 8004408:	d903      	bls.n	8004412 <_swilseek+0x2c>
 800440a:	f000 f8df 	bl	80045cc <__errno>
 800440e:	2316      	movs	r3, #22
 8004410:	e7f3      	b.n	80043fa <_swilseek+0x14>
 8004412:	2e01      	cmp	r6, #1
 8004414:	d112      	bne.n	800443c <_swilseek+0x56>
 8004416:	6843      	ldr	r3, [r0, #4]
 8004418:	18e4      	adds	r4, r4, r3
 800441a:	d4f6      	bmi.n	800440a <_swilseek+0x24>
 800441c:	682b      	ldr	r3, [r5, #0]
 800441e:	260a      	movs	r6, #10
 8004420:	e9cd 3400 	strd	r3, r4, [sp]
 8004424:	466f      	mov	r7, sp
 8004426:	4630      	mov	r0, r6
 8004428:	4639      	mov	r1, r7
 800442a:	beab      	bkpt	0x00ab
 800442c:	4606      	mov	r6, r0
 800442e:	4630      	mov	r0, r6
 8004430:	f7ff ffa8 	bl	8004384 <checkerror>
 8004434:	2800      	cmp	r0, #0
 8004436:	dbe1      	blt.n	80043fc <_swilseek+0x16>
 8004438:	606c      	str	r4, [r5, #4]
 800443a:	e7e1      	b.n	8004400 <_swilseek+0x1a>
 800443c:	2e02      	cmp	r6, #2
 800443e:	d1ed      	bne.n	800441c <_swilseek+0x36>
 8004440:	6803      	ldr	r3, [r0, #0]
 8004442:	9300      	str	r3, [sp, #0]
 8004444:	260c      	movs	r6, #12
 8004446:	466f      	mov	r7, sp
 8004448:	4630      	mov	r0, r6
 800444a:	4639      	mov	r1, r7
 800444c:	beab      	bkpt	0x00ab
 800444e:	4606      	mov	r6, r0
 8004450:	4630      	mov	r0, r6
 8004452:	f7ff ff97 	bl	8004384 <checkerror>
 8004456:	1c43      	adds	r3, r0, #1
 8004458:	d0d0      	beq.n	80043fc <_swilseek+0x16>
 800445a:	4404      	add	r4, r0
 800445c:	e7de      	b.n	800441c <_swilseek+0x36>

0800445e <_lseek>:
 800445e:	f7ff bfc2 	b.w	80043e6 <_swilseek>

08004462 <_swiwrite>:
 8004462:	b530      	push	{r4, r5, lr}
 8004464:	b085      	sub	sp, #20
 8004466:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800446a:	9203      	str	r2, [sp, #12]
 800446c:	2405      	movs	r4, #5
 800446e:	ad01      	add	r5, sp, #4
 8004470:	4620      	mov	r0, r4
 8004472:	4629      	mov	r1, r5
 8004474:	beab      	bkpt	0x00ab
 8004476:	4604      	mov	r4, r0
 8004478:	4620      	mov	r0, r4
 800447a:	f7ff ff83 	bl	8004384 <checkerror>
 800447e:	b005      	add	sp, #20
 8004480:	bd30      	pop	{r4, r5, pc}

08004482 <_write>:
 8004482:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004484:	4615      	mov	r5, r2
 8004486:	9101      	str	r1, [sp, #4]
 8004488:	f7ff ff54 	bl	8004334 <findslot>
 800448c:	9901      	ldr	r1, [sp, #4]
 800448e:	4604      	mov	r4, r0
 8004490:	b930      	cbnz	r0, 80044a0 <_write+0x1e>
 8004492:	f000 f89b 	bl	80045cc <__errno>
 8004496:	2309      	movs	r3, #9
 8004498:	6003      	str	r3, [r0, #0]
 800449a:	f04f 30ff 	mov.w	r0, #4294967295
 800449e:	e012      	b.n	80044c6 <_write+0x44>
 80044a0:	6800      	ldr	r0, [r0, #0]
 80044a2:	462a      	mov	r2, r5
 80044a4:	f7ff ffdd 	bl	8004462 <_swiwrite>
 80044a8:	2800      	cmp	r0, #0
 80044aa:	dbf6      	blt.n	800449a <_write+0x18>
 80044ac:	6862      	ldr	r2, [r4, #4]
 80044ae:	1a2b      	subs	r3, r5, r0
 80044b0:	441a      	add	r2, r3
 80044b2:	42a8      	cmp	r0, r5
 80044b4:	6062      	str	r2, [r4, #4]
 80044b6:	d105      	bne.n	80044c4 <_write+0x42>
 80044b8:	2000      	movs	r0, #0
 80044ba:	b003      	add	sp, #12
 80044bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80044c0:	f7ff bf52 	b.w	8004368 <error>
 80044c4:	4618      	mov	r0, r3
 80044c6:	b003      	add	sp, #12
 80044c8:	bd30      	pop	{r4, r5, pc}

080044ca <_swiclose>:
 80044ca:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80044cc:	2402      	movs	r4, #2
 80044ce:	9001      	str	r0, [sp, #4]
 80044d0:	ad01      	add	r5, sp, #4
 80044d2:	4620      	mov	r0, r4
 80044d4:	4629      	mov	r1, r5
 80044d6:	beab      	bkpt	0x00ab
 80044d8:	4604      	mov	r4, r0
 80044da:	4620      	mov	r0, r4
 80044dc:	f7ff ff52 	bl	8004384 <checkerror>
 80044e0:	b003      	add	sp, #12
 80044e2:	bd30      	pop	{r4, r5, pc}

080044e4 <_close>:
 80044e4:	b538      	push	{r3, r4, r5, lr}
 80044e6:	4605      	mov	r5, r0
 80044e8:	f7ff ff24 	bl	8004334 <findslot>
 80044ec:	4604      	mov	r4, r0
 80044ee:	b930      	cbnz	r0, 80044fe <_close+0x1a>
 80044f0:	f000 f86c 	bl	80045cc <__errno>
 80044f4:	2309      	movs	r3, #9
 80044f6:	6003      	str	r3, [r0, #0]
 80044f8:	f04f 30ff 	mov.w	r0, #4294967295
 80044fc:	bd38      	pop	{r3, r4, r5, pc}
 80044fe:	3d01      	subs	r5, #1
 8004500:	2d01      	cmp	r5, #1
 8004502:	d809      	bhi.n	8004518 <_close+0x34>
 8004504:	4b09      	ldr	r3, [pc, #36]	; (800452c <_close+0x48>)
 8004506:	689a      	ldr	r2, [r3, #8]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	429a      	cmp	r2, r3
 800450c:	d104      	bne.n	8004518 <_close+0x34>
 800450e:	f04f 33ff 	mov.w	r3, #4294967295
 8004512:	6003      	str	r3, [r0, #0]
 8004514:	2000      	movs	r0, #0
 8004516:	e7f1      	b.n	80044fc <_close+0x18>
 8004518:	6820      	ldr	r0, [r4, #0]
 800451a:	f7ff ffd6 	bl	80044ca <_swiclose>
 800451e:	2800      	cmp	r0, #0
 8004520:	d1ec      	bne.n	80044fc <_close+0x18>
 8004522:	f04f 33ff 	mov.w	r3, #4294967295
 8004526:	6023      	str	r3, [r4, #0]
 8004528:	e7e8      	b.n	80044fc <_close+0x18>
 800452a:	bf00      	nop
 800452c:	200002a4 	.word	0x200002a4

08004530 <_getpid>:
 8004530:	2001      	movs	r0, #1
 8004532:	4770      	bx	lr

08004534 <_swistat>:
 8004534:	b570      	push	{r4, r5, r6, lr}
 8004536:	460c      	mov	r4, r1
 8004538:	f7ff fefc 	bl	8004334 <findslot>
 800453c:	4605      	mov	r5, r0
 800453e:	b930      	cbnz	r0, 800454e <_swistat+0x1a>
 8004540:	f000 f844 	bl	80045cc <__errno>
 8004544:	2309      	movs	r3, #9
 8004546:	6003      	str	r3, [r0, #0]
 8004548:	f04f 30ff 	mov.w	r0, #4294967295
 800454c:	bd70      	pop	{r4, r5, r6, pc}
 800454e:	6863      	ldr	r3, [r4, #4]
 8004550:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004554:	6063      	str	r3, [r4, #4]
 8004556:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800455a:	64a3      	str	r3, [r4, #72]	; 0x48
 800455c:	260c      	movs	r6, #12
 800455e:	4630      	mov	r0, r6
 8004560:	4629      	mov	r1, r5
 8004562:	beab      	bkpt	0x00ab
 8004564:	4605      	mov	r5, r0
 8004566:	4628      	mov	r0, r5
 8004568:	f7ff ff0c 	bl	8004384 <checkerror>
 800456c:	1c43      	adds	r3, r0, #1
 800456e:	bf1c      	itt	ne
 8004570:	6120      	strne	r0, [r4, #16]
 8004572:	2000      	movne	r0, #0
 8004574:	e7ea      	b.n	800454c <_swistat+0x18>

08004576 <_fstat>:
 8004576:	460b      	mov	r3, r1
 8004578:	b510      	push	{r4, lr}
 800457a:	2100      	movs	r1, #0
 800457c:	4604      	mov	r4, r0
 800457e:	2258      	movs	r2, #88	; 0x58
 8004580:	4618      	mov	r0, r3
 8004582:	f000 f95d 	bl	8004840 <memset>
 8004586:	4601      	mov	r1, r0
 8004588:	4620      	mov	r0, r4
 800458a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800458e:	f7ff bfd1 	b.w	8004534 <_swistat>

08004592 <_isatty>:
 8004592:	b570      	push	{r4, r5, r6, lr}
 8004594:	f7ff fece 	bl	8004334 <findslot>
 8004598:	2509      	movs	r5, #9
 800459a:	4604      	mov	r4, r0
 800459c:	b920      	cbnz	r0, 80045a8 <_isatty+0x16>
 800459e:	f000 f815 	bl	80045cc <__errno>
 80045a2:	6005      	str	r5, [r0, #0]
 80045a4:	4620      	mov	r0, r4
 80045a6:	bd70      	pop	{r4, r5, r6, pc}
 80045a8:	4628      	mov	r0, r5
 80045aa:	4621      	mov	r1, r4
 80045ac:	beab      	bkpt	0x00ab
 80045ae:	4604      	mov	r4, r0
 80045b0:	2c01      	cmp	r4, #1
 80045b2:	d0f7      	beq.n	80045a4 <_isatty+0x12>
 80045b4:	f000 f80a 	bl	80045cc <__errno>
 80045b8:	2400      	movs	r4, #0
 80045ba:	4605      	mov	r5, r0
 80045bc:	2613      	movs	r6, #19
 80045be:	4630      	mov	r0, r6
 80045c0:	4621      	mov	r1, r4
 80045c2:	beab      	bkpt	0x00ab
 80045c4:	4606      	mov	r6, r0
 80045c6:	602e      	str	r6, [r5, #0]
 80045c8:	e7ec      	b.n	80045a4 <_isatty+0x12>
	...

080045cc <__errno>:
 80045cc:	4b01      	ldr	r3, [pc, #4]	; (80045d4 <__errno+0x8>)
 80045ce:	6818      	ldr	r0, [r3, #0]
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop
 80045d4:	2000000c 	.word	0x2000000c

080045d8 <std>:
 80045d8:	2300      	movs	r3, #0
 80045da:	b510      	push	{r4, lr}
 80045dc:	4604      	mov	r4, r0
 80045de:	e9c0 3300 	strd	r3, r3, [r0]
 80045e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80045e6:	6083      	str	r3, [r0, #8]
 80045e8:	8181      	strh	r1, [r0, #12]
 80045ea:	6643      	str	r3, [r0, #100]	; 0x64
 80045ec:	81c2      	strh	r2, [r0, #14]
 80045ee:	6183      	str	r3, [r0, #24]
 80045f0:	4619      	mov	r1, r3
 80045f2:	2208      	movs	r2, #8
 80045f4:	305c      	adds	r0, #92	; 0x5c
 80045f6:	f000 f923 	bl	8004840 <memset>
 80045fa:	4b05      	ldr	r3, [pc, #20]	; (8004610 <std+0x38>)
 80045fc:	6263      	str	r3, [r4, #36]	; 0x24
 80045fe:	4b05      	ldr	r3, [pc, #20]	; (8004614 <std+0x3c>)
 8004600:	62a3      	str	r3, [r4, #40]	; 0x28
 8004602:	4b05      	ldr	r3, [pc, #20]	; (8004618 <std+0x40>)
 8004604:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004606:	4b05      	ldr	r3, [pc, #20]	; (800461c <std+0x44>)
 8004608:	6224      	str	r4, [r4, #32]
 800460a:	6323      	str	r3, [r4, #48]	; 0x30
 800460c:	bd10      	pop	{r4, pc}
 800460e:	bf00      	nop
 8004610:	08005345 	.word	0x08005345
 8004614:	08005367 	.word	0x08005367
 8004618:	0800539f 	.word	0x0800539f
 800461c:	080053c3 	.word	0x080053c3

08004620 <_cleanup_r>:
 8004620:	4901      	ldr	r1, [pc, #4]	; (8004628 <_cleanup_r+0x8>)
 8004622:	f000 b8af 	b.w	8004784 <_fwalk_reent>
 8004626:	bf00      	nop
 8004628:	080063d1 	.word	0x080063d1

0800462c <__sfmoreglue>:
 800462c:	b570      	push	{r4, r5, r6, lr}
 800462e:	2268      	movs	r2, #104	; 0x68
 8004630:	1e4d      	subs	r5, r1, #1
 8004632:	4355      	muls	r5, r2
 8004634:	460e      	mov	r6, r1
 8004636:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800463a:	f000 f975 	bl	8004928 <_malloc_r>
 800463e:	4604      	mov	r4, r0
 8004640:	b140      	cbz	r0, 8004654 <__sfmoreglue+0x28>
 8004642:	2100      	movs	r1, #0
 8004644:	e9c0 1600 	strd	r1, r6, [r0]
 8004648:	300c      	adds	r0, #12
 800464a:	60a0      	str	r0, [r4, #8]
 800464c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004650:	f000 f8f6 	bl	8004840 <memset>
 8004654:	4620      	mov	r0, r4
 8004656:	bd70      	pop	{r4, r5, r6, pc}

08004658 <__sfp_lock_acquire>:
 8004658:	4801      	ldr	r0, [pc, #4]	; (8004660 <__sfp_lock_acquire+0x8>)
 800465a:	f000 b8d8 	b.w	800480e <__retarget_lock_acquire_recursive>
 800465e:	bf00      	nop
 8004660:	20000345 	.word	0x20000345

08004664 <__sfp_lock_release>:
 8004664:	4801      	ldr	r0, [pc, #4]	; (800466c <__sfp_lock_release+0x8>)
 8004666:	f000 b8d3 	b.w	8004810 <__retarget_lock_release_recursive>
 800466a:	bf00      	nop
 800466c:	20000345 	.word	0x20000345

08004670 <__sinit_lock_acquire>:
 8004670:	4801      	ldr	r0, [pc, #4]	; (8004678 <__sinit_lock_acquire+0x8>)
 8004672:	f000 b8cc 	b.w	800480e <__retarget_lock_acquire_recursive>
 8004676:	bf00      	nop
 8004678:	20000346 	.word	0x20000346

0800467c <__sinit_lock_release>:
 800467c:	4801      	ldr	r0, [pc, #4]	; (8004684 <__sinit_lock_release+0x8>)
 800467e:	f000 b8c7 	b.w	8004810 <__retarget_lock_release_recursive>
 8004682:	bf00      	nop
 8004684:	20000346 	.word	0x20000346

08004688 <__sinit>:
 8004688:	b510      	push	{r4, lr}
 800468a:	4604      	mov	r4, r0
 800468c:	f7ff fff0 	bl	8004670 <__sinit_lock_acquire>
 8004690:	69a3      	ldr	r3, [r4, #24]
 8004692:	b11b      	cbz	r3, 800469c <__sinit+0x14>
 8004694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004698:	f7ff bff0 	b.w	800467c <__sinit_lock_release>
 800469c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80046a0:	6523      	str	r3, [r4, #80]	; 0x50
 80046a2:	4b13      	ldr	r3, [pc, #76]	; (80046f0 <__sinit+0x68>)
 80046a4:	4a13      	ldr	r2, [pc, #76]	; (80046f4 <__sinit+0x6c>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80046aa:	42a3      	cmp	r3, r4
 80046ac:	bf04      	itt	eq
 80046ae:	2301      	moveq	r3, #1
 80046b0:	61a3      	streq	r3, [r4, #24]
 80046b2:	4620      	mov	r0, r4
 80046b4:	f000 f820 	bl	80046f8 <__sfp>
 80046b8:	6060      	str	r0, [r4, #4]
 80046ba:	4620      	mov	r0, r4
 80046bc:	f000 f81c 	bl	80046f8 <__sfp>
 80046c0:	60a0      	str	r0, [r4, #8]
 80046c2:	4620      	mov	r0, r4
 80046c4:	f000 f818 	bl	80046f8 <__sfp>
 80046c8:	2200      	movs	r2, #0
 80046ca:	60e0      	str	r0, [r4, #12]
 80046cc:	2104      	movs	r1, #4
 80046ce:	6860      	ldr	r0, [r4, #4]
 80046d0:	f7ff ff82 	bl	80045d8 <std>
 80046d4:	68a0      	ldr	r0, [r4, #8]
 80046d6:	2201      	movs	r2, #1
 80046d8:	2109      	movs	r1, #9
 80046da:	f7ff ff7d 	bl	80045d8 <std>
 80046de:	68e0      	ldr	r0, [r4, #12]
 80046e0:	2202      	movs	r2, #2
 80046e2:	2112      	movs	r1, #18
 80046e4:	f7ff ff78 	bl	80045d8 <std>
 80046e8:	2301      	movs	r3, #1
 80046ea:	61a3      	str	r3, [r4, #24]
 80046ec:	e7d2      	b.n	8004694 <__sinit+0xc>
 80046ee:	bf00      	nop
 80046f0:	08007508 	.word	0x08007508
 80046f4:	08004621 	.word	0x08004621

080046f8 <__sfp>:
 80046f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046fa:	4607      	mov	r7, r0
 80046fc:	f7ff ffac 	bl	8004658 <__sfp_lock_acquire>
 8004700:	4b1e      	ldr	r3, [pc, #120]	; (800477c <__sfp+0x84>)
 8004702:	681e      	ldr	r6, [r3, #0]
 8004704:	69b3      	ldr	r3, [r6, #24]
 8004706:	b913      	cbnz	r3, 800470e <__sfp+0x16>
 8004708:	4630      	mov	r0, r6
 800470a:	f7ff ffbd 	bl	8004688 <__sinit>
 800470e:	3648      	adds	r6, #72	; 0x48
 8004710:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004714:	3b01      	subs	r3, #1
 8004716:	d503      	bpl.n	8004720 <__sfp+0x28>
 8004718:	6833      	ldr	r3, [r6, #0]
 800471a:	b30b      	cbz	r3, 8004760 <__sfp+0x68>
 800471c:	6836      	ldr	r6, [r6, #0]
 800471e:	e7f7      	b.n	8004710 <__sfp+0x18>
 8004720:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004724:	b9d5      	cbnz	r5, 800475c <__sfp+0x64>
 8004726:	4b16      	ldr	r3, [pc, #88]	; (8004780 <__sfp+0x88>)
 8004728:	60e3      	str	r3, [r4, #12]
 800472a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800472e:	6665      	str	r5, [r4, #100]	; 0x64
 8004730:	f000 f86c 	bl	800480c <__retarget_lock_init_recursive>
 8004734:	f7ff ff96 	bl	8004664 <__sfp_lock_release>
 8004738:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800473c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004740:	6025      	str	r5, [r4, #0]
 8004742:	61a5      	str	r5, [r4, #24]
 8004744:	2208      	movs	r2, #8
 8004746:	4629      	mov	r1, r5
 8004748:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800474c:	f000 f878 	bl	8004840 <memset>
 8004750:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004754:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004758:	4620      	mov	r0, r4
 800475a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800475c:	3468      	adds	r4, #104	; 0x68
 800475e:	e7d9      	b.n	8004714 <__sfp+0x1c>
 8004760:	2104      	movs	r1, #4
 8004762:	4638      	mov	r0, r7
 8004764:	f7ff ff62 	bl	800462c <__sfmoreglue>
 8004768:	4604      	mov	r4, r0
 800476a:	6030      	str	r0, [r6, #0]
 800476c:	2800      	cmp	r0, #0
 800476e:	d1d5      	bne.n	800471c <__sfp+0x24>
 8004770:	f7ff ff78 	bl	8004664 <__sfp_lock_release>
 8004774:	230c      	movs	r3, #12
 8004776:	603b      	str	r3, [r7, #0]
 8004778:	e7ee      	b.n	8004758 <__sfp+0x60>
 800477a:	bf00      	nop
 800477c:	08007508 	.word	0x08007508
 8004780:	ffff0001 	.word	0xffff0001

08004784 <_fwalk_reent>:
 8004784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004788:	4606      	mov	r6, r0
 800478a:	4688      	mov	r8, r1
 800478c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004790:	2700      	movs	r7, #0
 8004792:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004796:	f1b9 0901 	subs.w	r9, r9, #1
 800479a:	d505      	bpl.n	80047a8 <_fwalk_reent+0x24>
 800479c:	6824      	ldr	r4, [r4, #0]
 800479e:	2c00      	cmp	r4, #0
 80047a0:	d1f7      	bne.n	8004792 <_fwalk_reent+0xe>
 80047a2:	4638      	mov	r0, r7
 80047a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047a8:	89ab      	ldrh	r3, [r5, #12]
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d907      	bls.n	80047be <_fwalk_reent+0x3a>
 80047ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80047b2:	3301      	adds	r3, #1
 80047b4:	d003      	beq.n	80047be <_fwalk_reent+0x3a>
 80047b6:	4629      	mov	r1, r5
 80047b8:	4630      	mov	r0, r6
 80047ba:	47c0      	blx	r8
 80047bc:	4307      	orrs	r7, r0
 80047be:	3568      	adds	r5, #104	; 0x68
 80047c0:	e7e9      	b.n	8004796 <_fwalk_reent+0x12>
	...

080047c4 <__libc_init_array>:
 80047c4:	b570      	push	{r4, r5, r6, lr}
 80047c6:	4d0d      	ldr	r5, [pc, #52]	; (80047fc <__libc_init_array+0x38>)
 80047c8:	4c0d      	ldr	r4, [pc, #52]	; (8004800 <__libc_init_array+0x3c>)
 80047ca:	1b64      	subs	r4, r4, r5
 80047cc:	10a4      	asrs	r4, r4, #2
 80047ce:	2600      	movs	r6, #0
 80047d0:	42a6      	cmp	r6, r4
 80047d2:	d109      	bne.n	80047e8 <__libc_init_array+0x24>
 80047d4:	4d0b      	ldr	r5, [pc, #44]	; (8004804 <__libc_init_array+0x40>)
 80047d6:	4c0c      	ldr	r4, [pc, #48]	; (8004808 <__libc_init_array+0x44>)
 80047d8:	f002 fe1a 	bl	8007410 <_init>
 80047dc:	1b64      	subs	r4, r4, r5
 80047de:	10a4      	asrs	r4, r4, #2
 80047e0:	2600      	movs	r6, #0
 80047e2:	42a6      	cmp	r6, r4
 80047e4:	d105      	bne.n	80047f2 <__libc_init_array+0x2e>
 80047e6:	bd70      	pop	{r4, r5, r6, pc}
 80047e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80047ec:	4798      	blx	r3
 80047ee:	3601      	adds	r6, #1
 80047f0:	e7ee      	b.n	80047d0 <__libc_init_array+0xc>
 80047f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80047f6:	4798      	blx	r3
 80047f8:	3601      	adds	r6, #1
 80047fa:	e7f2      	b.n	80047e2 <__libc_init_array+0x1e>
 80047fc:	08007888 	.word	0x08007888
 8004800:	08007888 	.word	0x08007888
 8004804:	08007888 	.word	0x08007888
 8004808:	0800788c 	.word	0x0800788c

0800480c <__retarget_lock_init_recursive>:
 800480c:	4770      	bx	lr

0800480e <__retarget_lock_acquire_recursive>:
 800480e:	4770      	bx	lr

08004810 <__retarget_lock_release_recursive>:
 8004810:	4770      	bx	lr
	...

08004814 <malloc>:
 8004814:	4b02      	ldr	r3, [pc, #8]	; (8004820 <malloc+0xc>)
 8004816:	4601      	mov	r1, r0
 8004818:	6818      	ldr	r0, [r3, #0]
 800481a:	f000 b885 	b.w	8004928 <_malloc_r>
 800481e:	bf00      	nop
 8004820:	2000000c 	.word	0x2000000c

08004824 <memcpy>:
 8004824:	440a      	add	r2, r1
 8004826:	4291      	cmp	r1, r2
 8004828:	f100 33ff 	add.w	r3, r0, #4294967295
 800482c:	d100      	bne.n	8004830 <memcpy+0xc>
 800482e:	4770      	bx	lr
 8004830:	b510      	push	{r4, lr}
 8004832:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004836:	f803 4f01 	strb.w	r4, [r3, #1]!
 800483a:	4291      	cmp	r1, r2
 800483c:	d1f9      	bne.n	8004832 <memcpy+0xe>
 800483e:	bd10      	pop	{r4, pc}

08004840 <memset>:
 8004840:	4402      	add	r2, r0
 8004842:	4603      	mov	r3, r0
 8004844:	4293      	cmp	r3, r2
 8004846:	d100      	bne.n	800484a <memset+0xa>
 8004848:	4770      	bx	lr
 800484a:	f803 1b01 	strb.w	r1, [r3], #1
 800484e:	e7f9      	b.n	8004844 <memset+0x4>

08004850 <_free_r>:
 8004850:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004852:	2900      	cmp	r1, #0
 8004854:	d044      	beq.n	80048e0 <_free_r+0x90>
 8004856:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800485a:	9001      	str	r0, [sp, #4]
 800485c:	2b00      	cmp	r3, #0
 800485e:	f1a1 0404 	sub.w	r4, r1, #4
 8004862:	bfb8      	it	lt
 8004864:	18e4      	addlt	r4, r4, r3
 8004866:	f001 fe7d 	bl	8006564 <__malloc_lock>
 800486a:	4a1e      	ldr	r2, [pc, #120]	; (80048e4 <_free_r+0x94>)
 800486c:	9801      	ldr	r0, [sp, #4]
 800486e:	6813      	ldr	r3, [r2, #0]
 8004870:	b933      	cbnz	r3, 8004880 <_free_r+0x30>
 8004872:	6063      	str	r3, [r4, #4]
 8004874:	6014      	str	r4, [r2, #0]
 8004876:	b003      	add	sp, #12
 8004878:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800487c:	f001 be78 	b.w	8006570 <__malloc_unlock>
 8004880:	42a3      	cmp	r3, r4
 8004882:	d908      	bls.n	8004896 <_free_r+0x46>
 8004884:	6825      	ldr	r5, [r4, #0]
 8004886:	1961      	adds	r1, r4, r5
 8004888:	428b      	cmp	r3, r1
 800488a:	bf01      	itttt	eq
 800488c:	6819      	ldreq	r1, [r3, #0]
 800488e:	685b      	ldreq	r3, [r3, #4]
 8004890:	1949      	addeq	r1, r1, r5
 8004892:	6021      	streq	r1, [r4, #0]
 8004894:	e7ed      	b.n	8004872 <_free_r+0x22>
 8004896:	461a      	mov	r2, r3
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	b10b      	cbz	r3, 80048a0 <_free_r+0x50>
 800489c:	42a3      	cmp	r3, r4
 800489e:	d9fa      	bls.n	8004896 <_free_r+0x46>
 80048a0:	6811      	ldr	r1, [r2, #0]
 80048a2:	1855      	adds	r5, r2, r1
 80048a4:	42a5      	cmp	r5, r4
 80048a6:	d10b      	bne.n	80048c0 <_free_r+0x70>
 80048a8:	6824      	ldr	r4, [r4, #0]
 80048aa:	4421      	add	r1, r4
 80048ac:	1854      	adds	r4, r2, r1
 80048ae:	42a3      	cmp	r3, r4
 80048b0:	6011      	str	r1, [r2, #0]
 80048b2:	d1e0      	bne.n	8004876 <_free_r+0x26>
 80048b4:	681c      	ldr	r4, [r3, #0]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	6053      	str	r3, [r2, #4]
 80048ba:	4421      	add	r1, r4
 80048bc:	6011      	str	r1, [r2, #0]
 80048be:	e7da      	b.n	8004876 <_free_r+0x26>
 80048c0:	d902      	bls.n	80048c8 <_free_r+0x78>
 80048c2:	230c      	movs	r3, #12
 80048c4:	6003      	str	r3, [r0, #0]
 80048c6:	e7d6      	b.n	8004876 <_free_r+0x26>
 80048c8:	6825      	ldr	r5, [r4, #0]
 80048ca:	1961      	adds	r1, r4, r5
 80048cc:	428b      	cmp	r3, r1
 80048ce:	bf04      	itt	eq
 80048d0:	6819      	ldreq	r1, [r3, #0]
 80048d2:	685b      	ldreq	r3, [r3, #4]
 80048d4:	6063      	str	r3, [r4, #4]
 80048d6:	bf04      	itt	eq
 80048d8:	1949      	addeq	r1, r1, r5
 80048da:	6021      	streq	r1, [r4, #0]
 80048dc:	6054      	str	r4, [r2, #4]
 80048de:	e7ca      	b.n	8004876 <_free_r+0x26>
 80048e0:	b003      	add	sp, #12
 80048e2:	bd30      	pop	{r4, r5, pc}
 80048e4:	20000348 	.word	0x20000348

080048e8 <sbrk_aligned>:
 80048e8:	b570      	push	{r4, r5, r6, lr}
 80048ea:	4e0e      	ldr	r6, [pc, #56]	; (8004924 <sbrk_aligned+0x3c>)
 80048ec:	460c      	mov	r4, r1
 80048ee:	6831      	ldr	r1, [r6, #0]
 80048f0:	4605      	mov	r5, r0
 80048f2:	b911      	cbnz	r1, 80048fa <sbrk_aligned+0x12>
 80048f4:	f000 fcf6 	bl	80052e4 <_sbrk_r>
 80048f8:	6030      	str	r0, [r6, #0]
 80048fa:	4621      	mov	r1, r4
 80048fc:	4628      	mov	r0, r5
 80048fe:	f000 fcf1 	bl	80052e4 <_sbrk_r>
 8004902:	1c43      	adds	r3, r0, #1
 8004904:	d00a      	beq.n	800491c <sbrk_aligned+0x34>
 8004906:	1cc4      	adds	r4, r0, #3
 8004908:	f024 0403 	bic.w	r4, r4, #3
 800490c:	42a0      	cmp	r0, r4
 800490e:	d007      	beq.n	8004920 <sbrk_aligned+0x38>
 8004910:	1a21      	subs	r1, r4, r0
 8004912:	4628      	mov	r0, r5
 8004914:	f000 fce6 	bl	80052e4 <_sbrk_r>
 8004918:	3001      	adds	r0, #1
 800491a:	d101      	bne.n	8004920 <sbrk_aligned+0x38>
 800491c:	f04f 34ff 	mov.w	r4, #4294967295
 8004920:	4620      	mov	r0, r4
 8004922:	bd70      	pop	{r4, r5, r6, pc}
 8004924:	2000034c 	.word	0x2000034c

08004928 <_malloc_r>:
 8004928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800492c:	1ccd      	adds	r5, r1, #3
 800492e:	f025 0503 	bic.w	r5, r5, #3
 8004932:	3508      	adds	r5, #8
 8004934:	2d0c      	cmp	r5, #12
 8004936:	bf38      	it	cc
 8004938:	250c      	movcc	r5, #12
 800493a:	2d00      	cmp	r5, #0
 800493c:	4607      	mov	r7, r0
 800493e:	db01      	blt.n	8004944 <_malloc_r+0x1c>
 8004940:	42a9      	cmp	r1, r5
 8004942:	d905      	bls.n	8004950 <_malloc_r+0x28>
 8004944:	230c      	movs	r3, #12
 8004946:	603b      	str	r3, [r7, #0]
 8004948:	2600      	movs	r6, #0
 800494a:	4630      	mov	r0, r6
 800494c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004950:	4e2e      	ldr	r6, [pc, #184]	; (8004a0c <_malloc_r+0xe4>)
 8004952:	f001 fe07 	bl	8006564 <__malloc_lock>
 8004956:	6833      	ldr	r3, [r6, #0]
 8004958:	461c      	mov	r4, r3
 800495a:	bb34      	cbnz	r4, 80049aa <_malloc_r+0x82>
 800495c:	4629      	mov	r1, r5
 800495e:	4638      	mov	r0, r7
 8004960:	f7ff ffc2 	bl	80048e8 <sbrk_aligned>
 8004964:	1c43      	adds	r3, r0, #1
 8004966:	4604      	mov	r4, r0
 8004968:	d14d      	bne.n	8004a06 <_malloc_r+0xde>
 800496a:	6834      	ldr	r4, [r6, #0]
 800496c:	4626      	mov	r6, r4
 800496e:	2e00      	cmp	r6, #0
 8004970:	d140      	bne.n	80049f4 <_malloc_r+0xcc>
 8004972:	6823      	ldr	r3, [r4, #0]
 8004974:	4631      	mov	r1, r6
 8004976:	4638      	mov	r0, r7
 8004978:	eb04 0803 	add.w	r8, r4, r3
 800497c:	f000 fcb2 	bl	80052e4 <_sbrk_r>
 8004980:	4580      	cmp	r8, r0
 8004982:	d13a      	bne.n	80049fa <_malloc_r+0xd2>
 8004984:	6821      	ldr	r1, [r4, #0]
 8004986:	3503      	adds	r5, #3
 8004988:	1a6d      	subs	r5, r5, r1
 800498a:	f025 0503 	bic.w	r5, r5, #3
 800498e:	3508      	adds	r5, #8
 8004990:	2d0c      	cmp	r5, #12
 8004992:	bf38      	it	cc
 8004994:	250c      	movcc	r5, #12
 8004996:	4629      	mov	r1, r5
 8004998:	4638      	mov	r0, r7
 800499a:	f7ff ffa5 	bl	80048e8 <sbrk_aligned>
 800499e:	3001      	adds	r0, #1
 80049a0:	d02b      	beq.n	80049fa <_malloc_r+0xd2>
 80049a2:	6823      	ldr	r3, [r4, #0]
 80049a4:	442b      	add	r3, r5
 80049a6:	6023      	str	r3, [r4, #0]
 80049a8:	e00e      	b.n	80049c8 <_malloc_r+0xa0>
 80049aa:	6822      	ldr	r2, [r4, #0]
 80049ac:	1b52      	subs	r2, r2, r5
 80049ae:	d41e      	bmi.n	80049ee <_malloc_r+0xc6>
 80049b0:	2a0b      	cmp	r2, #11
 80049b2:	d916      	bls.n	80049e2 <_malloc_r+0xba>
 80049b4:	1961      	adds	r1, r4, r5
 80049b6:	42a3      	cmp	r3, r4
 80049b8:	6025      	str	r5, [r4, #0]
 80049ba:	bf18      	it	ne
 80049bc:	6059      	strne	r1, [r3, #4]
 80049be:	6863      	ldr	r3, [r4, #4]
 80049c0:	bf08      	it	eq
 80049c2:	6031      	streq	r1, [r6, #0]
 80049c4:	5162      	str	r2, [r4, r5]
 80049c6:	604b      	str	r3, [r1, #4]
 80049c8:	4638      	mov	r0, r7
 80049ca:	f104 060b 	add.w	r6, r4, #11
 80049ce:	f001 fdcf 	bl	8006570 <__malloc_unlock>
 80049d2:	f026 0607 	bic.w	r6, r6, #7
 80049d6:	1d23      	adds	r3, r4, #4
 80049d8:	1af2      	subs	r2, r6, r3
 80049da:	d0b6      	beq.n	800494a <_malloc_r+0x22>
 80049dc:	1b9b      	subs	r3, r3, r6
 80049de:	50a3      	str	r3, [r4, r2]
 80049e0:	e7b3      	b.n	800494a <_malloc_r+0x22>
 80049e2:	6862      	ldr	r2, [r4, #4]
 80049e4:	42a3      	cmp	r3, r4
 80049e6:	bf0c      	ite	eq
 80049e8:	6032      	streq	r2, [r6, #0]
 80049ea:	605a      	strne	r2, [r3, #4]
 80049ec:	e7ec      	b.n	80049c8 <_malloc_r+0xa0>
 80049ee:	4623      	mov	r3, r4
 80049f0:	6864      	ldr	r4, [r4, #4]
 80049f2:	e7b2      	b.n	800495a <_malloc_r+0x32>
 80049f4:	4634      	mov	r4, r6
 80049f6:	6876      	ldr	r6, [r6, #4]
 80049f8:	e7b9      	b.n	800496e <_malloc_r+0x46>
 80049fa:	230c      	movs	r3, #12
 80049fc:	603b      	str	r3, [r7, #0]
 80049fe:	4638      	mov	r0, r7
 8004a00:	f001 fdb6 	bl	8006570 <__malloc_unlock>
 8004a04:	e7a1      	b.n	800494a <_malloc_r+0x22>
 8004a06:	6025      	str	r5, [r4, #0]
 8004a08:	e7de      	b.n	80049c8 <_malloc_r+0xa0>
 8004a0a:	bf00      	nop
 8004a0c:	20000348 	.word	0x20000348

08004a10 <__cvt>:
 8004a10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a14:	ec55 4b10 	vmov	r4, r5, d0
 8004a18:	2d00      	cmp	r5, #0
 8004a1a:	460e      	mov	r6, r1
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	462b      	mov	r3, r5
 8004a20:	bfbb      	ittet	lt
 8004a22:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004a26:	461d      	movlt	r5, r3
 8004a28:	2300      	movge	r3, #0
 8004a2a:	232d      	movlt	r3, #45	; 0x2d
 8004a2c:	700b      	strb	r3, [r1, #0]
 8004a2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a30:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004a34:	4691      	mov	r9, r2
 8004a36:	f023 0820 	bic.w	r8, r3, #32
 8004a3a:	bfbc      	itt	lt
 8004a3c:	4622      	movlt	r2, r4
 8004a3e:	4614      	movlt	r4, r2
 8004a40:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004a44:	d005      	beq.n	8004a52 <__cvt+0x42>
 8004a46:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004a4a:	d100      	bne.n	8004a4e <__cvt+0x3e>
 8004a4c:	3601      	adds	r6, #1
 8004a4e:	2102      	movs	r1, #2
 8004a50:	e000      	b.n	8004a54 <__cvt+0x44>
 8004a52:	2103      	movs	r1, #3
 8004a54:	ab03      	add	r3, sp, #12
 8004a56:	9301      	str	r3, [sp, #4]
 8004a58:	ab02      	add	r3, sp, #8
 8004a5a:	9300      	str	r3, [sp, #0]
 8004a5c:	ec45 4b10 	vmov	d0, r4, r5
 8004a60:	4653      	mov	r3, sl
 8004a62:	4632      	mov	r2, r6
 8004a64:	f000 fe40 	bl	80056e8 <_dtoa_r>
 8004a68:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004a6c:	4607      	mov	r7, r0
 8004a6e:	d102      	bne.n	8004a76 <__cvt+0x66>
 8004a70:	f019 0f01 	tst.w	r9, #1
 8004a74:	d022      	beq.n	8004abc <__cvt+0xac>
 8004a76:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004a7a:	eb07 0906 	add.w	r9, r7, r6
 8004a7e:	d110      	bne.n	8004aa2 <__cvt+0x92>
 8004a80:	783b      	ldrb	r3, [r7, #0]
 8004a82:	2b30      	cmp	r3, #48	; 0x30
 8004a84:	d10a      	bne.n	8004a9c <__cvt+0x8c>
 8004a86:	2200      	movs	r2, #0
 8004a88:	2300      	movs	r3, #0
 8004a8a:	4620      	mov	r0, r4
 8004a8c:	4629      	mov	r1, r5
 8004a8e:	f7fc f81b 	bl	8000ac8 <__aeabi_dcmpeq>
 8004a92:	b918      	cbnz	r0, 8004a9c <__cvt+0x8c>
 8004a94:	f1c6 0601 	rsb	r6, r6, #1
 8004a98:	f8ca 6000 	str.w	r6, [sl]
 8004a9c:	f8da 3000 	ldr.w	r3, [sl]
 8004aa0:	4499      	add	r9, r3
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	4620      	mov	r0, r4
 8004aa8:	4629      	mov	r1, r5
 8004aaa:	f7fc f80d 	bl	8000ac8 <__aeabi_dcmpeq>
 8004aae:	b108      	cbz	r0, 8004ab4 <__cvt+0xa4>
 8004ab0:	f8cd 900c 	str.w	r9, [sp, #12]
 8004ab4:	2230      	movs	r2, #48	; 0x30
 8004ab6:	9b03      	ldr	r3, [sp, #12]
 8004ab8:	454b      	cmp	r3, r9
 8004aba:	d307      	bcc.n	8004acc <__cvt+0xbc>
 8004abc:	9b03      	ldr	r3, [sp, #12]
 8004abe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004ac0:	1bdb      	subs	r3, r3, r7
 8004ac2:	4638      	mov	r0, r7
 8004ac4:	6013      	str	r3, [r2, #0]
 8004ac6:	b004      	add	sp, #16
 8004ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004acc:	1c59      	adds	r1, r3, #1
 8004ace:	9103      	str	r1, [sp, #12]
 8004ad0:	701a      	strb	r2, [r3, #0]
 8004ad2:	e7f0      	b.n	8004ab6 <__cvt+0xa6>

08004ad4 <__exponent>:
 8004ad4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2900      	cmp	r1, #0
 8004ada:	bfb8      	it	lt
 8004adc:	4249      	neglt	r1, r1
 8004ade:	f803 2b02 	strb.w	r2, [r3], #2
 8004ae2:	bfb4      	ite	lt
 8004ae4:	222d      	movlt	r2, #45	; 0x2d
 8004ae6:	222b      	movge	r2, #43	; 0x2b
 8004ae8:	2909      	cmp	r1, #9
 8004aea:	7042      	strb	r2, [r0, #1]
 8004aec:	dd2a      	ble.n	8004b44 <__exponent+0x70>
 8004aee:	f10d 0407 	add.w	r4, sp, #7
 8004af2:	46a4      	mov	ip, r4
 8004af4:	270a      	movs	r7, #10
 8004af6:	46a6      	mov	lr, r4
 8004af8:	460a      	mov	r2, r1
 8004afa:	fb91 f6f7 	sdiv	r6, r1, r7
 8004afe:	fb07 1516 	mls	r5, r7, r6, r1
 8004b02:	3530      	adds	r5, #48	; 0x30
 8004b04:	2a63      	cmp	r2, #99	; 0x63
 8004b06:	f104 34ff 	add.w	r4, r4, #4294967295
 8004b0a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004b0e:	4631      	mov	r1, r6
 8004b10:	dcf1      	bgt.n	8004af6 <__exponent+0x22>
 8004b12:	3130      	adds	r1, #48	; 0x30
 8004b14:	f1ae 0502 	sub.w	r5, lr, #2
 8004b18:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004b1c:	1c44      	adds	r4, r0, #1
 8004b1e:	4629      	mov	r1, r5
 8004b20:	4561      	cmp	r1, ip
 8004b22:	d30a      	bcc.n	8004b3a <__exponent+0x66>
 8004b24:	f10d 0209 	add.w	r2, sp, #9
 8004b28:	eba2 020e 	sub.w	r2, r2, lr
 8004b2c:	4565      	cmp	r5, ip
 8004b2e:	bf88      	it	hi
 8004b30:	2200      	movhi	r2, #0
 8004b32:	4413      	add	r3, r2
 8004b34:	1a18      	subs	r0, r3, r0
 8004b36:	b003      	add	sp, #12
 8004b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b3e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004b42:	e7ed      	b.n	8004b20 <__exponent+0x4c>
 8004b44:	2330      	movs	r3, #48	; 0x30
 8004b46:	3130      	adds	r1, #48	; 0x30
 8004b48:	7083      	strb	r3, [r0, #2]
 8004b4a:	70c1      	strb	r1, [r0, #3]
 8004b4c:	1d03      	adds	r3, r0, #4
 8004b4e:	e7f1      	b.n	8004b34 <__exponent+0x60>

08004b50 <_printf_float>:
 8004b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b54:	ed2d 8b02 	vpush	{d8}
 8004b58:	b08d      	sub	sp, #52	; 0x34
 8004b5a:	460c      	mov	r4, r1
 8004b5c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004b60:	4616      	mov	r6, r2
 8004b62:	461f      	mov	r7, r3
 8004b64:	4605      	mov	r5, r0
 8004b66:	f001 fc81 	bl	800646c <_localeconv_r>
 8004b6a:	f8d0 a000 	ldr.w	sl, [r0]
 8004b6e:	4650      	mov	r0, sl
 8004b70:	f7fb fb2e 	bl	80001d0 <strlen>
 8004b74:	2300      	movs	r3, #0
 8004b76:	930a      	str	r3, [sp, #40]	; 0x28
 8004b78:	6823      	ldr	r3, [r4, #0]
 8004b7a:	9305      	str	r3, [sp, #20]
 8004b7c:	f8d8 3000 	ldr.w	r3, [r8]
 8004b80:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004b84:	3307      	adds	r3, #7
 8004b86:	f023 0307 	bic.w	r3, r3, #7
 8004b8a:	f103 0208 	add.w	r2, r3, #8
 8004b8e:	f8c8 2000 	str.w	r2, [r8]
 8004b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b96:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004b9a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004b9e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004ba2:	9307      	str	r3, [sp, #28]
 8004ba4:	f8cd 8018 	str.w	r8, [sp, #24]
 8004ba8:	ee08 0a10 	vmov	s16, r0
 8004bac:	4b9f      	ldr	r3, [pc, #636]	; (8004e2c <_printf_float+0x2dc>)
 8004bae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004bb2:	f04f 32ff 	mov.w	r2, #4294967295
 8004bb6:	f7fb ffb9 	bl	8000b2c <__aeabi_dcmpun>
 8004bba:	bb88      	cbnz	r0, 8004c20 <_printf_float+0xd0>
 8004bbc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004bc0:	4b9a      	ldr	r3, [pc, #616]	; (8004e2c <_printf_float+0x2dc>)
 8004bc2:	f04f 32ff 	mov.w	r2, #4294967295
 8004bc6:	f7fb ff93 	bl	8000af0 <__aeabi_dcmple>
 8004bca:	bb48      	cbnz	r0, 8004c20 <_printf_float+0xd0>
 8004bcc:	2200      	movs	r2, #0
 8004bce:	2300      	movs	r3, #0
 8004bd0:	4640      	mov	r0, r8
 8004bd2:	4649      	mov	r1, r9
 8004bd4:	f7fb ff82 	bl	8000adc <__aeabi_dcmplt>
 8004bd8:	b110      	cbz	r0, 8004be0 <_printf_float+0x90>
 8004bda:	232d      	movs	r3, #45	; 0x2d
 8004bdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004be0:	4b93      	ldr	r3, [pc, #588]	; (8004e30 <_printf_float+0x2e0>)
 8004be2:	4894      	ldr	r0, [pc, #592]	; (8004e34 <_printf_float+0x2e4>)
 8004be4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004be8:	bf94      	ite	ls
 8004bea:	4698      	movls	r8, r3
 8004bec:	4680      	movhi	r8, r0
 8004bee:	2303      	movs	r3, #3
 8004bf0:	6123      	str	r3, [r4, #16]
 8004bf2:	9b05      	ldr	r3, [sp, #20]
 8004bf4:	f023 0204 	bic.w	r2, r3, #4
 8004bf8:	6022      	str	r2, [r4, #0]
 8004bfa:	f04f 0900 	mov.w	r9, #0
 8004bfe:	9700      	str	r7, [sp, #0]
 8004c00:	4633      	mov	r3, r6
 8004c02:	aa0b      	add	r2, sp, #44	; 0x2c
 8004c04:	4621      	mov	r1, r4
 8004c06:	4628      	mov	r0, r5
 8004c08:	f000 f9d8 	bl	8004fbc <_printf_common>
 8004c0c:	3001      	adds	r0, #1
 8004c0e:	f040 8090 	bne.w	8004d32 <_printf_float+0x1e2>
 8004c12:	f04f 30ff 	mov.w	r0, #4294967295
 8004c16:	b00d      	add	sp, #52	; 0x34
 8004c18:	ecbd 8b02 	vpop	{d8}
 8004c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c20:	4642      	mov	r2, r8
 8004c22:	464b      	mov	r3, r9
 8004c24:	4640      	mov	r0, r8
 8004c26:	4649      	mov	r1, r9
 8004c28:	f7fb ff80 	bl	8000b2c <__aeabi_dcmpun>
 8004c2c:	b140      	cbz	r0, 8004c40 <_printf_float+0xf0>
 8004c2e:	464b      	mov	r3, r9
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	bfbc      	itt	lt
 8004c34:	232d      	movlt	r3, #45	; 0x2d
 8004c36:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004c3a:	487f      	ldr	r0, [pc, #508]	; (8004e38 <_printf_float+0x2e8>)
 8004c3c:	4b7f      	ldr	r3, [pc, #508]	; (8004e3c <_printf_float+0x2ec>)
 8004c3e:	e7d1      	b.n	8004be4 <_printf_float+0x94>
 8004c40:	6863      	ldr	r3, [r4, #4]
 8004c42:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004c46:	9206      	str	r2, [sp, #24]
 8004c48:	1c5a      	adds	r2, r3, #1
 8004c4a:	d13f      	bne.n	8004ccc <_printf_float+0x17c>
 8004c4c:	2306      	movs	r3, #6
 8004c4e:	6063      	str	r3, [r4, #4]
 8004c50:	9b05      	ldr	r3, [sp, #20]
 8004c52:	6861      	ldr	r1, [r4, #4]
 8004c54:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004c58:	2300      	movs	r3, #0
 8004c5a:	9303      	str	r3, [sp, #12]
 8004c5c:	ab0a      	add	r3, sp, #40	; 0x28
 8004c5e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004c62:	ab09      	add	r3, sp, #36	; 0x24
 8004c64:	ec49 8b10 	vmov	d0, r8, r9
 8004c68:	9300      	str	r3, [sp, #0]
 8004c6a:	6022      	str	r2, [r4, #0]
 8004c6c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004c70:	4628      	mov	r0, r5
 8004c72:	f7ff fecd 	bl	8004a10 <__cvt>
 8004c76:	9b06      	ldr	r3, [sp, #24]
 8004c78:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004c7a:	2b47      	cmp	r3, #71	; 0x47
 8004c7c:	4680      	mov	r8, r0
 8004c7e:	d108      	bne.n	8004c92 <_printf_float+0x142>
 8004c80:	1cc8      	adds	r0, r1, #3
 8004c82:	db02      	blt.n	8004c8a <_printf_float+0x13a>
 8004c84:	6863      	ldr	r3, [r4, #4]
 8004c86:	4299      	cmp	r1, r3
 8004c88:	dd41      	ble.n	8004d0e <_printf_float+0x1be>
 8004c8a:	f1ab 0b02 	sub.w	fp, fp, #2
 8004c8e:	fa5f fb8b 	uxtb.w	fp, fp
 8004c92:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004c96:	d820      	bhi.n	8004cda <_printf_float+0x18a>
 8004c98:	3901      	subs	r1, #1
 8004c9a:	465a      	mov	r2, fp
 8004c9c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004ca0:	9109      	str	r1, [sp, #36]	; 0x24
 8004ca2:	f7ff ff17 	bl	8004ad4 <__exponent>
 8004ca6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ca8:	1813      	adds	r3, r2, r0
 8004caa:	2a01      	cmp	r2, #1
 8004cac:	4681      	mov	r9, r0
 8004cae:	6123      	str	r3, [r4, #16]
 8004cb0:	dc02      	bgt.n	8004cb8 <_printf_float+0x168>
 8004cb2:	6822      	ldr	r2, [r4, #0]
 8004cb4:	07d2      	lsls	r2, r2, #31
 8004cb6:	d501      	bpl.n	8004cbc <_printf_float+0x16c>
 8004cb8:	3301      	adds	r3, #1
 8004cba:	6123      	str	r3, [r4, #16]
 8004cbc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d09c      	beq.n	8004bfe <_printf_float+0xae>
 8004cc4:	232d      	movs	r3, #45	; 0x2d
 8004cc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cca:	e798      	b.n	8004bfe <_printf_float+0xae>
 8004ccc:	9a06      	ldr	r2, [sp, #24]
 8004cce:	2a47      	cmp	r2, #71	; 0x47
 8004cd0:	d1be      	bne.n	8004c50 <_printf_float+0x100>
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d1bc      	bne.n	8004c50 <_printf_float+0x100>
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e7b9      	b.n	8004c4e <_printf_float+0xfe>
 8004cda:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004cde:	d118      	bne.n	8004d12 <_printf_float+0x1c2>
 8004ce0:	2900      	cmp	r1, #0
 8004ce2:	6863      	ldr	r3, [r4, #4]
 8004ce4:	dd0b      	ble.n	8004cfe <_printf_float+0x1ae>
 8004ce6:	6121      	str	r1, [r4, #16]
 8004ce8:	b913      	cbnz	r3, 8004cf0 <_printf_float+0x1a0>
 8004cea:	6822      	ldr	r2, [r4, #0]
 8004cec:	07d0      	lsls	r0, r2, #31
 8004cee:	d502      	bpl.n	8004cf6 <_printf_float+0x1a6>
 8004cf0:	3301      	adds	r3, #1
 8004cf2:	440b      	add	r3, r1
 8004cf4:	6123      	str	r3, [r4, #16]
 8004cf6:	65a1      	str	r1, [r4, #88]	; 0x58
 8004cf8:	f04f 0900 	mov.w	r9, #0
 8004cfc:	e7de      	b.n	8004cbc <_printf_float+0x16c>
 8004cfe:	b913      	cbnz	r3, 8004d06 <_printf_float+0x1b6>
 8004d00:	6822      	ldr	r2, [r4, #0]
 8004d02:	07d2      	lsls	r2, r2, #31
 8004d04:	d501      	bpl.n	8004d0a <_printf_float+0x1ba>
 8004d06:	3302      	adds	r3, #2
 8004d08:	e7f4      	b.n	8004cf4 <_printf_float+0x1a4>
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e7f2      	b.n	8004cf4 <_printf_float+0x1a4>
 8004d0e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004d12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d14:	4299      	cmp	r1, r3
 8004d16:	db05      	blt.n	8004d24 <_printf_float+0x1d4>
 8004d18:	6823      	ldr	r3, [r4, #0]
 8004d1a:	6121      	str	r1, [r4, #16]
 8004d1c:	07d8      	lsls	r0, r3, #31
 8004d1e:	d5ea      	bpl.n	8004cf6 <_printf_float+0x1a6>
 8004d20:	1c4b      	adds	r3, r1, #1
 8004d22:	e7e7      	b.n	8004cf4 <_printf_float+0x1a4>
 8004d24:	2900      	cmp	r1, #0
 8004d26:	bfd4      	ite	le
 8004d28:	f1c1 0202 	rsble	r2, r1, #2
 8004d2c:	2201      	movgt	r2, #1
 8004d2e:	4413      	add	r3, r2
 8004d30:	e7e0      	b.n	8004cf4 <_printf_float+0x1a4>
 8004d32:	6823      	ldr	r3, [r4, #0]
 8004d34:	055a      	lsls	r2, r3, #21
 8004d36:	d407      	bmi.n	8004d48 <_printf_float+0x1f8>
 8004d38:	6923      	ldr	r3, [r4, #16]
 8004d3a:	4642      	mov	r2, r8
 8004d3c:	4631      	mov	r1, r6
 8004d3e:	4628      	mov	r0, r5
 8004d40:	47b8      	blx	r7
 8004d42:	3001      	adds	r0, #1
 8004d44:	d12c      	bne.n	8004da0 <_printf_float+0x250>
 8004d46:	e764      	b.n	8004c12 <_printf_float+0xc2>
 8004d48:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004d4c:	f240 80e0 	bls.w	8004f10 <_printf_float+0x3c0>
 8004d50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004d54:	2200      	movs	r2, #0
 8004d56:	2300      	movs	r3, #0
 8004d58:	f7fb feb6 	bl	8000ac8 <__aeabi_dcmpeq>
 8004d5c:	2800      	cmp	r0, #0
 8004d5e:	d034      	beq.n	8004dca <_printf_float+0x27a>
 8004d60:	4a37      	ldr	r2, [pc, #220]	; (8004e40 <_printf_float+0x2f0>)
 8004d62:	2301      	movs	r3, #1
 8004d64:	4631      	mov	r1, r6
 8004d66:	4628      	mov	r0, r5
 8004d68:	47b8      	blx	r7
 8004d6a:	3001      	adds	r0, #1
 8004d6c:	f43f af51 	beq.w	8004c12 <_printf_float+0xc2>
 8004d70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d74:	429a      	cmp	r2, r3
 8004d76:	db02      	blt.n	8004d7e <_printf_float+0x22e>
 8004d78:	6823      	ldr	r3, [r4, #0]
 8004d7a:	07d8      	lsls	r0, r3, #31
 8004d7c:	d510      	bpl.n	8004da0 <_printf_float+0x250>
 8004d7e:	ee18 3a10 	vmov	r3, s16
 8004d82:	4652      	mov	r2, sl
 8004d84:	4631      	mov	r1, r6
 8004d86:	4628      	mov	r0, r5
 8004d88:	47b8      	blx	r7
 8004d8a:	3001      	adds	r0, #1
 8004d8c:	f43f af41 	beq.w	8004c12 <_printf_float+0xc2>
 8004d90:	f04f 0800 	mov.w	r8, #0
 8004d94:	f104 091a 	add.w	r9, r4, #26
 8004d98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d9a:	3b01      	subs	r3, #1
 8004d9c:	4543      	cmp	r3, r8
 8004d9e:	dc09      	bgt.n	8004db4 <_printf_float+0x264>
 8004da0:	6823      	ldr	r3, [r4, #0]
 8004da2:	079b      	lsls	r3, r3, #30
 8004da4:	f100 8105 	bmi.w	8004fb2 <_printf_float+0x462>
 8004da8:	68e0      	ldr	r0, [r4, #12]
 8004daa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004dac:	4298      	cmp	r0, r3
 8004dae:	bfb8      	it	lt
 8004db0:	4618      	movlt	r0, r3
 8004db2:	e730      	b.n	8004c16 <_printf_float+0xc6>
 8004db4:	2301      	movs	r3, #1
 8004db6:	464a      	mov	r2, r9
 8004db8:	4631      	mov	r1, r6
 8004dba:	4628      	mov	r0, r5
 8004dbc:	47b8      	blx	r7
 8004dbe:	3001      	adds	r0, #1
 8004dc0:	f43f af27 	beq.w	8004c12 <_printf_float+0xc2>
 8004dc4:	f108 0801 	add.w	r8, r8, #1
 8004dc8:	e7e6      	b.n	8004d98 <_printf_float+0x248>
 8004dca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	dc39      	bgt.n	8004e44 <_printf_float+0x2f4>
 8004dd0:	4a1b      	ldr	r2, [pc, #108]	; (8004e40 <_printf_float+0x2f0>)
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	4631      	mov	r1, r6
 8004dd6:	4628      	mov	r0, r5
 8004dd8:	47b8      	blx	r7
 8004dda:	3001      	adds	r0, #1
 8004ddc:	f43f af19 	beq.w	8004c12 <_printf_float+0xc2>
 8004de0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004de4:	4313      	orrs	r3, r2
 8004de6:	d102      	bne.n	8004dee <_printf_float+0x29e>
 8004de8:	6823      	ldr	r3, [r4, #0]
 8004dea:	07d9      	lsls	r1, r3, #31
 8004dec:	d5d8      	bpl.n	8004da0 <_printf_float+0x250>
 8004dee:	ee18 3a10 	vmov	r3, s16
 8004df2:	4652      	mov	r2, sl
 8004df4:	4631      	mov	r1, r6
 8004df6:	4628      	mov	r0, r5
 8004df8:	47b8      	blx	r7
 8004dfa:	3001      	adds	r0, #1
 8004dfc:	f43f af09 	beq.w	8004c12 <_printf_float+0xc2>
 8004e00:	f04f 0900 	mov.w	r9, #0
 8004e04:	f104 0a1a 	add.w	sl, r4, #26
 8004e08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e0a:	425b      	negs	r3, r3
 8004e0c:	454b      	cmp	r3, r9
 8004e0e:	dc01      	bgt.n	8004e14 <_printf_float+0x2c4>
 8004e10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e12:	e792      	b.n	8004d3a <_printf_float+0x1ea>
 8004e14:	2301      	movs	r3, #1
 8004e16:	4652      	mov	r2, sl
 8004e18:	4631      	mov	r1, r6
 8004e1a:	4628      	mov	r0, r5
 8004e1c:	47b8      	blx	r7
 8004e1e:	3001      	adds	r0, #1
 8004e20:	f43f aef7 	beq.w	8004c12 <_printf_float+0xc2>
 8004e24:	f109 0901 	add.w	r9, r9, #1
 8004e28:	e7ee      	b.n	8004e08 <_printf_float+0x2b8>
 8004e2a:	bf00      	nop
 8004e2c:	7fefffff 	.word	0x7fefffff
 8004e30:	0800750c 	.word	0x0800750c
 8004e34:	08007510 	.word	0x08007510
 8004e38:	08007518 	.word	0x08007518
 8004e3c:	08007514 	.word	0x08007514
 8004e40:	0800751c 	.word	0x0800751c
 8004e44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e46:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	bfa8      	it	ge
 8004e4c:	461a      	movge	r2, r3
 8004e4e:	2a00      	cmp	r2, #0
 8004e50:	4691      	mov	r9, r2
 8004e52:	dc37      	bgt.n	8004ec4 <_printf_float+0x374>
 8004e54:	f04f 0b00 	mov.w	fp, #0
 8004e58:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004e5c:	f104 021a 	add.w	r2, r4, #26
 8004e60:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004e62:	9305      	str	r3, [sp, #20]
 8004e64:	eba3 0309 	sub.w	r3, r3, r9
 8004e68:	455b      	cmp	r3, fp
 8004e6a:	dc33      	bgt.n	8004ed4 <_printf_float+0x384>
 8004e6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e70:	429a      	cmp	r2, r3
 8004e72:	db3b      	blt.n	8004eec <_printf_float+0x39c>
 8004e74:	6823      	ldr	r3, [r4, #0]
 8004e76:	07da      	lsls	r2, r3, #31
 8004e78:	d438      	bmi.n	8004eec <_printf_float+0x39c>
 8004e7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e7c:	9a05      	ldr	r2, [sp, #20]
 8004e7e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004e80:	1a9a      	subs	r2, r3, r2
 8004e82:	eba3 0901 	sub.w	r9, r3, r1
 8004e86:	4591      	cmp	r9, r2
 8004e88:	bfa8      	it	ge
 8004e8a:	4691      	movge	r9, r2
 8004e8c:	f1b9 0f00 	cmp.w	r9, #0
 8004e90:	dc35      	bgt.n	8004efe <_printf_float+0x3ae>
 8004e92:	f04f 0800 	mov.w	r8, #0
 8004e96:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004e9a:	f104 0a1a 	add.w	sl, r4, #26
 8004e9e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ea2:	1a9b      	subs	r3, r3, r2
 8004ea4:	eba3 0309 	sub.w	r3, r3, r9
 8004ea8:	4543      	cmp	r3, r8
 8004eaa:	f77f af79 	ble.w	8004da0 <_printf_float+0x250>
 8004eae:	2301      	movs	r3, #1
 8004eb0:	4652      	mov	r2, sl
 8004eb2:	4631      	mov	r1, r6
 8004eb4:	4628      	mov	r0, r5
 8004eb6:	47b8      	blx	r7
 8004eb8:	3001      	adds	r0, #1
 8004eba:	f43f aeaa 	beq.w	8004c12 <_printf_float+0xc2>
 8004ebe:	f108 0801 	add.w	r8, r8, #1
 8004ec2:	e7ec      	b.n	8004e9e <_printf_float+0x34e>
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	4631      	mov	r1, r6
 8004ec8:	4642      	mov	r2, r8
 8004eca:	4628      	mov	r0, r5
 8004ecc:	47b8      	blx	r7
 8004ece:	3001      	adds	r0, #1
 8004ed0:	d1c0      	bne.n	8004e54 <_printf_float+0x304>
 8004ed2:	e69e      	b.n	8004c12 <_printf_float+0xc2>
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	4631      	mov	r1, r6
 8004ed8:	4628      	mov	r0, r5
 8004eda:	9205      	str	r2, [sp, #20]
 8004edc:	47b8      	blx	r7
 8004ede:	3001      	adds	r0, #1
 8004ee0:	f43f ae97 	beq.w	8004c12 <_printf_float+0xc2>
 8004ee4:	9a05      	ldr	r2, [sp, #20]
 8004ee6:	f10b 0b01 	add.w	fp, fp, #1
 8004eea:	e7b9      	b.n	8004e60 <_printf_float+0x310>
 8004eec:	ee18 3a10 	vmov	r3, s16
 8004ef0:	4652      	mov	r2, sl
 8004ef2:	4631      	mov	r1, r6
 8004ef4:	4628      	mov	r0, r5
 8004ef6:	47b8      	blx	r7
 8004ef8:	3001      	adds	r0, #1
 8004efa:	d1be      	bne.n	8004e7a <_printf_float+0x32a>
 8004efc:	e689      	b.n	8004c12 <_printf_float+0xc2>
 8004efe:	9a05      	ldr	r2, [sp, #20]
 8004f00:	464b      	mov	r3, r9
 8004f02:	4442      	add	r2, r8
 8004f04:	4631      	mov	r1, r6
 8004f06:	4628      	mov	r0, r5
 8004f08:	47b8      	blx	r7
 8004f0a:	3001      	adds	r0, #1
 8004f0c:	d1c1      	bne.n	8004e92 <_printf_float+0x342>
 8004f0e:	e680      	b.n	8004c12 <_printf_float+0xc2>
 8004f10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f12:	2a01      	cmp	r2, #1
 8004f14:	dc01      	bgt.n	8004f1a <_printf_float+0x3ca>
 8004f16:	07db      	lsls	r3, r3, #31
 8004f18:	d538      	bpl.n	8004f8c <_printf_float+0x43c>
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	4642      	mov	r2, r8
 8004f1e:	4631      	mov	r1, r6
 8004f20:	4628      	mov	r0, r5
 8004f22:	47b8      	blx	r7
 8004f24:	3001      	adds	r0, #1
 8004f26:	f43f ae74 	beq.w	8004c12 <_printf_float+0xc2>
 8004f2a:	ee18 3a10 	vmov	r3, s16
 8004f2e:	4652      	mov	r2, sl
 8004f30:	4631      	mov	r1, r6
 8004f32:	4628      	mov	r0, r5
 8004f34:	47b8      	blx	r7
 8004f36:	3001      	adds	r0, #1
 8004f38:	f43f ae6b 	beq.w	8004c12 <_printf_float+0xc2>
 8004f3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004f40:	2200      	movs	r2, #0
 8004f42:	2300      	movs	r3, #0
 8004f44:	f7fb fdc0 	bl	8000ac8 <__aeabi_dcmpeq>
 8004f48:	b9d8      	cbnz	r0, 8004f82 <_printf_float+0x432>
 8004f4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f4c:	f108 0201 	add.w	r2, r8, #1
 8004f50:	3b01      	subs	r3, #1
 8004f52:	4631      	mov	r1, r6
 8004f54:	4628      	mov	r0, r5
 8004f56:	47b8      	blx	r7
 8004f58:	3001      	adds	r0, #1
 8004f5a:	d10e      	bne.n	8004f7a <_printf_float+0x42a>
 8004f5c:	e659      	b.n	8004c12 <_printf_float+0xc2>
 8004f5e:	2301      	movs	r3, #1
 8004f60:	4652      	mov	r2, sl
 8004f62:	4631      	mov	r1, r6
 8004f64:	4628      	mov	r0, r5
 8004f66:	47b8      	blx	r7
 8004f68:	3001      	adds	r0, #1
 8004f6a:	f43f ae52 	beq.w	8004c12 <_printf_float+0xc2>
 8004f6e:	f108 0801 	add.w	r8, r8, #1
 8004f72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f74:	3b01      	subs	r3, #1
 8004f76:	4543      	cmp	r3, r8
 8004f78:	dcf1      	bgt.n	8004f5e <_printf_float+0x40e>
 8004f7a:	464b      	mov	r3, r9
 8004f7c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004f80:	e6dc      	b.n	8004d3c <_printf_float+0x1ec>
 8004f82:	f04f 0800 	mov.w	r8, #0
 8004f86:	f104 0a1a 	add.w	sl, r4, #26
 8004f8a:	e7f2      	b.n	8004f72 <_printf_float+0x422>
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	4642      	mov	r2, r8
 8004f90:	e7df      	b.n	8004f52 <_printf_float+0x402>
 8004f92:	2301      	movs	r3, #1
 8004f94:	464a      	mov	r2, r9
 8004f96:	4631      	mov	r1, r6
 8004f98:	4628      	mov	r0, r5
 8004f9a:	47b8      	blx	r7
 8004f9c:	3001      	adds	r0, #1
 8004f9e:	f43f ae38 	beq.w	8004c12 <_printf_float+0xc2>
 8004fa2:	f108 0801 	add.w	r8, r8, #1
 8004fa6:	68e3      	ldr	r3, [r4, #12]
 8004fa8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004faa:	1a5b      	subs	r3, r3, r1
 8004fac:	4543      	cmp	r3, r8
 8004fae:	dcf0      	bgt.n	8004f92 <_printf_float+0x442>
 8004fb0:	e6fa      	b.n	8004da8 <_printf_float+0x258>
 8004fb2:	f04f 0800 	mov.w	r8, #0
 8004fb6:	f104 0919 	add.w	r9, r4, #25
 8004fba:	e7f4      	b.n	8004fa6 <_printf_float+0x456>

08004fbc <_printf_common>:
 8004fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fc0:	4616      	mov	r6, r2
 8004fc2:	4699      	mov	r9, r3
 8004fc4:	688a      	ldr	r2, [r1, #8]
 8004fc6:	690b      	ldr	r3, [r1, #16]
 8004fc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	bfb8      	it	lt
 8004fd0:	4613      	movlt	r3, r2
 8004fd2:	6033      	str	r3, [r6, #0]
 8004fd4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004fd8:	4607      	mov	r7, r0
 8004fda:	460c      	mov	r4, r1
 8004fdc:	b10a      	cbz	r2, 8004fe2 <_printf_common+0x26>
 8004fde:	3301      	adds	r3, #1
 8004fe0:	6033      	str	r3, [r6, #0]
 8004fe2:	6823      	ldr	r3, [r4, #0]
 8004fe4:	0699      	lsls	r1, r3, #26
 8004fe6:	bf42      	ittt	mi
 8004fe8:	6833      	ldrmi	r3, [r6, #0]
 8004fea:	3302      	addmi	r3, #2
 8004fec:	6033      	strmi	r3, [r6, #0]
 8004fee:	6825      	ldr	r5, [r4, #0]
 8004ff0:	f015 0506 	ands.w	r5, r5, #6
 8004ff4:	d106      	bne.n	8005004 <_printf_common+0x48>
 8004ff6:	f104 0a19 	add.w	sl, r4, #25
 8004ffa:	68e3      	ldr	r3, [r4, #12]
 8004ffc:	6832      	ldr	r2, [r6, #0]
 8004ffe:	1a9b      	subs	r3, r3, r2
 8005000:	42ab      	cmp	r3, r5
 8005002:	dc26      	bgt.n	8005052 <_printf_common+0x96>
 8005004:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005008:	1e13      	subs	r3, r2, #0
 800500a:	6822      	ldr	r2, [r4, #0]
 800500c:	bf18      	it	ne
 800500e:	2301      	movne	r3, #1
 8005010:	0692      	lsls	r2, r2, #26
 8005012:	d42b      	bmi.n	800506c <_printf_common+0xb0>
 8005014:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005018:	4649      	mov	r1, r9
 800501a:	4638      	mov	r0, r7
 800501c:	47c0      	blx	r8
 800501e:	3001      	adds	r0, #1
 8005020:	d01e      	beq.n	8005060 <_printf_common+0xa4>
 8005022:	6823      	ldr	r3, [r4, #0]
 8005024:	68e5      	ldr	r5, [r4, #12]
 8005026:	6832      	ldr	r2, [r6, #0]
 8005028:	f003 0306 	and.w	r3, r3, #6
 800502c:	2b04      	cmp	r3, #4
 800502e:	bf08      	it	eq
 8005030:	1aad      	subeq	r5, r5, r2
 8005032:	68a3      	ldr	r3, [r4, #8]
 8005034:	6922      	ldr	r2, [r4, #16]
 8005036:	bf0c      	ite	eq
 8005038:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800503c:	2500      	movne	r5, #0
 800503e:	4293      	cmp	r3, r2
 8005040:	bfc4      	itt	gt
 8005042:	1a9b      	subgt	r3, r3, r2
 8005044:	18ed      	addgt	r5, r5, r3
 8005046:	2600      	movs	r6, #0
 8005048:	341a      	adds	r4, #26
 800504a:	42b5      	cmp	r5, r6
 800504c:	d11a      	bne.n	8005084 <_printf_common+0xc8>
 800504e:	2000      	movs	r0, #0
 8005050:	e008      	b.n	8005064 <_printf_common+0xa8>
 8005052:	2301      	movs	r3, #1
 8005054:	4652      	mov	r2, sl
 8005056:	4649      	mov	r1, r9
 8005058:	4638      	mov	r0, r7
 800505a:	47c0      	blx	r8
 800505c:	3001      	adds	r0, #1
 800505e:	d103      	bne.n	8005068 <_printf_common+0xac>
 8005060:	f04f 30ff 	mov.w	r0, #4294967295
 8005064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005068:	3501      	adds	r5, #1
 800506a:	e7c6      	b.n	8004ffa <_printf_common+0x3e>
 800506c:	18e1      	adds	r1, r4, r3
 800506e:	1c5a      	adds	r2, r3, #1
 8005070:	2030      	movs	r0, #48	; 0x30
 8005072:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005076:	4422      	add	r2, r4
 8005078:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800507c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005080:	3302      	adds	r3, #2
 8005082:	e7c7      	b.n	8005014 <_printf_common+0x58>
 8005084:	2301      	movs	r3, #1
 8005086:	4622      	mov	r2, r4
 8005088:	4649      	mov	r1, r9
 800508a:	4638      	mov	r0, r7
 800508c:	47c0      	blx	r8
 800508e:	3001      	adds	r0, #1
 8005090:	d0e6      	beq.n	8005060 <_printf_common+0xa4>
 8005092:	3601      	adds	r6, #1
 8005094:	e7d9      	b.n	800504a <_printf_common+0x8e>
	...

08005098 <_printf_i>:
 8005098:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800509c:	7e0f      	ldrb	r7, [r1, #24]
 800509e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80050a0:	2f78      	cmp	r7, #120	; 0x78
 80050a2:	4691      	mov	r9, r2
 80050a4:	4680      	mov	r8, r0
 80050a6:	460c      	mov	r4, r1
 80050a8:	469a      	mov	sl, r3
 80050aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80050ae:	d807      	bhi.n	80050c0 <_printf_i+0x28>
 80050b0:	2f62      	cmp	r7, #98	; 0x62
 80050b2:	d80a      	bhi.n	80050ca <_printf_i+0x32>
 80050b4:	2f00      	cmp	r7, #0
 80050b6:	f000 80d8 	beq.w	800526a <_printf_i+0x1d2>
 80050ba:	2f58      	cmp	r7, #88	; 0x58
 80050bc:	f000 80a3 	beq.w	8005206 <_printf_i+0x16e>
 80050c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80050c8:	e03a      	b.n	8005140 <_printf_i+0xa8>
 80050ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80050ce:	2b15      	cmp	r3, #21
 80050d0:	d8f6      	bhi.n	80050c0 <_printf_i+0x28>
 80050d2:	a101      	add	r1, pc, #4	; (adr r1, 80050d8 <_printf_i+0x40>)
 80050d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80050d8:	08005131 	.word	0x08005131
 80050dc:	08005145 	.word	0x08005145
 80050e0:	080050c1 	.word	0x080050c1
 80050e4:	080050c1 	.word	0x080050c1
 80050e8:	080050c1 	.word	0x080050c1
 80050ec:	080050c1 	.word	0x080050c1
 80050f0:	08005145 	.word	0x08005145
 80050f4:	080050c1 	.word	0x080050c1
 80050f8:	080050c1 	.word	0x080050c1
 80050fc:	080050c1 	.word	0x080050c1
 8005100:	080050c1 	.word	0x080050c1
 8005104:	08005251 	.word	0x08005251
 8005108:	08005175 	.word	0x08005175
 800510c:	08005233 	.word	0x08005233
 8005110:	080050c1 	.word	0x080050c1
 8005114:	080050c1 	.word	0x080050c1
 8005118:	08005273 	.word	0x08005273
 800511c:	080050c1 	.word	0x080050c1
 8005120:	08005175 	.word	0x08005175
 8005124:	080050c1 	.word	0x080050c1
 8005128:	080050c1 	.word	0x080050c1
 800512c:	0800523b 	.word	0x0800523b
 8005130:	682b      	ldr	r3, [r5, #0]
 8005132:	1d1a      	adds	r2, r3, #4
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	602a      	str	r2, [r5, #0]
 8005138:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800513c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005140:	2301      	movs	r3, #1
 8005142:	e0a3      	b.n	800528c <_printf_i+0x1f4>
 8005144:	6820      	ldr	r0, [r4, #0]
 8005146:	6829      	ldr	r1, [r5, #0]
 8005148:	0606      	lsls	r6, r0, #24
 800514a:	f101 0304 	add.w	r3, r1, #4
 800514e:	d50a      	bpl.n	8005166 <_printf_i+0xce>
 8005150:	680e      	ldr	r6, [r1, #0]
 8005152:	602b      	str	r3, [r5, #0]
 8005154:	2e00      	cmp	r6, #0
 8005156:	da03      	bge.n	8005160 <_printf_i+0xc8>
 8005158:	232d      	movs	r3, #45	; 0x2d
 800515a:	4276      	negs	r6, r6
 800515c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005160:	485e      	ldr	r0, [pc, #376]	; (80052dc <_printf_i+0x244>)
 8005162:	230a      	movs	r3, #10
 8005164:	e019      	b.n	800519a <_printf_i+0x102>
 8005166:	680e      	ldr	r6, [r1, #0]
 8005168:	602b      	str	r3, [r5, #0]
 800516a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800516e:	bf18      	it	ne
 8005170:	b236      	sxthne	r6, r6
 8005172:	e7ef      	b.n	8005154 <_printf_i+0xbc>
 8005174:	682b      	ldr	r3, [r5, #0]
 8005176:	6820      	ldr	r0, [r4, #0]
 8005178:	1d19      	adds	r1, r3, #4
 800517a:	6029      	str	r1, [r5, #0]
 800517c:	0601      	lsls	r1, r0, #24
 800517e:	d501      	bpl.n	8005184 <_printf_i+0xec>
 8005180:	681e      	ldr	r6, [r3, #0]
 8005182:	e002      	b.n	800518a <_printf_i+0xf2>
 8005184:	0646      	lsls	r6, r0, #25
 8005186:	d5fb      	bpl.n	8005180 <_printf_i+0xe8>
 8005188:	881e      	ldrh	r6, [r3, #0]
 800518a:	4854      	ldr	r0, [pc, #336]	; (80052dc <_printf_i+0x244>)
 800518c:	2f6f      	cmp	r7, #111	; 0x6f
 800518e:	bf0c      	ite	eq
 8005190:	2308      	moveq	r3, #8
 8005192:	230a      	movne	r3, #10
 8005194:	2100      	movs	r1, #0
 8005196:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800519a:	6865      	ldr	r5, [r4, #4]
 800519c:	60a5      	str	r5, [r4, #8]
 800519e:	2d00      	cmp	r5, #0
 80051a0:	bfa2      	ittt	ge
 80051a2:	6821      	ldrge	r1, [r4, #0]
 80051a4:	f021 0104 	bicge.w	r1, r1, #4
 80051a8:	6021      	strge	r1, [r4, #0]
 80051aa:	b90e      	cbnz	r6, 80051b0 <_printf_i+0x118>
 80051ac:	2d00      	cmp	r5, #0
 80051ae:	d04d      	beq.n	800524c <_printf_i+0x1b4>
 80051b0:	4615      	mov	r5, r2
 80051b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80051b6:	fb03 6711 	mls	r7, r3, r1, r6
 80051ba:	5dc7      	ldrb	r7, [r0, r7]
 80051bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80051c0:	4637      	mov	r7, r6
 80051c2:	42bb      	cmp	r3, r7
 80051c4:	460e      	mov	r6, r1
 80051c6:	d9f4      	bls.n	80051b2 <_printf_i+0x11a>
 80051c8:	2b08      	cmp	r3, #8
 80051ca:	d10b      	bne.n	80051e4 <_printf_i+0x14c>
 80051cc:	6823      	ldr	r3, [r4, #0]
 80051ce:	07de      	lsls	r6, r3, #31
 80051d0:	d508      	bpl.n	80051e4 <_printf_i+0x14c>
 80051d2:	6923      	ldr	r3, [r4, #16]
 80051d4:	6861      	ldr	r1, [r4, #4]
 80051d6:	4299      	cmp	r1, r3
 80051d8:	bfde      	ittt	le
 80051da:	2330      	movle	r3, #48	; 0x30
 80051dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80051e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80051e4:	1b52      	subs	r2, r2, r5
 80051e6:	6122      	str	r2, [r4, #16]
 80051e8:	f8cd a000 	str.w	sl, [sp]
 80051ec:	464b      	mov	r3, r9
 80051ee:	aa03      	add	r2, sp, #12
 80051f0:	4621      	mov	r1, r4
 80051f2:	4640      	mov	r0, r8
 80051f4:	f7ff fee2 	bl	8004fbc <_printf_common>
 80051f8:	3001      	adds	r0, #1
 80051fa:	d14c      	bne.n	8005296 <_printf_i+0x1fe>
 80051fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005200:	b004      	add	sp, #16
 8005202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005206:	4835      	ldr	r0, [pc, #212]	; (80052dc <_printf_i+0x244>)
 8005208:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800520c:	6829      	ldr	r1, [r5, #0]
 800520e:	6823      	ldr	r3, [r4, #0]
 8005210:	f851 6b04 	ldr.w	r6, [r1], #4
 8005214:	6029      	str	r1, [r5, #0]
 8005216:	061d      	lsls	r5, r3, #24
 8005218:	d514      	bpl.n	8005244 <_printf_i+0x1ac>
 800521a:	07df      	lsls	r7, r3, #31
 800521c:	bf44      	itt	mi
 800521e:	f043 0320 	orrmi.w	r3, r3, #32
 8005222:	6023      	strmi	r3, [r4, #0]
 8005224:	b91e      	cbnz	r6, 800522e <_printf_i+0x196>
 8005226:	6823      	ldr	r3, [r4, #0]
 8005228:	f023 0320 	bic.w	r3, r3, #32
 800522c:	6023      	str	r3, [r4, #0]
 800522e:	2310      	movs	r3, #16
 8005230:	e7b0      	b.n	8005194 <_printf_i+0xfc>
 8005232:	6823      	ldr	r3, [r4, #0]
 8005234:	f043 0320 	orr.w	r3, r3, #32
 8005238:	6023      	str	r3, [r4, #0]
 800523a:	2378      	movs	r3, #120	; 0x78
 800523c:	4828      	ldr	r0, [pc, #160]	; (80052e0 <_printf_i+0x248>)
 800523e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005242:	e7e3      	b.n	800520c <_printf_i+0x174>
 8005244:	0659      	lsls	r1, r3, #25
 8005246:	bf48      	it	mi
 8005248:	b2b6      	uxthmi	r6, r6
 800524a:	e7e6      	b.n	800521a <_printf_i+0x182>
 800524c:	4615      	mov	r5, r2
 800524e:	e7bb      	b.n	80051c8 <_printf_i+0x130>
 8005250:	682b      	ldr	r3, [r5, #0]
 8005252:	6826      	ldr	r6, [r4, #0]
 8005254:	6961      	ldr	r1, [r4, #20]
 8005256:	1d18      	adds	r0, r3, #4
 8005258:	6028      	str	r0, [r5, #0]
 800525a:	0635      	lsls	r5, r6, #24
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	d501      	bpl.n	8005264 <_printf_i+0x1cc>
 8005260:	6019      	str	r1, [r3, #0]
 8005262:	e002      	b.n	800526a <_printf_i+0x1d2>
 8005264:	0670      	lsls	r0, r6, #25
 8005266:	d5fb      	bpl.n	8005260 <_printf_i+0x1c8>
 8005268:	8019      	strh	r1, [r3, #0]
 800526a:	2300      	movs	r3, #0
 800526c:	6123      	str	r3, [r4, #16]
 800526e:	4615      	mov	r5, r2
 8005270:	e7ba      	b.n	80051e8 <_printf_i+0x150>
 8005272:	682b      	ldr	r3, [r5, #0]
 8005274:	1d1a      	adds	r2, r3, #4
 8005276:	602a      	str	r2, [r5, #0]
 8005278:	681d      	ldr	r5, [r3, #0]
 800527a:	6862      	ldr	r2, [r4, #4]
 800527c:	2100      	movs	r1, #0
 800527e:	4628      	mov	r0, r5
 8005280:	f7fa ffae 	bl	80001e0 <memchr>
 8005284:	b108      	cbz	r0, 800528a <_printf_i+0x1f2>
 8005286:	1b40      	subs	r0, r0, r5
 8005288:	6060      	str	r0, [r4, #4]
 800528a:	6863      	ldr	r3, [r4, #4]
 800528c:	6123      	str	r3, [r4, #16]
 800528e:	2300      	movs	r3, #0
 8005290:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005294:	e7a8      	b.n	80051e8 <_printf_i+0x150>
 8005296:	6923      	ldr	r3, [r4, #16]
 8005298:	462a      	mov	r2, r5
 800529a:	4649      	mov	r1, r9
 800529c:	4640      	mov	r0, r8
 800529e:	47d0      	blx	sl
 80052a0:	3001      	adds	r0, #1
 80052a2:	d0ab      	beq.n	80051fc <_printf_i+0x164>
 80052a4:	6823      	ldr	r3, [r4, #0]
 80052a6:	079b      	lsls	r3, r3, #30
 80052a8:	d413      	bmi.n	80052d2 <_printf_i+0x23a>
 80052aa:	68e0      	ldr	r0, [r4, #12]
 80052ac:	9b03      	ldr	r3, [sp, #12]
 80052ae:	4298      	cmp	r0, r3
 80052b0:	bfb8      	it	lt
 80052b2:	4618      	movlt	r0, r3
 80052b4:	e7a4      	b.n	8005200 <_printf_i+0x168>
 80052b6:	2301      	movs	r3, #1
 80052b8:	4632      	mov	r2, r6
 80052ba:	4649      	mov	r1, r9
 80052bc:	4640      	mov	r0, r8
 80052be:	47d0      	blx	sl
 80052c0:	3001      	adds	r0, #1
 80052c2:	d09b      	beq.n	80051fc <_printf_i+0x164>
 80052c4:	3501      	adds	r5, #1
 80052c6:	68e3      	ldr	r3, [r4, #12]
 80052c8:	9903      	ldr	r1, [sp, #12]
 80052ca:	1a5b      	subs	r3, r3, r1
 80052cc:	42ab      	cmp	r3, r5
 80052ce:	dcf2      	bgt.n	80052b6 <_printf_i+0x21e>
 80052d0:	e7eb      	b.n	80052aa <_printf_i+0x212>
 80052d2:	2500      	movs	r5, #0
 80052d4:	f104 0619 	add.w	r6, r4, #25
 80052d8:	e7f5      	b.n	80052c6 <_printf_i+0x22e>
 80052da:	bf00      	nop
 80052dc:	0800751e 	.word	0x0800751e
 80052e0:	0800752f 	.word	0x0800752f

080052e4 <_sbrk_r>:
 80052e4:	b538      	push	{r3, r4, r5, lr}
 80052e6:	4d06      	ldr	r5, [pc, #24]	; (8005300 <_sbrk_r+0x1c>)
 80052e8:	2300      	movs	r3, #0
 80052ea:	4604      	mov	r4, r0
 80052ec:	4608      	mov	r0, r1
 80052ee:	602b      	str	r3, [r5, #0]
 80052f0:	f7fc f884 	bl	80013fc <_sbrk>
 80052f4:	1c43      	adds	r3, r0, #1
 80052f6:	d102      	bne.n	80052fe <_sbrk_r+0x1a>
 80052f8:	682b      	ldr	r3, [r5, #0]
 80052fa:	b103      	cbz	r3, 80052fe <_sbrk_r+0x1a>
 80052fc:	6023      	str	r3, [r4, #0]
 80052fe:	bd38      	pop	{r3, r4, r5, pc}
 8005300:	20000350 	.word	0x20000350

08005304 <siprintf>:
 8005304:	b40e      	push	{r1, r2, r3}
 8005306:	b500      	push	{lr}
 8005308:	b09c      	sub	sp, #112	; 0x70
 800530a:	ab1d      	add	r3, sp, #116	; 0x74
 800530c:	9002      	str	r0, [sp, #8]
 800530e:	9006      	str	r0, [sp, #24]
 8005310:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005314:	4809      	ldr	r0, [pc, #36]	; (800533c <siprintf+0x38>)
 8005316:	9107      	str	r1, [sp, #28]
 8005318:	9104      	str	r1, [sp, #16]
 800531a:	4909      	ldr	r1, [pc, #36]	; (8005340 <siprintf+0x3c>)
 800531c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005320:	9105      	str	r1, [sp, #20]
 8005322:	6800      	ldr	r0, [r0, #0]
 8005324:	9301      	str	r3, [sp, #4]
 8005326:	a902      	add	r1, sp, #8
 8005328:	f001 fd4c 	bl	8006dc4 <_svfiprintf_r>
 800532c:	9b02      	ldr	r3, [sp, #8]
 800532e:	2200      	movs	r2, #0
 8005330:	701a      	strb	r2, [r3, #0]
 8005332:	b01c      	add	sp, #112	; 0x70
 8005334:	f85d eb04 	ldr.w	lr, [sp], #4
 8005338:	b003      	add	sp, #12
 800533a:	4770      	bx	lr
 800533c:	2000000c 	.word	0x2000000c
 8005340:	ffff0208 	.word	0xffff0208

08005344 <__sread>:
 8005344:	b510      	push	{r4, lr}
 8005346:	460c      	mov	r4, r1
 8005348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800534c:	f001 ff94 	bl	8007278 <_read_r>
 8005350:	2800      	cmp	r0, #0
 8005352:	bfab      	itete	ge
 8005354:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005356:	89a3      	ldrhlt	r3, [r4, #12]
 8005358:	181b      	addge	r3, r3, r0
 800535a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800535e:	bfac      	ite	ge
 8005360:	6563      	strge	r3, [r4, #84]	; 0x54
 8005362:	81a3      	strhlt	r3, [r4, #12]
 8005364:	bd10      	pop	{r4, pc}

08005366 <__swrite>:
 8005366:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800536a:	461f      	mov	r7, r3
 800536c:	898b      	ldrh	r3, [r1, #12]
 800536e:	05db      	lsls	r3, r3, #23
 8005370:	4605      	mov	r5, r0
 8005372:	460c      	mov	r4, r1
 8005374:	4616      	mov	r6, r2
 8005376:	d505      	bpl.n	8005384 <__swrite+0x1e>
 8005378:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800537c:	2302      	movs	r3, #2
 800537e:	2200      	movs	r2, #0
 8005380:	f001 f878 	bl	8006474 <_lseek_r>
 8005384:	89a3      	ldrh	r3, [r4, #12]
 8005386:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800538a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800538e:	81a3      	strh	r3, [r4, #12]
 8005390:	4632      	mov	r2, r6
 8005392:	463b      	mov	r3, r7
 8005394:	4628      	mov	r0, r5
 8005396:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800539a:	f000 b869 	b.w	8005470 <_write_r>

0800539e <__sseek>:
 800539e:	b510      	push	{r4, lr}
 80053a0:	460c      	mov	r4, r1
 80053a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053a6:	f001 f865 	bl	8006474 <_lseek_r>
 80053aa:	1c43      	adds	r3, r0, #1
 80053ac:	89a3      	ldrh	r3, [r4, #12]
 80053ae:	bf15      	itete	ne
 80053b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80053b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80053b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80053ba:	81a3      	strheq	r3, [r4, #12]
 80053bc:	bf18      	it	ne
 80053be:	81a3      	strhne	r3, [r4, #12]
 80053c0:	bd10      	pop	{r4, pc}

080053c2 <__sclose>:
 80053c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053c6:	f000 b8f1 	b.w	80055ac <_close_r>
	...

080053cc <__swbuf_r>:
 80053cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ce:	460e      	mov	r6, r1
 80053d0:	4614      	mov	r4, r2
 80053d2:	4605      	mov	r5, r0
 80053d4:	b118      	cbz	r0, 80053de <__swbuf_r+0x12>
 80053d6:	6983      	ldr	r3, [r0, #24]
 80053d8:	b90b      	cbnz	r3, 80053de <__swbuf_r+0x12>
 80053da:	f7ff f955 	bl	8004688 <__sinit>
 80053de:	4b21      	ldr	r3, [pc, #132]	; (8005464 <__swbuf_r+0x98>)
 80053e0:	429c      	cmp	r4, r3
 80053e2:	d12b      	bne.n	800543c <__swbuf_r+0x70>
 80053e4:	686c      	ldr	r4, [r5, #4]
 80053e6:	69a3      	ldr	r3, [r4, #24]
 80053e8:	60a3      	str	r3, [r4, #8]
 80053ea:	89a3      	ldrh	r3, [r4, #12]
 80053ec:	071a      	lsls	r2, r3, #28
 80053ee:	d52f      	bpl.n	8005450 <__swbuf_r+0x84>
 80053f0:	6923      	ldr	r3, [r4, #16]
 80053f2:	b36b      	cbz	r3, 8005450 <__swbuf_r+0x84>
 80053f4:	6923      	ldr	r3, [r4, #16]
 80053f6:	6820      	ldr	r0, [r4, #0]
 80053f8:	1ac0      	subs	r0, r0, r3
 80053fa:	6963      	ldr	r3, [r4, #20]
 80053fc:	b2f6      	uxtb	r6, r6
 80053fe:	4283      	cmp	r3, r0
 8005400:	4637      	mov	r7, r6
 8005402:	dc04      	bgt.n	800540e <__swbuf_r+0x42>
 8005404:	4621      	mov	r1, r4
 8005406:	4628      	mov	r0, r5
 8005408:	f000 ffe2 	bl	80063d0 <_fflush_r>
 800540c:	bb30      	cbnz	r0, 800545c <__swbuf_r+0x90>
 800540e:	68a3      	ldr	r3, [r4, #8]
 8005410:	3b01      	subs	r3, #1
 8005412:	60a3      	str	r3, [r4, #8]
 8005414:	6823      	ldr	r3, [r4, #0]
 8005416:	1c5a      	adds	r2, r3, #1
 8005418:	6022      	str	r2, [r4, #0]
 800541a:	701e      	strb	r6, [r3, #0]
 800541c:	6963      	ldr	r3, [r4, #20]
 800541e:	3001      	adds	r0, #1
 8005420:	4283      	cmp	r3, r0
 8005422:	d004      	beq.n	800542e <__swbuf_r+0x62>
 8005424:	89a3      	ldrh	r3, [r4, #12]
 8005426:	07db      	lsls	r3, r3, #31
 8005428:	d506      	bpl.n	8005438 <__swbuf_r+0x6c>
 800542a:	2e0a      	cmp	r6, #10
 800542c:	d104      	bne.n	8005438 <__swbuf_r+0x6c>
 800542e:	4621      	mov	r1, r4
 8005430:	4628      	mov	r0, r5
 8005432:	f000 ffcd 	bl	80063d0 <_fflush_r>
 8005436:	b988      	cbnz	r0, 800545c <__swbuf_r+0x90>
 8005438:	4638      	mov	r0, r7
 800543a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800543c:	4b0a      	ldr	r3, [pc, #40]	; (8005468 <__swbuf_r+0x9c>)
 800543e:	429c      	cmp	r4, r3
 8005440:	d101      	bne.n	8005446 <__swbuf_r+0x7a>
 8005442:	68ac      	ldr	r4, [r5, #8]
 8005444:	e7cf      	b.n	80053e6 <__swbuf_r+0x1a>
 8005446:	4b09      	ldr	r3, [pc, #36]	; (800546c <__swbuf_r+0xa0>)
 8005448:	429c      	cmp	r4, r3
 800544a:	bf08      	it	eq
 800544c:	68ec      	ldreq	r4, [r5, #12]
 800544e:	e7ca      	b.n	80053e6 <__swbuf_r+0x1a>
 8005450:	4621      	mov	r1, r4
 8005452:	4628      	mov	r0, r5
 8005454:	f000 f81e 	bl	8005494 <__swsetup_r>
 8005458:	2800      	cmp	r0, #0
 800545a:	d0cb      	beq.n	80053f4 <__swbuf_r+0x28>
 800545c:	f04f 37ff 	mov.w	r7, #4294967295
 8005460:	e7ea      	b.n	8005438 <__swbuf_r+0x6c>
 8005462:	bf00      	nop
 8005464:	080074c8 	.word	0x080074c8
 8005468:	080074e8 	.word	0x080074e8
 800546c:	080074a8 	.word	0x080074a8

08005470 <_write_r>:
 8005470:	b538      	push	{r3, r4, r5, lr}
 8005472:	4d07      	ldr	r5, [pc, #28]	; (8005490 <_write_r+0x20>)
 8005474:	4604      	mov	r4, r0
 8005476:	4608      	mov	r0, r1
 8005478:	4611      	mov	r1, r2
 800547a:	2200      	movs	r2, #0
 800547c:	602a      	str	r2, [r5, #0]
 800547e:	461a      	mov	r2, r3
 8005480:	f7fe ffff 	bl	8004482 <_write>
 8005484:	1c43      	adds	r3, r0, #1
 8005486:	d102      	bne.n	800548e <_write_r+0x1e>
 8005488:	682b      	ldr	r3, [r5, #0]
 800548a:	b103      	cbz	r3, 800548e <_write_r+0x1e>
 800548c:	6023      	str	r3, [r4, #0]
 800548e:	bd38      	pop	{r3, r4, r5, pc}
 8005490:	20000350 	.word	0x20000350

08005494 <__swsetup_r>:
 8005494:	4b32      	ldr	r3, [pc, #200]	; (8005560 <__swsetup_r+0xcc>)
 8005496:	b570      	push	{r4, r5, r6, lr}
 8005498:	681d      	ldr	r5, [r3, #0]
 800549a:	4606      	mov	r6, r0
 800549c:	460c      	mov	r4, r1
 800549e:	b125      	cbz	r5, 80054aa <__swsetup_r+0x16>
 80054a0:	69ab      	ldr	r3, [r5, #24]
 80054a2:	b913      	cbnz	r3, 80054aa <__swsetup_r+0x16>
 80054a4:	4628      	mov	r0, r5
 80054a6:	f7ff f8ef 	bl	8004688 <__sinit>
 80054aa:	4b2e      	ldr	r3, [pc, #184]	; (8005564 <__swsetup_r+0xd0>)
 80054ac:	429c      	cmp	r4, r3
 80054ae:	d10f      	bne.n	80054d0 <__swsetup_r+0x3c>
 80054b0:	686c      	ldr	r4, [r5, #4]
 80054b2:	89a3      	ldrh	r3, [r4, #12]
 80054b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80054b8:	0719      	lsls	r1, r3, #28
 80054ba:	d42c      	bmi.n	8005516 <__swsetup_r+0x82>
 80054bc:	06dd      	lsls	r5, r3, #27
 80054be:	d411      	bmi.n	80054e4 <__swsetup_r+0x50>
 80054c0:	2309      	movs	r3, #9
 80054c2:	6033      	str	r3, [r6, #0]
 80054c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80054c8:	81a3      	strh	r3, [r4, #12]
 80054ca:	f04f 30ff 	mov.w	r0, #4294967295
 80054ce:	e03e      	b.n	800554e <__swsetup_r+0xba>
 80054d0:	4b25      	ldr	r3, [pc, #148]	; (8005568 <__swsetup_r+0xd4>)
 80054d2:	429c      	cmp	r4, r3
 80054d4:	d101      	bne.n	80054da <__swsetup_r+0x46>
 80054d6:	68ac      	ldr	r4, [r5, #8]
 80054d8:	e7eb      	b.n	80054b2 <__swsetup_r+0x1e>
 80054da:	4b24      	ldr	r3, [pc, #144]	; (800556c <__swsetup_r+0xd8>)
 80054dc:	429c      	cmp	r4, r3
 80054de:	bf08      	it	eq
 80054e0:	68ec      	ldreq	r4, [r5, #12]
 80054e2:	e7e6      	b.n	80054b2 <__swsetup_r+0x1e>
 80054e4:	0758      	lsls	r0, r3, #29
 80054e6:	d512      	bpl.n	800550e <__swsetup_r+0x7a>
 80054e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80054ea:	b141      	cbz	r1, 80054fe <__swsetup_r+0x6a>
 80054ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80054f0:	4299      	cmp	r1, r3
 80054f2:	d002      	beq.n	80054fa <__swsetup_r+0x66>
 80054f4:	4630      	mov	r0, r6
 80054f6:	f7ff f9ab 	bl	8004850 <_free_r>
 80054fa:	2300      	movs	r3, #0
 80054fc:	6363      	str	r3, [r4, #52]	; 0x34
 80054fe:	89a3      	ldrh	r3, [r4, #12]
 8005500:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005504:	81a3      	strh	r3, [r4, #12]
 8005506:	2300      	movs	r3, #0
 8005508:	6063      	str	r3, [r4, #4]
 800550a:	6923      	ldr	r3, [r4, #16]
 800550c:	6023      	str	r3, [r4, #0]
 800550e:	89a3      	ldrh	r3, [r4, #12]
 8005510:	f043 0308 	orr.w	r3, r3, #8
 8005514:	81a3      	strh	r3, [r4, #12]
 8005516:	6923      	ldr	r3, [r4, #16]
 8005518:	b94b      	cbnz	r3, 800552e <__swsetup_r+0x9a>
 800551a:	89a3      	ldrh	r3, [r4, #12]
 800551c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005520:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005524:	d003      	beq.n	800552e <__swsetup_r+0x9a>
 8005526:	4621      	mov	r1, r4
 8005528:	4630      	mov	r0, r6
 800552a:	f000 ffdb 	bl	80064e4 <__smakebuf_r>
 800552e:	89a0      	ldrh	r0, [r4, #12]
 8005530:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005534:	f010 0301 	ands.w	r3, r0, #1
 8005538:	d00a      	beq.n	8005550 <__swsetup_r+0xbc>
 800553a:	2300      	movs	r3, #0
 800553c:	60a3      	str	r3, [r4, #8]
 800553e:	6963      	ldr	r3, [r4, #20]
 8005540:	425b      	negs	r3, r3
 8005542:	61a3      	str	r3, [r4, #24]
 8005544:	6923      	ldr	r3, [r4, #16]
 8005546:	b943      	cbnz	r3, 800555a <__swsetup_r+0xc6>
 8005548:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800554c:	d1ba      	bne.n	80054c4 <__swsetup_r+0x30>
 800554e:	bd70      	pop	{r4, r5, r6, pc}
 8005550:	0781      	lsls	r1, r0, #30
 8005552:	bf58      	it	pl
 8005554:	6963      	ldrpl	r3, [r4, #20]
 8005556:	60a3      	str	r3, [r4, #8]
 8005558:	e7f4      	b.n	8005544 <__swsetup_r+0xb0>
 800555a:	2000      	movs	r0, #0
 800555c:	e7f7      	b.n	800554e <__swsetup_r+0xba>
 800555e:	bf00      	nop
 8005560:	2000000c 	.word	0x2000000c
 8005564:	080074c8 	.word	0x080074c8
 8005568:	080074e8 	.word	0x080074e8
 800556c:	080074a8 	.word	0x080074a8

08005570 <__assert_func>:
 8005570:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005572:	4614      	mov	r4, r2
 8005574:	461a      	mov	r2, r3
 8005576:	4b09      	ldr	r3, [pc, #36]	; (800559c <__assert_func+0x2c>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4605      	mov	r5, r0
 800557c:	68d8      	ldr	r0, [r3, #12]
 800557e:	b14c      	cbz	r4, 8005594 <__assert_func+0x24>
 8005580:	4b07      	ldr	r3, [pc, #28]	; (80055a0 <__assert_func+0x30>)
 8005582:	9100      	str	r1, [sp, #0]
 8005584:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005588:	4906      	ldr	r1, [pc, #24]	; (80055a4 <__assert_func+0x34>)
 800558a:	462b      	mov	r3, r5
 800558c:	f000 ff5c 	bl	8006448 <fiprintf>
 8005590:	f001 fe84 	bl	800729c <abort>
 8005594:	4b04      	ldr	r3, [pc, #16]	; (80055a8 <__assert_func+0x38>)
 8005596:	461c      	mov	r4, r3
 8005598:	e7f3      	b.n	8005582 <__assert_func+0x12>
 800559a:	bf00      	nop
 800559c:	2000000c 	.word	0x2000000c
 80055a0:	08007540 	.word	0x08007540
 80055a4:	0800754d 	.word	0x0800754d
 80055a8:	0800757b 	.word	0x0800757b

080055ac <_close_r>:
 80055ac:	b538      	push	{r3, r4, r5, lr}
 80055ae:	4d06      	ldr	r5, [pc, #24]	; (80055c8 <_close_r+0x1c>)
 80055b0:	2300      	movs	r3, #0
 80055b2:	4604      	mov	r4, r0
 80055b4:	4608      	mov	r0, r1
 80055b6:	602b      	str	r3, [r5, #0]
 80055b8:	f7fe ff94 	bl	80044e4 <_close>
 80055bc:	1c43      	adds	r3, r0, #1
 80055be:	d102      	bne.n	80055c6 <_close_r+0x1a>
 80055c0:	682b      	ldr	r3, [r5, #0]
 80055c2:	b103      	cbz	r3, 80055c6 <_close_r+0x1a>
 80055c4:	6023      	str	r3, [r4, #0]
 80055c6:	bd38      	pop	{r3, r4, r5, pc}
 80055c8:	20000350 	.word	0x20000350

080055cc <quorem>:
 80055cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055d0:	6903      	ldr	r3, [r0, #16]
 80055d2:	690c      	ldr	r4, [r1, #16]
 80055d4:	42a3      	cmp	r3, r4
 80055d6:	4607      	mov	r7, r0
 80055d8:	f2c0 8081 	blt.w	80056de <quorem+0x112>
 80055dc:	3c01      	subs	r4, #1
 80055de:	f101 0814 	add.w	r8, r1, #20
 80055e2:	f100 0514 	add.w	r5, r0, #20
 80055e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80055ea:	9301      	str	r3, [sp, #4]
 80055ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80055f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80055f4:	3301      	adds	r3, #1
 80055f6:	429a      	cmp	r2, r3
 80055f8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80055fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005600:	fbb2 f6f3 	udiv	r6, r2, r3
 8005604:	d331      	bcc.n	800566a <quorem+0x9e>
 8005606:	f04f 0e00 	mov.w	lr, #0
 800560a:	4640      	mov	r0, r8
 800560c:	46ac      	mov	ip, r5
 800560e:	46f2      	mov	sl, lr
 8005610:	f850 2b04 	ldr.w	r2, [r0], #4
 8005614:	b293      	uxth	r3, r2
 8005616:	fb06 e303 	mla	r3, r6, r3, lr
 800561a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800561e:	b29b      	uxth	r3, r3
 8005620:	ebaa 0303 	sub.w	r3, sl, r3
 8005624:	f8dc a000 	ldr.w	sl, [ip]
 8005628:	0c12      	lsrs	r2, r2, #16
 800562a:	fa13 f38a 	uxtah	r3, r3, sl
 800562e:	fb06 e202 	mla	r2, r6, r2, lr
 8005632:	9300      	str	r3, [sp, #0]
 8005634:	9b00      	ldr	r3, [sp, #0]
 8005636:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800563a:	b292      	uxth	r2, r2
 800563c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005640:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005644:	f8bd 3000 	ldrh.w	r3, [sp]
 8005648:	4581      	cmp	r9, r0
 800564a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800564e:	f84c 3b04 	str.w	r3, [ip], #4
 8005652:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005656:	d2db      	bcs.n	8005610 <quorem+0x44>
 8005658:	f855 300b 	ldr.w	r3, [r5, fp]
 800565c:	b92b      	cbnz	r3, 800566a <quorem+0x9e>
 800565e:	9b01      	ldr	r3, [sp, #4]
 8005660:	3b04      	subs	r3, #4
 8005662:	429d      	cmp	r5, r3
 8005664:	461a      	mov	r2, r3
 8005666:	d32e      	bcc.n	80056c6 <quorem+0xfa>
 8005668:	613c      	str	r4, [r7, #16]
 800566a:	4638      	mov	r0, r7
 800566c:	f001 fa08 	bl	8006a80 <__mcmp>
 8005670:	2800      	cmp	r0, #0
 8005672:	db24      	blt.n	80056be <quorem+0xf2>
 8005674:	3601      	adds	r6, #1
 8005676:	4628      	mov	r0, r5
 8005678:	f04f 0c00 	mov.w	ip, #0
 800567c:	f858 2b04 	ldr.w	r2, [r8], #4
 8005680:	f8d0 e000 	ldr.w	lr, [r0]
 8005684:	b293      	uxth	r3, r2
 8005686:	ebac 0303 	sub.w	r3, ip, r3
 800568a:	0c12      	lsrs	r2, r2, #16
 800568c:	fa13 f38e 	uxtah	r3, r3, lr
 8005690:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005694:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005698:	b29b      	uxth	r3, r3
 800569a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800569e:	45c1      	cmp	r9, r8
 80056a0:	f840 3b04 	str.w	r3, [r0], #4
 80056a4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80056a8:	d2e8      	bcs.n	800567c <quorem+0xb0>
 80056aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80056ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80056b2:	b922      	cbnz	r2, 80056be <quorem+0xf2>
 80056b4:	3b04      	subs	r3, #4
 80056b6:	429d      	cmp	r5, r3
 80056b8:	461a      	mov	r2, r3
 80056ba:	d30a      	bcc.n	80056d2 <quorem+0x106>
 80056bc:	613c      	str	r4, [r7, #16]
 80056be:	4630      	mov	r0, r6
 80056c0:	b003      	add	sp, #12
 80056c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056c6:	6812      	ldr	r2, [r2, #0]
 80056c8:	3b04      	subs	r3, #4
 80056ca:	2a00      	cmp	r2, #0
 80056cc:	d1cc      	bne.n	8005668 <quorem+0x9c>
 80056ce:	3c01      	subs	r4, #1
 80056d0:	e7c7      	b.n	8005662 <quorem+0x96>
 80056d2:	6812      	ldr	r2, [r2, #0]
 80056d4:	3b04      	subs	r3, #4
 80056d6:	2a00      	cmp	r2, #0
 80056d8:	d1f0      	bne.n	80056bc <quorem+0xf0>
 80056da:	3c01      	subs	r4, #1
 80056dc:	e7eb      	b.n	80056b6 <quorem+0xea>
 80056de:	2000      	movs	r0, #0
 80056e0:	e7ee      	b.n	80056c0 <quorem+0xf4>
 80056e2:	0000      	movs	r0, r0
 80056e4:	0000      	movs	r0, r0
	...

080056e8 <_dtoa_r>:
 80056e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056ec:	ed2d 8b04 	vpush	{d8-d9}
 80056f0:	ec57 6b10 	vmov	r6, r7, d0
 80056f4:	b093      	sub	sp, #76	; 0x4c
 80056f6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80056f8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80056fc:	9106      	str	r1, [sp, #24]
 80056fe:	ee10 aa10 	vmov	sl, s0
 8005702:	4604      	mov	r4, r0
 8005704:	9209      	str	r2, [sp, #36]	; 0x24
 8005706:	930c      	str	r3, [sp, #48]	; 0x30
 8005708:	46bb      	mov	fp, r7
 800570a:	b975      	cbnz	r5, 800572a <_dtoa_r+0x42>
 800570c:	2010      	movs	r0, #16
 800570e:	f7ff f881 	bl	8004814 <malloc>
 8005712:	4602      	mov	r2, r0
 8005714:	6260      	str	r0, [r4, #36]	; 0x24
 8005716:	b920      	cbnz	r0, 8005722 <_dtoa_r+0x3a>
 8005718:	4ba7      	ldr	r3, [pc, #668]	; (80059b8 <_dtoa_r+0x2d0>)
 800571a:	21ea      	movs	r1, #234	; 0xea
 800571c:	48a7      	ldr	r0, [pc, #668]	; (80059bc <_dtoa_r+0x2d4>)
 800571e:	f7ff ff27 	bl	8005570 <__assert_func>
 8005722:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005726:	6005      	str	r5, [r0, #0]
 8005728:	60c5      	str	r5, [r0, #12]
 800572a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800572c:	6819      	ldr	r1, [r3, #0]
 800572e:	b151      	cbz	r1, 8005746 <_dtoa_r+0x5e>
 8005730:	685a      	ldr	r2, [r3, #4]
 8005732:	604a      	str	r2, [r1, #4]
 8005734:	2301      	movs	r3, #1
 8005736:	4093      	lsls	r3, r2
 8005738:	608b      	str	r3, [r1, #8]
 800573a:	4620      	mov	r0, r4
 800573c:	f000 ff5e 	bl	80065fc <_Bfree>
 8005740:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005742:	2200      	movs	r2, #0
 8005744:	601a      	str	r2, [r3, #0]
 8005746:	1e3b      	subs	r3, r7, #0
 8005748:	bfaa      	itet	ge
 800574a:	2300      	movge	r3, #0
 800574c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005750:	f8c8 3000 	strge.w	r3, [r8]
 8005754:	4b9a      	ldr	r3, [pc, #616]	; (80059c0 <_dtoa_r+0x2d8>)
 8005756:	bfbc      	itt	lt
 8005758:	2201      	movlt	r2, #1
 800575a:	f8c8 2000 	strlt.w	r2, [r8]
 800575e:	ea33 030b 	bics.w	r3, r3, fp
 8005762:	d11b      	bne.n	800579c <_dtoa_r+0xb4>
 8005764:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005766:	f242 730f 	movw	r3, #9999	; 0x270f
 800576a:	6013      	str	r3, [r2, #0]
 800576c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005770:	4333      	orrs	r3, r6
 8005772:	f000 8592 	beq.w	800629a <_dtoa_r+0xbb2>
 8005776:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005778:	b963      	cbnz	r3, 8005794 <_dtoa_r+0xac>
 800577a:	4b92      	ldr	r3, [pc, #584]	; (80059c4 <_dtoa_r+0x2dc>)
 800577c:	e022      	b.n	80057c4 <_dtoa_r+0xdc>
 800577e:	4b92      	ldr	r3, [pc, #584]	; (80059c8 <_dtoa_r+0x2e0>)
 8005780:	9301      	str	r3, [sp, #4]
 8005782:	3308      	adds	r3, #8
 8005784:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005786:	6013      	str	r3, [r2, #0]
 8005788:	9801      	ldr	r0, [sp, #4]
 800578a:	b013      	add	sp, #76	; 0x4c
 800578c:	ecbd 8b04 	vpop	{d8-d9}
 8005790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005794:	4b8b      	ldr	r3, [pc, #556]	; (80059c4 <_dtoa_r+0x2dc>)
 8005796:	9301      	str	r3, [sp, #4]
 8005798:	3303      	adds	r3, #3
 800579a:	e7f3      	b.n	8005784 <_dtoa_r+0x9c>
 800579c:	2200      	movs	r2, #0
 800579e:	2300      	movs	r3, #0
 80057a0:	4650      	mov	r0, sl
 80057a2:	4659      	mov	r1, fp
 80057a4:	f7fb f990 	bl	8000ac8 <__aeabi_dcmpeq>
 80057a8:	ec4b ab19 	vmov	d9, sl, fp
 80057ac:	4680      	mov	r8, r0
 80057ae:	b158      	cbz	r0, 80057c8 <_dtoa_r+0xe0>
 80057b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80057b2:	2301      	movs	r3, #1
 80057b4:	6013      	str	r3, [r2, #0]
 80057b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	f000 856b 	beq.w	8006294 <_dtoa_r+0xbac>
 80057be:	4883      	ldr	r0, [pc, #524]	; (80059cc <_dtoa_r+0x2e4>)
 80057c0:	6018      	str	r0, [r3, #0]
 80057c2:	1e43      	subs	r3, r0, #1
 80057c4:	9301      	str	r3, [sp, #4]
 80057c6:	e7df      	b.n	8005788 <_dtoa_r+0xa0>
 80057c8:	ec4b ab10 	vmov	d0, sl, fp
 80057cc:	aa10      	add	r2, sp, #64	; 0x40
 80057ce:	a911      	add	r1, sp, #68	; 0x44
 80057d0:	4620      	mov	r0, r4
 80057d2:	f001 f9fb 	bl	8006bcc <__d2b>
 80057d6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80057da:	ee08 0a10 	vmov	s16, r0
 80057de:	2d00      	cmp	r5, #0
 80057e0:	f000 8084 	beq.w	80058ec <_dtoa_r+0x204>
 80057e4:	ee19 3a90 	vmov	r3, s19
 80057e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80057ec:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80057f0:	4656      	mov	r6, sl
 80057f2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80057f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80057fa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80057fe:	4b74      	ldr	r3, [pc, #464]	; (80059d0 <_dtoa_r+0x2e8>)
 8005800:	2200      	movs	r2, #0
 8005802:	4630      	mov	r0, r6
 8005804:	4639      	mov	r1, r7
 8005806:	f7fa fd3f 	bl	8000288 <__aeabi_dsub>
 800580a:	a365      	add	r3, pc, #404	; (adr r3, 80059a0 <_dtoa_r+0x2b8>)
 800580c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005810:	f7fa fef2 	bl	80005f8 <__aeabi_dmul>
 8005814:	a364      	add	r3, pc, #400	; (adr r3, 80059a8 <_dtoa_r+0x2c0>)
 8005816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800581a:	f7fa fd37 	bl	800028c <__adddf3>
 800581e:	4606      	mov	r6, r0
 8005820:	4628      	mov	r0, r5
 8005822:	460f      	mov	r7, r1
 8005824:	f7fa fe7e 	bl	8000524 <__aeabi_i2d>
 8005828:	a361      	add	r3, pc, #388	; (adr r3, 80059b0 <_dtoa_r+0x2c8>)
 800582a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800582e:	f7fa fee3 	bl	80005f8 <__aeabi_dmul>
 8005832:	4602      	mov	r2, r0
 8005834:	460b      	mov	r3, r1
 8005836:	4630      	mov	r0, r6
 8005838:	4639      	mov	r1, r7
 800583a:	f7fa fd27 	bl	800028c <__adddf3>
 800583e:	4606      	mov	r6, r0
 8005840:	460f      	mov	r7, r1
 8005842:	f7fb f989 	bl	8000b58 <__aeabi_d2iz>
 8005846:	2200      	movs	r2, #0
 8005848:	9000      	str	r0, [sp, #0]
 800584a:	2300      	movs	r3, #0
 800584c:	4630      	mov	r0, r6
 800584e:	4639      	mov	r1, r7
 8005850:	f7fb f944 	bl	8000adc <__aeabi_dcmplt>
 8005854:	b150      	cbz	r0, 800586c <_dtoa_r+0x184>
 8005856:	9800      	ldr	r0, [sp, #0]
 8005858:	f7fa fe64 	bl	8000524 <__aeabi_i2d>
 800585c:	4632      	mov	r2, r6
 800585e:	463b      	mov	r3, r7
 8005860:	f7fb f932 	bl	8000ac8 <__aeabi_dcmpeq>
 8005864:	b910      	cbnz	r0, 800586c <_dtoa_r+0x184>
 8005866:	9b00      	ldr	r3, [sp, #0]
 8005868:	3b01      	subs	r3, #1
 800586a:	9300      	str	r3, [sp, #0]
 800586c:	9b00      	ldr	r3, [sp, #0]
 800586e:	2b16      	cmp	r3, #22
 8005870:	d85a      	bhi.n	8005928 <_dtoa_r+0x240>
 8005872:	9a00      	ldr	r2, [sp, #0]
 8005874:	4b57      	ldr	r3, [pc, #348]	; (80059d4 <_dtoa_r+0x2ec>)
 8005876:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800587a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800587e:	ec51 0b19 	vmov	r0, r1, d9
 8005882:	f7fb f92b 	bl	8000adc <__aeabi_dcmplt>
 8005886:	2800      	cmp	r0, #0
 8005888:	d050      	beq.n	800592c <_dtoa_r+0x244>
 800588a:	9b00      	ldr	r3, [sp, #0]
 800588c:	3b01      	subs	r3, #1
 800588e:	9300      	str	r3, [sp, #0]
 8005890:	2300      	movs	r3, #0
 8005892:	930b      	str	r3, [sp, #44]	; 0x2c
 8005894:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005896:	1b5d      	subs	r5, r3, r5
 8005898:	1e6b      	subs	r3, r5, #1
 800589a:	9305      	str	r3, [sp, #20]
 800589c:	bf45      	ittet	mi
 800589e:	f1c5 0301 	rsbmi	r3, r5, #1
 80058a2:	9304      	strmi	r3, [sp, #16]
 80058a4:	2300      	movpl	r3, #0
 80058a6:	2300      	movmi	r3, #0
 80058a8:	bf4c      	ite	mi
 80058aa:	9305      	strmi	r3, [sp, #20]
 80058ac:	9304      	strpl	r3, [sp, #16]
 80058ae:	9b00      	ldr	r3, [sp, #0]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	db3d      	blt.n	8005930 <_dtoa_r+0x248>
 80058b4:	9b05      	ldr	r3, [sp, #20]
 80058b6:	9a00      	ldr	r2, [sp, #0]
 80058b8:	920a      	str	r2, [sp, #40]	; 0x28
 80058ba:	4413      	add	r3, r2
 80058bc:	9305      	str	r3, [sp, #20]
 80058be:	2300      	movs	r3, #0
 80058c0:	9307      	str	r3, [sp, #28]
 80058c2:	9b06      	ldr	r3, [sp, #24]
 80058c4:	2b09      	cmp	r3, #9
 80058c6:	f200 8089 	bhi.w	80059dc <_dtoa_r+0x2f4>
 80058ca:	2b05      	cmp	r3, #5
 80058cc:	bfc4      	itt	gt
 80058ce:	3b04      	subgt	r3, #4
 80058d0:	9306      	strgt	r3, [sp, #24]
 80058d2:	9b06      	ldr	r3, [sp, #24]
 80058d4:	f1a3 0302 	sub.w	r3, r3, #2
 80058d8:	bfcc      	ite	gt
 80058da:	2500      	movgt	r5, #0
 80058dc:	2501      	movle	r5, #1
 80058de:	2b03      	cmp	r3, #3
 80058e0:	f200 8087 	bhi.w	80059f2 <_dtoa_r+0x30a>
 80058e4:	e8df f003 	tbb	[pc, r3]
 80058e8:	59383a2d 	.word	0x59383a2d
 80058ec:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80058f0:	441d      	add	r5, r3
 80058f2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80058f6:	2b20      	cmp	r3, #32
 80058f8:	bfc1      	itttt	gt
 80058fa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80058fe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005902:	fa0b f303 	lslgt.w	r3, fp, r3
 8005906:	fa26 f000 	lsrgt.w	r0, r6, r0
 800590a:	bfda      	itte	le
 800590c:	f1c3 0320 	rsble	r3, r3, #32
 8005910:	fa06 f003 	lslle.w	r0, r6, r3
 8005914:	4318      	orrgt	r0, r3
 8005916:	f7fa fdf5 	bl	8000504 <__aeabi_ui2d>
 800591a:	2301      	movs	r3, #1
 800591c:	4606      	mov	r6, r0
 800591e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005922:	3d01      	subs	r5, #1
 8005924:	930e      	str	r3, [sp, #56]	; 0x38
 8005926:	e76a      	b.n	80057fe <_dtoa_r+0x116>
 8005928:	2301      	movs	r3, #1
 800592a:	e7b2      	b.n	8005892 <_dtoa_r+0x1aa>
 800592c:	900b      	str	r0, [sp, #44]	; 0x2c
 800592e:	e7b1      	b.n	8005894 <_dtoa_r+0x1ac>
 8005930:	9b04      	ldr	r3, [sp, #16]
 8005932:	9a00      	ldr	r2, [sp, #0]
 8005934:	1a9b      	subs	r3, r3, r2
 8005936:	9304      	str	r3, [sp, #16]
 8005938:	4253      	negs	r3, r2
 800593a:	9307      	str	r3, [sp, #28]
 800593c:	2300      	movs	r3, #0
 800593e:	930a      	str	r3, [sp, #40]	; 0x28
 8005940:	e7bf      	b.n	80058c2 <_dtoa_r+0x1da>
 8005942:	2300      	movs	r3, #0
 8005944:	9308      	str	r3, [sp, #32]
 8005946:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005948:	2b00      	cmp	r3, #0
 800594a:	dc55      	bgt.n	80059f8 <_dtoa_r+0x310>
 800594c:	2301      	movs	r3, #1
 800594e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005952:	461a      	mov	r2, r3
 8005954:	9209      	str	r2, [sp, #36]	; 0x24
 8005956:	e00c      	b.n	8005972 <_dtoa_r+0x28a>
 8005958:	2301      	movs	r3, #1
 800595a:	e7f3      	b.n	8005944 <_dtoa_r+0x25c>
 800595c:	2300      	movs	r3, #0
 800595e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005960:	9308      	str	r3, [sp, #32]
 8005962:	9b00      	ldr	r3, [sp, #0]
 8005964:	4413      	add	r3, r2
 8005966:	9302      	str	r3, [sp, #8]
 8005968:	3301      	adds	r3, #1
 800596a:	2b01      	cmp	r3, #1
 800596c:	9303      	str	r3, [sp, #12]
 800596e:	bfb8      	it	lt
 8005970:	2301      	movlt	r3, #1
 8005972:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005974:	2200      	movs	r2, #0
 8005976:	6042      	str	r2, [r0, #4]
 8005978:	2204      	movs	r2, #4
 800597a:	f102 0614 	add.w	r6, r2, #20
 800597e:	429e      	cmp	r6, r3
 8005980:	6841      	ldr	r1, [r0, #4]
 8005982:	d93d      	bls.n	8005a00 <_dtoa_r+0x318>
 8005984:	4620      	mov	r0, r4
 8005986:	f000 fdf9 	bl	800657c <_Balloc>
 800598a:	9001      	str	r0, [sp, #4]
 800598c:	2800      	cmp	r0, #0
 800598e:	d13b      	bne.n	8005a08 <_dtoa_r+0x320>
 8005990:	4b11      	ldr	r3, [pc, #68]	; (80059d8 <_dtoa_r+0x2f0>)
 8005992:	4602      	mov	r2, r0
 8005994:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005998:	e6c0      	b.n	800571c <_dtoa_r+0x34>
 800599a:	2301      	movs	r3, #1
 800599c:	e7df      	b.n	800595e <_dtoa_r+0x276>
 800599e:	bf00      	nop
 80059a0:	636f4361 	.word	0x636f4361
 80059a4:	3fd287a7 	.word	0x3fd287a7
 80059a8:	8b60c8b3 	.word	0x8b60c8b3
 80059ac:	3fc68a28 	.word	0x3fc68a28
 80059b0:	509f79fb 	.word	0x509f79fb
 80059b4:	3fd34413 	.word	0x3fd34413
 80059b8:	08007589 	.word	0x08007589
 80059bc:	080075a0 	.word	0x080075a0
 80059c0:	7ff00000 	.word	0x7ff00000
 80059c4:	08007585 	.word	0x08007585
 80059c8:	0800757c 	.word	0x0800757c
 80059cc:	0800751d 	.word	0x0800751d
 80059d0:	3ff80000 	.word	0x3ff80000
 80059d4:	08007690 	.word	0x08007690
 80059d8:	080075fb 	.word	0x080075fb
 80059dc:	2501      	movs	r5, #1
 80059de:	2300      	movs	r3, #0
 80059e0:	9306      	str	r3, [sp, #24]
 80059e2:	9508      	str	r5, [sp, #32]
 80059e4:	f04f 33ff 	mov.w	r3, #4294967295
 80059e8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80059ec:	2200      	movs	r2, #0
 80059ee:	2312      	movs	r3, #18
 80059f0:	e7b0      	b.n	8005954 <_dtoa_r+0x26c>
 80059f2:	2301      	movs	r3, #1
 80059f4:	9308      	str	r3, [sp, #32]
 80059f6:	e7f5      	b.n	80059e4 <_dtoa_r+0x2fc>
 80059f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059fa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80059fe:	e7b8      	b.n	8005972 <_dtoa_r+0x28a>
 8005a00:	3101      	adds	r1, #1
 8005a02:	6041      	str	r1, [r0, #4]
 8005a04:	0052      	lsls	r2, r2, #1
 8005a06:	e7b8      	b.n	800597a <_dtoa_r+0x292>
 8005a08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a0a:	9a01      	ldr	r2, [sp, #4]
 8005a0c:	601a      	str	r2, [r3, #0]
 8005a0e:	9b03      	ldr	r3, [sp, #12]
 8005a10:	2b0e      	cmp	r3, #14
 8005a12:	f200 809d 	bhi.w	8005b50 <_dtoa_r+0x468>
 8005a16:	2d00      	cmp	r5, #0
 8005a18:	f000 809a 	beq.w	8005b50 <_dtoa_r+0x468>
 8005a1c:	9b00      	ldr	r3, [sp, #0]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	dd32      	ble.n	8005a88 <_dtoa_r+0x3a0>
 8005a22:	4ab7      	ldr	r2, [pc, #732]	; (8005d00 <_dtoa_r+0x618>)
 8005a24:	f003 030f 	and.w	r3, r3, #15
 8005a28:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005a2c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005a30:	9b00      	ldr	r3, [sp, #0]
 8005a32:	05d8      	lsls	r0, r3, #23
 8005a34:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005a38:	d516      	bpl.n	8005a68 <_dtoa_r+0x380>
 8005a3a:	4bb2      	ldr	r3, [pc, #712]	; (8005d04 <_dtoa_r+0x61c>)
 8005a3c:	ec51 0b19 	vmov	r0, r1, d9
 8005a40:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005a44:	f7fa ff02 	bl	800084c <__aeabi_ddiv>
 8005a48:	f007 070f 	and.w	r7, r7, #15
 8005a4c:	4682      	mov	sl, r0
 8005a4e:	468b      	mov	fp, r1
 8005a50:	2503      	movs	r5, #3
 8005a52:	4eac      	ldr	r6, [pc, #688]	; (8005d04 <_dtoa_r+0x61c>)
 8005a54:	b957      	cbnz	r7, 8005a6c <_dtoa_r+0x384>
 8005a56:	4642      	mov	r2, r8
 8005a58:	464b      	mov	r3, r9
 8005a5a:	4650      	mov	r0, sl
 8005a5c:	4659      	mov	r1, fp
 8005a5e:	f7fa fef5 	bl	800084c <__aeabi_ddiv>
 8005a62:	4682      	mov	sl, r0
 8005a64:	468b      	mov	fp, r1
 8005a66:	e028      	b.n	8005aba <_dtoa_r+0x3d2>
 8005a68:	2502      	movs	r5, #2
 8005a6a:	e7f2      	b.n	8005a52 <_dtoa_r+0x36a>
 8005a6c:	07f9      	lsls	r1, r7, #31
 8005a6e:	d508      	bpl.n	8005a82 <_dtoa_r+0x39a>
 8005a70:	4640      	mov	r0, r8
 8005a72:	4649      	mov	r1, r9
 8005a74:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005a78:	f7fa fdbe 	bl	80005f8 <__aeabi_dmul>
 8005a7c:	3501      	adds	r5, #1
 8005a7e:	4680      	mov	r8, r0
 8005a80:	4689      	mov	r9, r1
 8005a82:	107f      	asrs	r7, r7, #1
 8005a84:	3608      	adds	r6, #8
 8005a86:	e7e5      	b.n	8005a54 <_dtoa_r+0x36c>
 8005a88:	f000 809b 	beq.w	8005bc2 <_dtoa_r+0x4da>
 8005a8c:	9b00      	ldr	r3, [sp, #0]
 8005a8e:	4f9d      	ldr	r7, [pc, #628]	; (8005d04 <_dtoa_r+0x61c>)
 8005a90:	425e      	negs	r6, r3
 8005a92:	4b9b      	ldr	r3, [pc, #620]	; (8005d00 <_dtoa_r+0x618>)
 8005a94:	f006 020f 	and.w	r2, r6, #15
 8005a98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa0:	ec51 0b19 	vmov	r0, r1, d9
 8005aa4:	f7fa fda8 	bl	80005f8 <__aeabi_dmul>
 8005aa8:	1136      	asrs	r6, r6, #4
 8005aaa:	4682      	mov	sl, r0
 8005aac:	468b      	mov	fp, r1
 8005aae:	2300      	movs	r3, #0
 8005ab0:	2502      	movs	r5, #2
 8005ab2:	2e00      	cmp	r6, #0
 8005ab4:	d17a      	bne.n	8005bac <_dtoa_r+0x4c4>
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d1d3      	bne.n	8005a62 <_dtoa_r+0x37a>
 8005aba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	f000 8082 	beq.w	8005bc6 <_dtoa_r+0x4de>
 8005ac2:	4b91      	ldr	r3, [pc, #580]	; (8005d08 <_dtoa_r+0x620>)
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	4650      	mov	r0, sl
 8005ac8:	4659      	mov	r1, fp
 8005aca:	f7fb f807 	bl	8000adc <__aeabi_dcmplt>
 8005ace:	2800      	cmp	r0, #0
 8005ad0:	d079      	beq.n	8005bc6 <_dtoa_r+0x4de>
 8005ad2:	9b03      	ldr	r3, [sp, #12]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d076      	beq.n	8005bc6 <_dtoa_r+0x4de>
 8005ad8:	9b02      	ldr	r3, [sp, #8]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	dd36      	ble.n	8005b4c <_dtoa_r+0x464>
 8005ade:	9b00      	ldr	r3, [sp, #0]
 8005ae0:	4650      	mov	r0, sl
 8005ae2:	4659      	mov	r1, fp
 8005ae4:	1e5f      	subs	r7, r3, #1
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	4b88      	ldr	r3, [pc, #544]	; (8005d0c <_dtoa_r+0x624>)
 8005aea:	f7fa fd85 	bl	80005f8 <__aeabi_dmul>
 8005aee:	9e02      	ldr	r6, [sp, #8]
 8005af0:	4682      	mov	sl, r0
 8005af2:	468b      	mov	fp, r1
 8005af4:	3501      	adds	r5, #1
 8005af6:	4628      	mov	r0, r5
 8005af8:	f7fa fd14 	bl	8000524 <__aeabi_i2d>
 8005afc:	4652      	mov	r2, sl
 8005afe:	465b      	mov	r3, fp
 8005b00:	f7fa fd7a 	bl	80005f8 <__aeabi_dmul>
 8005b04:	4b82      	ldr	r3, [pc, #520]	; (8005d10 <_dtoa_r+0x628>)
 8005b06:	2200      	movs	r2, #0
 8005b08:	f7fa fbc0 	bl	800028c <__adddf3>
 8005b0c:	46d0      	mov	r8, sl
 8005b0e:	46d9      	mov	r9, fp
 8005b10:	4682      	mov	sl, r0
 8005b12:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005b16:	2e00      	cmp	r6, #0
 8005b18:	d158      	bne.n	8005bcc <_dtoa_r+0x4e4>
 8005b1a:	4b7e      	ldr	r3, [pc, #504]	; (8005d14 <_dtoa_r+0x62c>)
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	4640      	mov	r0, r8
 8005b20:	4649      	mov	r1, r9
 8005b22:	f7fa fbb1 	bl	8000288 <__aeabi_dsub>
 8005b26:	4652      	mov	r2, sl
 8005b28:	465b      	mov	r3, fp
 8005b2a:	4680      	mov	r8, r0
 8005b2c:	4689      	mov	r9, r1
 8005b2e:	f7fa fff3 	bl	8000b18 <__aeabi_dcmpgt>
 8005b32:	2800      	cmp	r0, #0
 8005b34:	f040 8295 	bne.w	8006062 <_dtoa_r+0x97a>
 8005b38:	4652      	mov	r2, sl
 8005b3a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005b3e:	4640      	mov	r0, r8
 8005b40:	4649      	mov	r1, r9
 8005b42:	f7fa ffcb 	bl	8000adc <__aeabi_dcmplt>
 8005b46:	2800      	cmp	r0, #0
 8005b48:	f040 8289 	bne.w	800605e <_dtoa_r+0x976>
 8005b4c:	ec5b ab19 	vmov	sl, fp, d9
 8005b50:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	f2c0 8148 	blt.w	8005de8 <_dtoa_r+0x700>
 8005b58:	9a00      	ldr	r2, [sp, #0]
 8005b5a:	2a0e      	cmp	r2, #14
 8005b5c:	f300 8144 	bgt.w	8005de8 <_dtoa_r+0x700>
 8005b60:	4b67      	ldr	r3, [pc, #412]	; (8005d00 <_dtoa_r+0x618>)
 8005b62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b66:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005b6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	f280 80d5 	bge.w	8005d1c <_dtoa_r+0x634>
 8005b72:	9b03      	ldr	r3, [sp, #12]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	f300 80d1 	bgt.w	8005d1c <_dtoa_r+0x634>
 8005b7a:	f040 826f 	bne.w	800605c <_dtoa_r+0x974>
 8005b7e:	4b65      	ldr	r3, [pc, #404]	; (8005d14 <_dtoa_r+0x62c>)
 8005b80:	2200      	movs	r2, #0
 8005b82:	4640      	mov	r0, r8
 8005b84:	4649      	mov	r1, r9
 8005b86:	f7fa fd37 	bl	80005f8 <__aeabi_dmul>
 8005b8a:	4652      	mov	r2, sl
 8005b8c:	465b      	mov	r3, fp
 8005b8e:	f7fa ffb9 	bl	8000b04 <__aeabi_dcmpge>
 8005b92:	9e03      	ldr	r6, [sp, #12]
 8005b94:	4637      	mov	r7, r6
 8005b96:	2800      	cmp	r0, #0
 8005b98:	f040 8245 	bne.w	8006026 <_dtoa_r+0x93e>
 8005b9c:	9d01      	ldr	r5, [sp, #4]
 8005b9e:	2331      	movs	r3, #49	; 0x31
 8005ba0:	f805 3b01 	strb.w	r3, [r5], #1
 8005ba4:	9b00      	ldr	r3, [sp, #0]
 8005ba6:	3301      	adds	r3, #1
 8005ba8:	9300      	str	r3, [sp, #0]
 8005baa:	e240      	b.n	800602e <_dtoa_r+0x946>
 8005bac:	07f2      	lsls	r2, r6, #31
 8005bae:	d505      	bpl.n	8005bbc <_dtoa_r+0x4d4>
 8005bb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bb4:	f7fa fd20 	bl	80005f8 <__aeabi_dmul>
 8005bb8:	3501      	adds	r5, #1
 8005bba:	2301      	movs	r3, #1
 8005bbc:	1076      	asrs	r6, r6, #1
 8005bbe:	3708      	adds	r7, #8
 8005bc0:	e777      	b.n	8005ab2 <_dtoa_r+0x3ca>
 8005bc2:	2502      	movs	r5, #2
 8005bc4:	e779      	b.n	8005aba <_dtoa_r+0x3d2>
 8005bc6:	9f00      	ldr	r7, [sp, #0]
 8005bc8:	9e03      	ldr	r6, [sp, #12]
 8005bca:	e794      	b.n	8005af6 <_dtoa_r+0x40e>
 8005bcc:	9901      	ldr	r1, [sp, #4]
 8005bce:	4b4c      	ldr	r3, [pc, #304]	; (8005d00 <_dtoa_r+0x618>)
 8005bd0:	4431      	add	r1, r6
 8005bd2:	910d      	str	r1, [sp, #52]	; 0x34
 8005bd4:	9908      	ldr	r1, [sp, #32]
 8005bd6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005bda:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005bde:	2900      	cmp	r1, #0
 8005be0:	d043      	beq.n	8005c6a <_dtoa_r+0x582>
 8005be2:	494d      	ldr	r1, [pc, #308]	; (8005d18 <_dtoa_r+0x630>)
 8005be4:	2000      	movs	r0, #0
 8005be6:	f7fa fe31 	bl	800084c <__aeabi_ddiv>
 8005bea:	4652      	mov	r2, sl
 8005bec:	465b      	mov	r3, fp
 8005bee:	f7fa fb4b 	bl	8000288 <__aeabi_dsub>
 8005bf2:	9d01      	ldr	r5, [sp, #4]
 8005bf4:	4682      	mov	sl, r0
 8005bf6:	468b      	mov	fp, r1
 8005bf8:	4649      	mov	r1, r9
 8005bfa:	4640      	mov	r0, r8
 8005bfc:	f7fa ffac 	bl	8000b58 <__aeabi_d2iz>
 8005c00:	4606      	mov	r6, r0
 8005c02:	f7fa fc8f 	bl	8000524 <__aeabi_i2d>
 8005c06:	4602      	mov	r2, r0
 8005c08:	460b      	mov	r3, r1
 8005c0a:	4640      	mov	r0, r8
 8005c0c:	4649      	mov	r1, r9
 8005c0e:	f7fa fb3b 	bl	8000288 <__aeabi_dsub>
 8005c12:	3630      	adds	r6, #48	; 0x30
 8005c14:	f805 6b01 	strb.w	r6, [r5], #1
 8005c18:	4652      	mov	r2, sl
 8005c1a:	465b      	mov	r3, fp
 8005c1c:	4680      	mov	r8, r0
 8005c1e:	4689      	mov	r9, r1
 8005c20:	f7fa ff5c 	bl	8000adc <__aeabi_dcmplt>
 8005c24:	2800      	cmp	r0, #0
 8005c26:	d163      	bne.n	8005cf0 <_dtoa_r+0x608>
 8005c28:	4642      	mov	r2, r8
 8005c2a:	464b      	mov	r3, r9
 8005c2c:	4936      	ldr	r1, [pc, #216]	; (8005d08 <_dtoa_r+0x620>)
 8005c2e:	2000      	movs	r0, #0
 8005c30:	f7fa fb2a 	bl	8000288 <__aeabi_dsub>
 8005c34:	4652      	mov	r2, sl
 8005c36:	465b      	mov	r3, fp
 8005c38:	f7fa ff50 	bl	8000adc <__aeabi_dcmplt>
 8005c3c:	2800      	cmp	r0, #0
 8005c3e:	f040 80b5 	bne.w	8005dac <_dtoa_r+0x6c4>
 8005c42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c44:	429d      	cmp	r5, r3
 8005c46:	d081      	beq.n	8005b4c <_dtoa_r+0x464>
 8005c48:	4b30      	ldr	r3, [pc, #192]	; (8005d0c <_dtoa_r+0x624>)
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	4650      	mov	r0, sl
 8005c4e:	4659      	mov	r1, fp
 8005c50:	f7fa fcd2 	bl	80005f8 <__aeabi_dmul>
 8005c54:	4b2d      	ldr	r3, [pc, #180]	; (8005d0c <_dtoa_r+0x624>)
 8005c56:	4682      	mov	sl, r0
 8005c58:	468b      	mov	fp, r1
 8005c5a:	4640      	mov	r0, r8
 8005c5c:	4649      	mov	r1, r9
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f7fa fcca 	bl	80005f8 <__aeabi_dmul>
 8005c64:	4680      	mov	r8, r0
 8005c66:	4689      	mov	r9, r1
 8005c68:	e7c6      	b.n	8005bf8 <_dtoa_r+0x510>
 8005c6a:	4650      	mov	r0, sl
 8005c6c:	4659      	mov	r1, fp
 8005c6e:	f7fa fcc3 	bl	80005f8 <__aeabi_dmul>
 8005c72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c74:	9d01      	ldr	r5, [sp, #4]
 8005c76:	930f      	str	r3, [sp, #60]	; 0x3c
 8005c78:	4682      	mov	sl, r0
 8005c7a:	468b      	mov	fp, r1
 8005c7c:	4649      	mov	r1, r9
 8005c7e:	4640      	mov	r0, r8
 8005c80:	f7fa ff6a 	bl	8000b58 <__aeabi_d2iz>
 8005c84:	4606      	mov	r6, r0
 8005c86:	f7fa fc4d 	bl	8000524 <__aeabi_i2d>
 8005c8a:	3630      	adds	r6, #48	; 0x30
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	460b      	mov	r3, r1
 8005c90:	4640      	mov	r0, r8
 8005c92:	4649      	mov	r1, r9
 8005c94:	f7fa faf8 	bl	8000288 <__aeabi_dsub>
 8005c98:	f805 6b01 	strb.w	r6, [r5], #1
 8005c9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c9e:	429d      	cmp	r5, r3
 8005ca0:	4680      	mov	r8, r0
 8005ca2:	4689      	mov	r9, r1
 8005ca4:	f04f 0200 	mov.w	r2, #0
 8005ca8:	d124      	bne.n	8005cf4 <_dtoa_r+0x60c>
 8005caa:	4b1b      	ldr	r3, [pc, #108]	; (8005d18 <_dtoa_r+0x630>)
 8005cac:	4650      	mov	r0, sl
 8005cae:	4659      	mov	r1, fp
 8005cb0:	f7fa faec 	bl	800028c <__adddf3>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	460b      	mov	r3, r1
 8005cb8:	4640      	mov	r0, r8
 8005cba:	4649      	mov	r1, r9
 8005cbc:	f7fa ff2c 	bl	8000b18 <__aeabi_dcmpgt>
 8005cc0:	2800      	cmp	r0, #0
 8005cc2:	d173      	bne.n	8005dac <_dtoa_r+0x6c4>
 8005cc4:	4652      	mov	r2, sl
 8005cc6:	465b      	mov	r3, fp
 8005cc8:	4913      	ldr	r1, [pc, #76]	; (8005d18 <_dtoa_r+0x630>)
 8005cca:	2000      	movs	r0, #0
 8005ccc:	f7fa fadc 	bl	8000288 <__aeabi_dsub>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	460b      	mov	r3, r1
 8005cd4:	4640      	mov	r0, r8
 8005cd6:	4649      	mov	r1, r9
 8005cd8:	f7fa ff00 	bl	8000adc <__aeabi_dcmplt>
 8005cdc:	2800      	cmp	r0, #0
 8005cde:	f43f af35 	beq.w	8005b4c <_dtoa_r+0x464>
 8005ce2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005ce4:	1e6b      	subs	r3, r5, #1
 8005ce6:	930f      	str	r3, [sp, #60]	; 0x3c
 8005ce8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005cec:	2b30      	cmp	r3, #48	; 0x30
 8005cee:	d0f8      	beq.n	8005ce2 <_dtoa_r+0x5fa>
 8005cf0:	9700      	str	r7, [sp, #0]
 8005cf2:	e049      	b.n	8005d88 <_dtoa_r+0x6a0>
 8005cf4:	4b05      	ldr	r3, [pc, #20]	; (8005d0c <_dtoa_r+0x624>)
 8005cf6:	f7fa fc7f 	bl	80005f8 <__aeabi_dmul>
 8005cfa:	4680      	mov	r8, r0
 8005cfc:	4689      	mov	r9, r1
 8005cfe:	e7bd      	b.n	8005c7c <_dtoa_r+0x594>
 8005d00:	08007690 	.word	0x08007690
 8005d04:	08007668 	.word	0x08007668
 8005d08:	3ff00000 	.word	0x3ff00000
 8005d0c:	40240000 	.word	0x40240000
 8005d10:	401c0000 	.word	0x401c0000
 8005d14:	40140000 	.word	0x40140000
 8005d18:	3fe00000 	.word	0x3fe00000
 8005d1c:	9d01      	ldr	r5, [sp, #4]
 8005d1e:	4656      	mov	r6, sl
 8005d20:	465f      	mov	r7, fp
 8005d22:	4642      	mov	r2, r8
 8005d24:	464b      	mov	r3, r9
 8005d26:	4630      	mov	r0, r6
 8005d28:	4639      	mov	r1, r7
 8005d2a:	f7fa fd8f 	bl	800084c <__aeabi_ddiv>
 8005d2e:	f7fa ff13 	bl	8000b58 <__aeabi_d2iz>
 8005d32:	4682      	mov	sl, r0
 8005d34:	f7fa fbf6 	bl	8000524 <__aeabi_i2d>
 8005d38:	4642      	mov	r2, r8
 8005d3a:	464b      	mov	r3, r9
 8005d3c:	f7fa fc5c 	bl	80005f8 <__aeabi_dmul>
 8005d40:	4602      	mov	r2, r0
 8005d42:	460b      	mov	r3, r1
 8005d44:	4630      	mov	r0, r6
 8005d46:	4639      	mov	r1, r7
 8005d48:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8005d4c:	f7fa fa9c 	bl	8000288 <__aeabi_dsub>
 8005d50:	f805 6b01 	strb.w	r6, [r5], #1
 8005d54:	9e01      	ldr	r6, [sp, #4]
 8005d56:	9f03      	ldr	r7, [sp, #12]
 8005d58:	1bae      	subs	r6, r5, r6
 8005d5a:	42b7      	cmp	r7, r6
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	460b      	mov	r3, r1
 8005d60:	d135      	bne.n	8005dce <_dtoa_r+0x6e6>
 8005d62:	f7fa fa93 	bl	800028c <__adddf3>
 8005d66:	4642      	mov	r2, r8
 8005d68:	464b      	mov	r3, r9
 8005d6a:	4606      	mov	r6, r0
 8005d6c:	460f      	mov	r7, r1
 8005d6e:	f7fa fed3 	bl	8000b18 <__aeabi_dcmpgt>
 8005d72:	b9d0      	cbnz	r0, 8005daa <_dtoa_r+0x6c2>
 8005d74:	4642      	mov	r2, r8
 8005d76:	464b      	mov	r3, r9
 8005d78:	4630      	mov	r0, r6
 8005d7a:	4639      	mov	r1, r7
 8005d7c:	f7fa fea4 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d80:	b110      	cbz	r0, 8005d88 <_dtoa_r+0x6a0>
 8005d82:	f01a 0f01 	tst.w	sl, #1
 8005d86:	d110      	bne.n	8005daa <_dtoa_r+0x6c2>
 8005d88:	4620      	mov	r0, r4
 8005d8a:	ee18 1a10 	vmov	r1, s16
 8005d8e:	f000 fc35 	bl	80065fc <_Bfree>
 8005d92:	2300      	movs	r3, #0
 8005d94:	9800      	ldr	r0, [sp, #0]
 8005d96:	702b      	strb	r3, [r5, #0]
 8005d98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d9a:	3001      	adds	r0, #1
 8005d9c:	6018      	str	r0, [r3, #0]
 8005d9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	f43f acf1 	beq.w	8005788 <_dtoa_r+0xa0>
 8005da6:	601d      	str	r5, [r3, #0]
 8005da8:	e4ee      	b.n	8005788 <_dtoa_r+0xa0>
 8005daa:	9f00      	ldr	r7, [sp, #0]
 8005dac:	462b      	mov	r3, r5
 8005dae:	461d      	mov	r5, r3
 8005db0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005db4:	2a39      	cmp	r2, #57	; 0x39
 8005db6:	d106      	bne.n	8005dc6 <_dtoa_r+0x6de>
 8005db8:	9a01      	ldr	r2, [sp, #4]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d1f7      	bne.n	8005dae <_dtoa_r+0x6c6>
 8005dbe:	9901      	ldr	r1, [sp, #4]
 8005dc0:	2230      	movs	r2, #48	; 0x30
 8005dc2:	3701      	adds	r7, #1
 8005dc4:	700a      	strb	r2, [r1, #0]
 8005dc6:	781a      	ldrb	r2, [r3, #0]
 8005dc8:	3201      	adds	r2, #1
 8005dca:	701a      	strb	r2, [r3, #0]
 8005dcc:	e790      	b.n	8005cf0 <_dtoa_r+0x608>
 8005dce:	4ba6      	ldr	r3, [pc, #664]	; (8006068 <_dtoa_r+0x980>)
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f7fa fc11 	bl	80005f8 <__aeabi_dmul>
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	2300      	movs	r3, #0
 8005dda:	4606      	mov	r6, r0
 8005ddc:	460f      	mov	r7, r1
 8005dde:	f7fa fe73 	bl	8000ac8 <__aeabi_dcmpeq>
 8005de2:	2800      	cmp	r0, #0
 8005de4:	d09d      	beq.n	8005d22 <_dtoa_r+0x63a>
 8005de6:	e7cf      	b.n	8005d88 <_dtoa_r+0x6a0>
 8005de8:	9a08      	ldr	r2, [sp, #32]
 8005dea:	2a00      	cmp	r2, #0
 8005dec:	f000 80d7 	beq.w	8005f9e <_dtoa_r+0x8b6>
 8005df0:	9a06      	ldr	r2, [sp, #24]
 8005df2:	2a01      	cmp	r2, #1
 8005df4:	f300 80ba 	bgt.w	8005f6c <_dtoa_r+0x884>
 8005df8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005dfa:	2a00      	cmp	r2, #0
 8005dfc:	f000 80b2 	beq.w	8005f64 <_dtoa_r+0x87c>
 8005e00:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005e04:	9e07      	ldr	r6, [sp, #28]
 8005e06:	9d04      	ldr	r5, [sp, #16]
 8005e08:	9a04      	ldr	r2, [sp, #16]
 8005e0a:	441a      	add	r2, r3
 8005e0c:	9204      	str	r2, [sp, #16]
 8005e0e:	9a05      	ldr	r2, [sp, #20]
 8005e10:	2101      	movs	r1, #1
 8005e12:	441a      	add	r2, r3
 8005e14:	4620      	mov	r0, r4
 8005e16:	9205      	str	r2, [sp, #20]
 8005e18:	f000 fca8 	bl	800676c <__i2b>
 8005e1c:	4607      	mov	r7, r0
 8005e1e:	2d00      	cmp	r5, #0
 8005e20:	dd0c      	ble.n	8005e3c <_dtoa_r+0x754>
 8005e22:	9b05      	ldr	r3, [sp, #20]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	dd09      	ble.n	8005e3c <_dtoa_r+0x754>
 8005e28:	42ab      	cmp	r3, r5
 8005e2a:	9a04      	ldr	r2, [sp, #16]
 8005e2c:	bfa8      	it	ge
 8005e2e:	462b      	movge	r3, r5
 8005e30:	1ad2      	subs	r2, r2, r3
 8005e32:	9204      	str	r2, [sp, #16]
 8005e34:	9a05      	ldr	r2, [sp, #20]
 8005e36:	1aed      	subs	r5, r5, r3
 8005e38:	1ad3      	subs	r3, r2, r3
 8005e3a:	9305      	str	r3, [sp, #20]
 8005e3c:	9b07      	ldr	r3, [sp, #28]
 8005e3e:	b31b      	cbz	r3, 8005e88 <_dtoa_r+0x7a0>
 8005e40:	9b08      	ldr	r3, [sp, #32]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	f000 80af 	beq.w	8005fa6 <_dtoa_r+0x8be>
 8005e48:	2e00      	cmp	r6, #0
 8005e4a:	dd13      	ble.n	8005e74 <_dtoa_r+0x78c>
 8005e4c:	4639      	mov	r1, r7
 8005e4e:	4632      	mov	r2, r6
 8005e50:	4620      	mov	r0, r4
 8005e52:	f000 fd4b 	bl	80068ec <__pow5mult>
 8005e56:	ee18 2a10 	vmov	r2, s16
 8005e5a:	4601      	mov	r1, r0
 8005e5c:	4607      	mov	r7, r0
 8005e5e:	4620      	mov	r0, r4
 8005e60:	f000 fc9a 	bl	8006798 <__multiply>
 8005e64:	ee18 1a10 	vmov	r1, s16
 8005e68:	4680      	mov	r8, r0
 8005e6a:	4620      	mov	r0, r4
 8005e6c:	f000 fbc6 	bl	80065fc <_Bfree>
 8005e70:	ee08 8a10 	vmov	s16, r8
 8005e74:	9b07      	ldr	r3, [sp, #28]
 8005e76:	1b9a      	subs	r2, r3, r6
 8005e78:	d006      	beq.n	8005e88 <_dtoa_r+0x7a0>
 8005e7a:	ee18 1a10 	vmov	r1, s16
 8005e7e:	4620      	mov	r0, r4
 8005e80:	f000 fd34 	bl	80068ec <__pow5mult>
 8005e84:	ee08 0a10 	vmov	s16, r0
 8005e88:	2101      	movs	r1, #1
 8005e8a:	4620      	mov	r0, r4
 8005e8c:	f000 fc6e 	bl	800676c <__i2b>
 8005e90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	4606      	mov	r6, r0
 8005e96:	f340 8088 	ble.w	8005faa <_dtoa_r+0x8c2>
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	4601      	mov	r1, r0
 8005e9e:	4620      	mov	r0, r4
 8005ea0:	f000 fd24 	bl	80068ec <__pow5mult>
 8005ea4:	9b06      	ldr	r3, [sp, #24]
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	4606      	mov	r6, r0
 8005eaa:	f340 8081 	ble.w	8005fb0 <_dtoa_r+0x8c8>
 8005eae:	f04f 0800 	mov.w	r8, #0
 8005eb2:	6933      	ldr	r3, [r6, #16]
 8005eb4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005eb8:	6918      	ldr	r0, [r3, #16]
 8005eba:	f000 fc07 	bl	80066cc <__hi0bits>
 8005ebe:	f1c0 0020 	rsb	r0, r0, #32
 8005ec2:	9b05      	ldr	r3, [sp, #20]
 8005ec4:	4418      	add	r0, r3
 8005ec6:	f010 001f 	ands.w	r0, r0, #31
 8005eca:	f000 8092 	beq.w	8005ff2 <_dtoa_r+0x90a>
 8005ece:	f1c0 0320 	rsb	r3, r0, #32
 8005ed2:	2b04      	cmp	r3, #4
 8005ed4:	f340 808a 	ble.w	8005fec <_dtoa_r+0x904>
 8005ed8:	f1c0 001c 	rsb	r0, r0, #28
 8005edc:	9b04      	ldr	r3, [sp, #16]
 8005ede:	4403      	add	r3, r0
 8005ee0:	9304      	str	r3, [sp, #16]
 8005ee2:	9b05      	ldr	r3, [sp, #20]
 8005ee4:	4403      	add	r3, r0
 8005ee6:	4405      	add	r5, r0
 8005ee8:	9305      	str	r3, [sp, #20]
 8005eea:	9b04      	ldr	r3, [sp, #16]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	dd07      	ble.n	8005f00 <_dtoa_r+0x818>
 8005ef0:	ee18 1a10 	vmov	r1, s16
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	4620      	mov	r0, r4
 8005ef8:	f000 fd52 	bl	80069a0 <__lshift>
 8005efc:	ee08 0a10 	vmov	s16, r0
 8005f00:	9b05      	ldr	r3, [sp, #20]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	dd05      	ble.n	8005f12 <_dtoa_r+0x82a>
 8005f06:	4631      	mov	r1, r6
 8005f08:	461a      	mov	r2, r3
 8005f0a:	4620      	mov	r0, r4
 8005f0c:	f000 fd48 	bl	80069a0 <__lshift>
 8005f10:	4606      	mov	r6, r0
 8005f12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d06e      	beq.n	8005ff6 <_dtoa_r+0x90e>
 8005f18:	ee18 0a10 	vmov	r0, s16
 8005f1c:	4631      	mov	r1, r6
 8005f1e:	f000 fdaf 	bl	8006a80 <__mcmp>
 8005f22:	2800      	cmp	r0, #0
 8005f24:	da67      	bge.n	8005ff6 <_dtoa_r+0x90e>
 8005f26:	9b00      	ldr	r3, [sp, #0]
 8005f28:	3b01      	subs	r3, #1
 8005f2a:	ee18 1a10 	vmov	r1, s16
 8005f2e:	9300      	str	r3, [sp, #0]
 8005f30:	220a      	movs	r2, #10
 8005f32:	2300      	movs	r3, #0
 8005f34:	4620      	mov	r0, r4
 8005f36:	f000 fb83 	bl	8006640 <__multadd>
 8005f3a:	9b08      	ldr	r3, [sp, #32]
 8005f3c:	ee08 0a10 	vmov	s16, r0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	f000 81b1 	beq.w	80062a8 <_dtoa_r+0xbc0>
 8005f46:	2300      	movs	r3, #0
 8005f48:	4639      	mov	r1, r7
 8005f4a:	220a      	movs	r2, #10
 8005f4c:	4620      	mov	r0, r4
 8005f4e:	f000 fb77 	bl	8006640 <__multadd>
 8005f52:	9b02      	ldr	r3, [sp, #8]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	4607      	mov	r7, r0
 8005f58:	f300 808e 	bgt.w	8006078 <_dtoa_r+0x990>
 8005f5c:	9b06      	ldr	r3, [sp, #24]
 8005f5e:	2b02      	cmp	r3, #2
 8005f60:	dc51      	bgt.n	8006006 <_dtoa_r+0x91e>
 8005f62:	e089      	b.n	8006078 <_dtoa_r+0x990>
 8005f64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005f66:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005f6a:	e74b      	b.n	8005e04 <_dtoa_r+0x71c>
 8005f6c:	9b03      	ldr	r3, [sp, #12]
 8005f6e:	1e5e      	subs	r6, r3, #1
 8005f70:	9b07      	ldr	r3, [sp, #28]
 8005f72:	42b3      	cmp	r3, r6
 8005f74:	bfbf      	itttt	lt
 8005f76:	9b07      	ldrlt	r3, [sp, #28]
 8005f78:	9607      	strlt	r6, [sp, #28]
 8005f7a:	1af2      	sublt	r2, r6, r3
 8005f7c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005f7e:	bfb6      	itet	lt
 8005f80:	189b      	addlt	r3, r3, r2
 8005f82:	1b9e      	subge	r6, r3, r6
 8005f84:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005f86:	9b03      	ldr	r3, [sp, #12]
 8005f88:	bfb8      	it	lt
 8005f8a:	2600      	movlt	r6, #0
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	bfb7      	itett	lt
 8005f90:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8005f94:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005f98:	1a9d      	sublt	r5, r3, r2
 8005f9a:	2300      	movlt	r3, #0
 8005f9c:	e734      	b.n	8005e08 <_dtoa_r+0x720>
 8005f9e:	9e07      	ldr	r6, [sp, #28]
 8005fa0:	9d04      	ldr	r5, [sp, #16]
 8005fa2:	9f08      	ldr	r7, [sp, #32]
 8005fa4:	e73b      	b.n	8005e1e <_dtoa_r+0x736>
 8005fa6:	9a07      	ldr	r2, [sp, #28]
 8005fa8:	e767      	b.n	8005e7a <_dtoa_r+0x792>
 8005faa:	9b06      	ldr	r3, [sp, #24]
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	dc18      	bgt.n	8005fe2 <_dtoa_r+0x8fa>
 8005fb0:	f1ba 0f00 	cmp.w	sl, #0
 8005fb4:	d115      	bne.n	8005fe2 <_dtoa_r+0x8fa>
 8005fb6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005fba:	b993      	cbnz	r3, 8005fe2 <_dtoa_r+0x8fa>
 8005fbc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005fc0:	0d1b      	lsrs	r3, r3, #20
 8005fc2:	051b      	lsls	r3, r3, #20
 8005fc4:	b183      	cbz	r3, 8005fe8 <_dtoa_r+0x900>
 8005fc6:	9b04      	ldr	r3, [sp, #16]
 8005fc8:	3301      	adds	r3, #1
 8005fca:	9304      	str	r3, [sp, #16]
 8005fcc:	9b05      	ldr	r3, [sp, #20]
 8005fce:	3301      	adds	r3, #1
 8005fd0:	9305      	str	r3, [sp, #20]
 8005fd2:	f04f 0801 	mov.w	r8, #1
 8005fd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	f47f af6a 	bne.w	8005eb2 <_dtoa_r+0x7ca>
 8005fde:	2001      	movs	r0, #1
 8005fe0:	e76f      	b.n	8005ec2 <_dtoa_r+0x7da>
 8005fe2:	f04f 0800 	mov.w	r8, #0
 8005fe6:	e7f6      	b.n	8005fd6 <_dtoa_r+0x8ee>
 8005fe8:	4698      	mov	r8, r3
 8005fea:	e7f4      	b.n	8005fd6 <_dtoa_r+0x8ee>
 8005fec:	f43f af7d 	beq.w	8005eea <_dtoa_r+0x802>
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	301c      	adds	r0, #28
 8005ff4:	e772      	b.n	8005edc <_dtoa_r+0x7f4>
 8005ff6:	9b03      	ldr	r3, [sp, #12]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	dc37      	bgt.n	800606c <_dtoa_r+0x984>
 8005ffc:	9b06      	ldr	r3, [sp, #24]
 8005ffe:	2b02      	cmp	r3, #2
 8006000:	dd34      	ble.n	800606c <_dtoa_r+0x984>
 8006002:	9b03      	ldr	r3, [sp, #12]
 8006004:	9302      	str	r3, [sp, #8]
 8006006:	9b02      	ldr	r3, [sp, #8]
 8006008:	b96b      	cbnz	r3, 8006026 <_dtoa_r+0x93e>
 800600a:	4631      	mov	r1, r6
 800600c:	2205      	movs	r2, #5
 800600e:	4620      	mov	r0, r4
 8006010:	f000 fb16 	bl	8006640 <__multadd>
 8006014:	4601      	mov	r1, r0
 8006016:	4606      	mov	r6, r0
 8006018:	ee18 0a10 	vmov	r0, s16
 800601c:	f000 fd30 	bl	8006a80 <__mcmp>
 8006020:	2800      	cmp	r0, #0
 8006022:	f73f adbb 	bgt.w	8005b9c <_dtoa_r+0x4b4>
 8006026:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006028:	9d01      	ldr	r5, [sp, #4]
 800602a:	43db      	mvns	r3, r3
 800602c:	9300      	str	r3, [sp, #0]
 800602e:	f04f 0800 	mov.w	r8, #0
 8006032:	4631      	mov	r1, r6
 8006034:	4620      	mov	r0, r4
 8006036:	f000 fae1 	bl	80065fc <_Bfree>
 800603a:	2f00      	cmp	r7, #0
 800603c:	f43f aea4 	beq.w	8005d88 <_dtoa_r+0x6a0>
 8006040:	f1b8 0f00 	cmp.w	r8, #0
 8006044:	d005      	beq.n	8006052 <_dtoa_r+0x96a>
 8006046:	45b8      	cmp	r8, r7
 8006048:	d003      	beq.n	8006052 <_dtoa_r+0x96a>
 800604a:	4641      	mov	r1, r8
 800604c:	4620      	mov	r0, r4
 800604e:	f000 fad5 	bl	80065fc <_Bfree>
 8006052:	4639      	mov	r1, r7
 8006054:	4620      	mov	r0, r4
 8006056:	f000 fad1 	bl	80065fc <_Bfree>
 800605a:	e695      	b.n	8005d88 <_dtoa_r+0x6a0>
 800605c:	2600      	movs	r6, #0
 800605e:	4637      	mov	r7, r6
 8006060:	e7e1      	b.n	8006026 <_dtoa_r+0x93e>
 8006062:	9700      	str	r7, [sp, #0]
 8006064:	4637      	mov	r7, r6
 8006066:	e599      	b.n	8005b9c <_dtoa_r+0x4b4>
 8006068:	40240000 	.word	0x40240000
 800606c:	9b08      	ldr	r3, [sp, #32]
 800606e:	2b00      	cmp	r3, #0
 8006070:	f000 80ca 	beq.w	8006208 <_dtoa_r+0xb20>
 8006074:	9b03      	ldr	r3, [sp, #12]
 8006076:	9302      	str	r3, [sp, #8]
 8006078:	2d00      	cmp	r5, #0
 800607a:	dd05      	ble.n	8006088 <_dtoa_r+0x9a0>
 800607c:	4639      	mov	r1, r7
 800607e:	462a      	mov	r2, r5
 8006080:	4620      	mov	r0, r4
 8006082:	f000 fc8d 	bl	80069a0 <__lshift>
 8006086:	4607      	mov	r7, r0
 8006088:	f1b8 0f00 	cmp.w	r8, #0
 800608c:	d05b      	beq.n	8006146 <_dtoa_r+0xa5e>
 800608e:	6879      	ldr	r1, [r7, #4]
 8006090:	4620      	mov	r0, r4
 8006092:	f000 fa73 	bl	800657c <_Balloc>
 8006096:	4605      	mov	r5, r0
 8006098:	b928      	cbnz	r0, 80060a6 <_dtoa_r+0x9be>
 800609a:	4b87      	ldr	r3, [pc, #540]	; (80062b8 <_dtoa_r+0xbd0>)
 800609c:	4602      	mov	r2, r0
 800609e:	f240 21ea 	movw	r1, #746	; 0x2ea
 80060a2:	f7ff bb3b 	b.w	800571c <_dtoa_r+0x34>
 80060a6:	693a      	ldr	r2, [r7, #16]
 80060a8:	3202      	adds	r2, #2
 80060aa:	0092      	lsls	r2, r2, #2
 80060ac:	f107 010c 	add.w	r1, r7, #12
 80060b0:	300c      	adds	r0, #12
 80060b2:	f7fe fbb7 	bl	8004824 <memcpy>
 80060b6:	2201      	movs	r2, #1
 80060b8:	4629      	mov	r1, r5
 80060ba:	4620      	mov	r0, r4
 80060bc:	f000 fc70 	bl	80069a0 <__lshift>
 80060c0:	9b01      	ldr	r3, [sp, #4]
 80060c2:	f103 0901 	add.w	r9, r3, #1
 80060c6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80060ca:	4413      	add	r3, r2
 80060cc:	9305      	str	r3, [sp, #20]
 80060ce:	f00a 0301 	and.w	r3, sl, #1
 80060d2:	46b8      	mov	r8, r7
 80060d4:	9304      	str	r3, [sp, #16]
 80060d6:	4607      	mov	r7, r0
 80060d8:	4631      	mov	r1, r6
 80060da:	ee18 0a10 	vmov	r0, s16
 80060de:	f7ff fa75 	bl	80055cc <quorem>
 80060e2:	4641      	mov	r1, r8
 80060e4:	9002      	str	r0, [sp, #8]
 80060e6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80060ea:	ee18 0a10 	vmov	r0, s16
 80060ee:	f000 fcc7 	bl	8006a80 <__mcmp>
 80060f2:	463a      	mov	r2, r7
 80060f4:	9003      	str	r0, [sp, #12]
 80060f6:	4631      	mov	r1, r6
 80060f8:	4620      	mov	r0, r4
 80060fa:	f000 fcdd 	bl	8006ab8 <__mdiff>
 80060fe:	68c2      	ldr	r2, [r0, #12]
 8006100:	f109 3bff 	add.w	fp, r9, #4294967295
 8006104:	4605      	mov	r5, r0
 8006106:	bb02      	cbnz	r2, 800614a <_dtoa_r+0xa62>
 8006108:	4601      	mov	r1, r0
 800610a:	ee18 0a10 	vmov	r0, s16
 800610e:	f000 fcb7 	bl	8006a80 <__mcmp>
 8006112:	4602      	mov	r2, r0
 8006114:	4629      	mov	r1, r5
 8006116:	4620      	mov	r0, r4
 8006118:	9207      	str	r2, [sp, #28]
 800611a:	f000 fa6f 	bl	80065fc <_Bfree>
 800611e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006122:	ea43 0102 	orr.w	r1, r3, r2
 8006126:	9b04      	ldr	r3, [sp, #16]
 8006128:	430b      	orrs	r3, r1
 800612a:	464d      	mov	r5, r9
 800612c:	d10f      	bne.n	800614e <_dtoa_r+0xa66>
 800612e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006132:	d02a      	beq.n	800618a <_dtoa_r+0xaa2>
 8006134:	9b03      	ldr	r3, [sp, #12]
 8006136:	2b00      	cmp	r3, #0
 8006138:	dd02      	ble.n	8006140 <_dtoa_r+0xa58>
 800613a:	9b02      	ldr	r3, [sp, #8]
 800613c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006140:	f88b a000 	strb.w	sl, [fp]
 8006144:	e775      	b.n	8006032 <_dtoa_r+0x94a>
 8006146:	4638      	mov	r0, r7
 8006148:	e7ba      	b.n	80060c0 <_dtoa_r+0x9d8>
 800614a:	2201      	movs	r2, #1
 800614c:	e7e2      	b.n	8006114 <_dtoa_r+0xa2c>
 800614e:	9b03      	ldr	r3, [sp, #12]
 8006150:	2b00      	cmp	r3, #0
 8006152:	db04      	blt.n	800615e <_dtoa_r+0xa76>
 8006154:	9906      	ldr	r1, [sp, #24]
 8006156:	430b      	orrs	r3, r1
 8006158:	9904      	ldr	r1, [sp, #16]
 800615a:	430b      	orrs	r3, r1
 800615c:	d122      	bne.n	80061a4 <_dtoa_r+0xabc>
 800615e:	2a00      	cmp	r2, #0
 8006160:	ddee      	ble.n	8006140 <_dtoa_r+0xa58>
 8006162:	ee18 1a10 	vmov	r1, s16
 8006166:	2201      	movs	r2, #1
 8006168:	4620      	mov	r0, r4
 800616a:	f000 fc19 	bl	80069a0 <__lshift>
 800616e:	4631      	mov	r1, r6
 8006170:	ee08 0a10 	vmov	s16, r0
 8006174:	f000 fc84 	bl	8006a80 <__mcmp>
 8006178:	2800      	cmp	r0, #0
 800617a:	dc03      	bgt.n	8006184 <_dtoa_r+0xa9c>
 800617c:	d1e0      	bne.n	8006140 <_dtoa_r+0xa58>
 800617e:	f01a 0f01 	tst.w	sl, #1
 8006182:	d0dd      	beq.n	8006140 <_dtoa_r+0xa58>
 8006184:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006188:	d1d7      	bne.n	800613a <_dtoa_r+0xa52>
 800618a:	2339      	movs	r3, #57	; 0x39
 800618c:	f88b 3000 	strb.w	r3, [fp]
 8006190:	462b      	mov	r3, r5
 8006192:	461d      	mov	r5, r3
 8006194:	3b01      	subs	r3, #1
 8006196:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800619a:	2a39      	cmp	r2, #57	; 0x39
 800619c:	d071      	beq.n	8006282 <_dtoa_r+0xb9a>
 800619e:	3201      	adds	r2, #1
 80061a0:	701a      	strb	r2, [r3, #0]
 80061a2:	e746      	b.n	8006032 <_dtoa_r+0x94a>
 80061a4:	2a00      	cmp	r2, #0
 80061a6:	dd07      	ble.n	80061b8 <_dtoa_r+0xad0>
 80061a8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80061ac:	d0ed      	beq.n	800618a <_dtoa_r+0xaa2>
 80061ae:	f10a 0301 	add.w	r3, sl, #1
 80061b2:	f88b 3000 	strb.w	r3, [fp]
 80061b6:	e73c      	b.n	8006032 <_dtoa_r+0x94a>
 80061b8:	9b05      	ldr	r3, [sp, #20]
 80061ba:	f809 ac01 	strb.w	sl, [r9, #-1]
 80061be:	4599      	cmp	r9, r3
 80061c0:	d047      	beq.n	8006252 <_dtoa_r+0xb6a>
 80061c2:	ee18 1a10 	vmov	r1, s16
 80061c6:	2300      	movs	r3, #0
 80061c8:	220a      	movs	r2, #10
 80061ca:	4620      	mov	r0, r4
 80061cc:	f000 fa38 	bl	8006640 <__multadd>
 80061d0:	45b8      	cmp	r8, r7
 80061d2:	ee08 0a10 	vmov	s16, r0
 80061d6:	f04f 0300 	mov.w	r3, #0
 80061da:	f04f 020a 	mov.w	r2, #10
 80061de:	4641      	mov	r1, r8
 80061e0:	4620      	mov	r0, r4
 80061e2:	d106      	bne.n	80061f2 <_dtoa_r+0xb0a>
 80061e4:	f000 fa2c 	bl	8006640 <__multadd>
 80061e8:	4680      	mov	r8, r0
 80061ea:	4607      	mov	r7, r0
 80061ec:	f109 0901 	add.w	r9, r9, #1
 80061f0:	e772      	b.n	80060d8 <_dtoa_r+0x9f0>
 80061f2:	f000 fa25 	bl	8006640 <__multadd>
 80061f6:	4639      	mov	r1, r7
 80061f8:	4680      	mov	r8, r0
 80061fa:	2300      	movs	r3, #0
 80061fc:	220a      	movs	r2, #10
 80061fe:	4620      	mov	r0, r4
 8006200:	f000 fa1e 	bl	8006640 <__multadd>
 8006204:	4607      	mov	r7, r0
 8006206:	e7f1      	b.n	80061ec <_dtoa_r+0xb04>
 8006208:	9b03      	ldr	r3, [sp, #12]
 800620a:	9302      	str	r3, [sp, #8]
 800620c:	9d01      	ldr	r5, [sp, #4]
 800620e:	ee18 0a10 	vmov	r0, s16
 8006212:	4631      	mov	r1, r6
 8006214:	f7ff f9da 	bl	80055cc <quorem>
 8006218:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800621c:	9b01      	ldr	r3, [sp, #4]
 800621e:	f805 ab01 	strb.w	sl, [r5], #1
 8006222:	1aea      	subs	r2, r5, r3
 8006224:	9b02      	ldr	r3, [sp, #8]
 8006226:	4293      	cmp	r3, r2
 8006228:	dd09      	ble.n	800623e <_dtoa_r+0xb56>
 800622a:	ee18 1a10 	vmov	r1, s16
 800622e:	2300      	movs	r3, #0
 8006230:	220a      	movs	r2, #10
 8006232:	4620      	mov	r0, r4
 8006234:	f000 fa04 	bl	8006640 <__multadd>
 8006238:	ee08 0a10 	vmov	s16, r0
 800623c:	e7e7      	b.n	800620e <_dtoa_r+0xb26>
 800623e:	9b02      	ldr	r3, [sp, #8]
 8006240:	2b00      	cmp	r3, #0
 8006242:	bfc8      	it	gt
 8006244:	461d      	movgt	r5, r3
 8006246:	9b01      	ldr	r3, [sp, #4]
 8006248:	bfd8      	it	le
 800624a:	2501      	movle	r5, #1
 800624c:	441d      	add	r5, r3
 800624e:	f04f 0800 	mov.w	r8, #0
 8006252:	ee18 1a10 	vmov	r1, s16
 8006256:	2201      	movs	r2, #1
 8006258:	4620      	mov	r0, r4
 800625a:	f000 fba1 	bl	80069a0 <__lshift>
 800625e:	4631      	mov	r1, r6
 8006260:	ee08 0a10 	vmov	s16, r0
 8006264:	f000 fc0c 	bl	8006a80 <__mcmp>
 8006268:	2800      	cmp	r0, #0
 800626a:	dc91      	bgt.n	8006190 <_dtoa_r+0xaa8>
 800626c:	d102      	bne.n	8006274 <_dtoa_r+0xb8c>
 800626e:	f01a 0f01 	tst.w	sl, #1
 8006272:	d18d      	bne.n	8006190 <_dtoa_r+0xaa8>
 8006274:	462b      	mov	r3, r5
 8006276:	461d      	mov	r5, r3
 8006278:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800627c:	2a30      	cmp	r2, #48	; 0x30
 800627e:	d0fa      	beq.n	8006276 <_dtoa_r+0xb8e>
 8006280:	e6d7      	b.n	8006032 <_dtoa_r+0x94a>
 8006282:	9a01      	ldr	r2, [sp, #4]
 8006284:	429a      	cmp	r2, r3
 8006286:	d184      	bne.n	8006192 <_dtoa_r+0xaaa>
 8006288:	9b00      	ldr	r3, [sp, #0]
 800628a:	3301      	adds	r3, #1
 800628c:	9300      	str	r3, [sp, #0]
 800628e:	2331      	movs	r3, #49	; 0x31
 8006290:	7013      	strb	r3, [r2, #0]
 8006292:	e6ce      	b.n	8006032 <_dtoa_r+0x94a>
 8006294:	4b09      	ldr	r3, [pc, #36]	; (80062bc <_dtoa_r+0xbd4>)
 8006296:	f7ff ba95 	b.w	80057c4 <_dtoa_r+0xdc>
 800629a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800629c:	2b00      	cmp	r3, #0
 800629e:	f47f aa6e 	bne.w	800577e <_dtoa_r+0x96>
 80062a2:	4b07      	ldr	r3, [pc, #28]	; (80062c0 <_dtoa_r+0xbd8>)
 80062a4:	f7ff ba8e 	b.w	80057c4 <_dtoa_r+0xdc>
 80062a8:	9b02      	ldr	r3, [sp, #8]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	dcae      	bgt.n	800620c <_dtoa_r+0xb24>
 80062ae:	9b06      	ldr	r3, [sp, #24]
 80062b0:	2b02      	cmp	r3, #2
 80062b2:	f73f aea8 	bgt.w	8006006 <_dtoa_r+0x91e>
 80062b6:	e7a9      	b.n	800620c <_dtoa_r+0xb24>
 80062b8:	080075fb 	.word	0x080075fb
 80062bc:	0800751c 	.word	0x0800751c
 80062c0:	0800757c 	.word	0x0800757c

080062c4 <__sflush_r>:
 80062c4:	898a      	ldrh	r2, [r1, #12]
 80062c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062ca:	4605      	mov	r5, r0
 80062cc:	0710      	lsls	r0, r2, #28
 80062ce:	460c      	mov	r4, r1
 80062d0:	d458      	bmi.n	8006384 <__sflush_r+0xc0>
 80062d2:	684b      	ldr	r3, [r1, #4]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	dc05      	bgt.n	80062e4 <__sflush_r+0x20>
 80062d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80062da:	2b00      	cmp	r3, #0
 80062dc:	dc02      	bgt.n	80062e4 <__sflush_r+0x20>
 80062de:	2000      	movs	r0, #0
 80062e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80062e6:	2e00      	cmp	r6, #0
 80062e8:	d0f9      	beq.n	80062de <__sflush_r+0x1a>
 80062ea:	2300      	movs	r3, #0
 80062ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80062f0:	682f      	ldr	r7, [r5, #0]
 80062f2:	602b      	str	r3, [r5, #0]
 80062f4:	d032      	beq.n	800635c <__sflush_r+0x98>
 80062f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80062f8:	89a3      	ldrh	r3, [r4, #12]
 80062fa:	075a      	lsls	r2, r3, #29
 80062fc:	d505      	bpl.n	800630a <__sflush_r+0x46>
 80062fe:	6863      	ldr	r3, [r4, #4]
 8006300:	1ac0      	subs	r0, r0, r3
 8006302:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006304:	b10b      	cbz	r3, 800630a <__sflush_r+0x46>
 8006306:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006308:	1ac0      	subs	r0, r0, r3
 800630a:	2300      	movs	r3, #0
 800630c:	4602      	mov	r2, r0
 800630e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006310:	6a21      	ldr	r1, [r4, #32]
 8006312:	4628      	mov	r0, r5
 8006314:	47b0      	blx	r6
 8006316:	1c43      	adds	r3, r0, #1
 8006318:	89a3      	ldrh	r3, [r4, #12]
 800631a:	d106      	bne.n	800632a <__sflush_r+0x66>
 800631c:	6829      	ldr	r1, [r5, #0]
 800631e:	291d      	cmp	r1, #29
 8006320:	d82c      	bhi.n	800637c <__sflush_r+0xb8>
 8006322:	4a2a      	ldr	r2, [pc, #168]	; (80063cc <__sflush_r+0x108>)
 8006324:	40ca      	lsrs	r2, r1
 8006326:	07d6      	lsls	r6, r2, #31
 8006328:	d528      	bpl.n	800637c <__sflush_r+0xb8>
 800632a:	2200      	movs	r2, #0
 800632c:	6062      	str	r2, [r4, #4]
 800632e:	04d9      	lsls	r1, r3, #19
 8006330:	6922      	ldr	r2, [r4, #16]
 8006332:	6022      	str	r2, [r4, #0]
 8006334:	d504      	bpl.n	8006340 <__sflush_r+0x7c>
 8006336:	1c42      	adds	r2, r0, #1
 8006338:	d101      	bne.n	800633e <__sflush_r+0x7a>
 800633a:	682b      	ldr	r3, [r5, #0]
 800633c:	b903      	cbnz	r3, 8006340 <__sflush_r+0x7c>
 800633e:	6560      	str	r0, [r4, #84]	; 0x54
 8006340:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006342:	602f      	str	r7, [r5, #0]
 8006344:	2900      	cmp	r1, #0
 8006346:	d0ca      	beq.n	80062de <__sflush_r+0x1a>
 8006348:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800634c:	4299      	cmp	r1, r3
 800634e:	d002      	beq.n	8006356 <__sflush_r+0x92>
 8006350:	4628      	mov	r0, r5
 8006352:	f7fe fa7d 	bl	8004850 <_free_r>
 8006356:	2000      	movs	r0, #0
 8006358:	6360      	str	r0, [r4, #52]	; 0x34
 800635a:	e7c1      	b.n	80062e0 <__sflush_r+0x1c>
 800635c:	6a21      	ldr	r1, [r4, #32]
 800635e:	2301      	movs	r3, #1
 8006360:	4628      	mov	r0, r5
 8006362:	47b0      	blx	r6
 8006364:	1c41      	adds	r1, r0, #1
 8006366:	d1c7      	bne.n	80062f8 <__sflush_r+0x34>
 8006368:	682b      	ldr	r3, [r5, #0]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d0c4      	beq.n	80062f8 <__sflush_r+0x34>
 800636e:	2b1d      	cmp	r3, #29
 8006370:	d001      	beq.n	8006376 <__sflush_r+0xb2>
 8006372:	2b16      	cmp	r3, #22
 8006374:	d101      	bne.n	800637a <__sflush_r+0xb6>
 8006376:	602f      	str	r7, [r5, #0]
 8006378:	e7b1      	b.n	80062de <__sflush_r+0x1a>
 800637a:	89a3      	ldrh	r3, [r4, #12]
 800637c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006380:	81a3      	strh	r3, [r4, #12]
 8006382:	e7ad      	b.n	80062e0 <__sflush_r+0x1c>
 8006384:	690f      	ldr	r7, [r1, #16]
 8006386:	2f00      	cmp	r7, #0
 8006388:	d0a9      	beq.n	80062de <__sflush_r+0x1a>
 800638a:	0793      	lsls	r3, r2, #30
 800638c:	680e      	ldr	r6, [r1, #0]
 800638e:	bf08      	it	eq
 8006390:	694b      	ldreq	r3, [r1, #20]
 8006392:	600f      	str	r7, [r1, #0]
 8006394:	bf18      	it	ne
 8006396:	2300      	movne	r3, #0
 8006398:	eba6 0807 	sub.w	r8, r6, r7
 800639c:	608b      	str	r3, [r1, #8]
 800639e:	f1b8 0f00 	cmp.w	r8, #0
 80063a2:	dd9c      	ble.n	80062de <__sflush_r+0x1a>
 80063a4:	6a21      	ldr	r1, [r4, #32]
 80063a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80063a8:	4643      	mov	r3, r8
 80063aa:	463a      	mov	r2, r7
 80063ac:	4628      	mov	r0, r5
 80063ae:	47b0      	blx	r6
 80063b0:	2800      	cmp	r0, #0
 80063b2:	dc06      	bgt.n	80063c2 <__sflush_r+0xfe>
 80063b4:	89a3      	ldrh	r3, [r4, #12]
 80063b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063ba:	81a3      	strh	r3, [r4, #12]
 80063bc:	f04f 30ff 	mov.w	r0, #4294967295
 80063c0:	e78e      	b.n	80062e0 <__sflush_r+0x1c>
 80063c2:	4407      	add	r7, r0
 80063c4:	eba8 0800 	sub.w	r8, r8, r0
 80063c8:	e7e9      	b.n	800639e <__sflush_r+0xda>
 80063ca:	bf00      	nop
 80063cc:	20400001 	.word	0x20400001

080063d0 <_fflush_r>:
 80063d0:	b538      	push	{r3, r4, r5, lr}
 80063d2:	690b      	ldr	r3, [r1, #16]
 80063d4:	4605      	mov	r5, r0
 80063d6:	460c      	mov	r4, r1
 80063d8:	b913      	cbnz	r3, 80063e0 <_fflush_r+0x10>
 80063da:	2500      	movs	r5, #0
 80063dc:	4628      	mov	r0, r5
 80063de:	bd38      	pop	{r3, r4, r5, pc}
 80063e0:	b118      	cbz	r0, 80063ea <_fflush_r+0x1a>
 80063e2:	6983      	ldr	r3, [r0, #24]
 80063e4:	b90b      	cbnz	r3, 80063ea <_fflush_r+0x1a>
 80063e6:	f7fe f94f 	bl	8004688 <__sinit>
 80063ea:	4b14      	ldr	r3, [pc, #80]	; (800643c <_fflush_r+0x6c>)
 80063ec:	429c      	cmp	r4, r3
 80063ee:	d11b      	bne.n	8006428 <_fflush_r+0x58>
 80063f0:	686c      	ldr	r4, [r5, #4]
 80063f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d0ef      	beq.n	80063da <_fflush_r+0xa>
 80063fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80063fc:	07d0      	lsls	r0, r2, #31
 80063fe:	d404      	bmi.n	800640a <_fflush_r+0x3a>
 8006400:	0599      	lsls	r1, r3, #22
 8006402:	d402      	bmi.n	800640a <_fflush_r+0x3a>
 8006404:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006406:	f7fe fa02 	bl	800480e <__retarget_lock_acquire_recursive>
 800640a:	4628      	mov	r0, r5
 800640c:	4621      	mov	r1, r4
 800640e:	f7ff ff59 	bl	80062c4 <__sflush_r>
 8006412:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006414:	07da      	lsls	r2, r3, #31
 8006416:	4605      	mov	r5, r0
 8006418:	d4e0      	bmi.n	80063dc <_fflush_r+0xc>
 800641a:	89a3      	ldrh	r3, [r4, #12]
 800641c:	059b      	lsls	r3, r3, #22
 800641e:	d4dd      	bmi.n	80063dc <_fflush_r+0xc>
 8006420:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006422:	f7fe f9f5 	bl	8004810 <__retarget_lock_release_recursive>
 8006426:	e7d9      	b.n	80063dc <_fflush_r+0xc>
 8006428:	4b05      	ldr	r3, [pc, #20]	; (8006440 <_fflush_r+0x70>)
 800642a:	429c      	cmp	r4, r3
 800642c:	d101      	bne.n	8006432 <_fflush_r+0x62>
 800642e:	68ac      	ldr	r4, [r5, #8]
 8006430:	e7df      	b.n	80063f2 <_fflush_r+0x22>
 8006432:	4b04      	ldr	r3, [pc, #16]	; (8006444 <_fflush_r+0x74>)
 8006434:	429c      	cmp	r4, r3
 8006436:	bf08      	it	eq
 8006438:	68ec      	ldreq	r4, [r5, #12]
 800643a:	e7da      	b.n	80063f2 <_fflush_r+0x22>
 800643c:	080074c8 	.word	0x080074c8
 8006440:	080074e8 	.word	0x080074e8
 8006444:	080074a8 	.word	0x080074a8

08006448 <fiprintf>:
 8006448:	b40e      	push	{r1, r2, r3}
 800644a:	b503      	push	{r0, r1, lr}
 800644c:	4601      	mov	r1, r0
 800644e:	ab03      	add	r3, sp, #12
 8006450:	4805      	ldr	r0, [pc, #20]	; (8006468 <fiprintf+0x20>)
 8006452:	f853 2b04 	ldr.w	r2, [r3], #4
 8006456:	6800      	ldr	r0, [r0, #0]
 8006458:	9301      	str	r3, [sp, #4]
 800645a:	f000 fddd 	bl	8007018 <_vfiprintf_r>
 800645e:	b002      	add	sp, #8
 8006460:	f85d eb04 	ldr.w	lr, [sp], #4
 8006464:	b003      	add	sp, #12
 8006466:	4770      	bx	lr
 8006468:	2000000c 	.word	0x2000000c

0800646c <_localeconv_r>:
 800646c:	4800      	ldr	r0, [pc, #0]	; (8006470 <_localeconv_r+0x4>)
 800646e:	4770      	bx	lr
 8006470:	20000160 	.word	0x20000160

08006474 <_lseek_r>:
 8006474:	b538      	push	{r3, r4, r5, lr}
 8006476:	4d07      	ldr	r5, [pc, #28]	; (8006494 <_lseek_r+0x20>)
 8006478:	4604      	mov	r4, r0
 800647a:	4608      	mov	r0, r1
 800647c:	4611      	mov	r1, r2
 800647e:	2200      	movs	r2, #0
 8006480:	602a      	str	r2, [r5, #0]
 8006482:	461a      	mov	r2, r3
 8006484:	f7fd ffeb 	bl	800445e <_lseek>
 8006488:	1c43      	adds	r3, r0, #1
 800648a:	d102      	bne.n	8006492 <_lseek_r+0x1e>
 800648c:	682b      	ldr	r3, [r5, #0]
 800648e:	b103      	cbz	r3, 8006492 <_lseek_r+0x1e>
 8006490:	6023      	str	r3, [r4, #0]
 8006492:	bd38      	pop	{r3, r4, r5, pc}
 8006494:	20000350 	.word	0x20000350

08006498 <__swhatbuf_r>:
 8006498:	b570      	push	{r4, r5, r6, lr}
 800649a:	460e      	mov	r6, r1
 800649c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064a0:	2900      	cmp	r1, #0
 80064a2:	b096      	sub	sp, #88	; 0x58
 80064a4:	4614      	mov	r4, r2
 80064a6:	461d      	mov	r5, r3
 80064a8:	da08      	bge.n	80064bc <__swhatbuf_r+0x24>
 80064aa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80064ae:	2200      	movs	r2, #0
 80064b0:	602a      	str	r2, [r5, #0]
 80064b2:	061a      	lsls	r2, r3, #24
 80064b4:	d410      	bmi.n	80064d8 <__swhatbuf_r+0x40>
 80064b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064ba:	e00e      	b.n	80064da <__swhatbuf_r+0x42>
 80064bc:	466a      	mov	r2, sp
 80064be:	f000 fef5 	bl	80072ac <_fstat_r>
 80064c2:	2800      	cmp	r0, #0
 80064c4:	dbf1      	blt.n	80064aa <__swhatbuf_r+0x12>
 80064c6:	9a01      	ldr	r2, [sp, #4]
 80064c8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80064cc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80064d0:	425a      	negs	r2, r3
 80064d2:	415a      	adcs	r2, r3
 80064d4:	602a      	str	r2, [r5, #0]
 80064d6:	e7ee      	b.n	80064b6 <__swhatbuf_r+0x1e>
 80064d8:	2340      	movs	r3, #64	; 0x40
 80064da:	2000      	movs	r0, #0
 80064dc:	6023      	str	r3, [r4, #0]
 80064de:	b016      	add	sp, #88	; 0x58
 80064e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080064e4 <__smakebuf_r>:
 80064e4:	898b      	ldrh	r3, [r1, #12]
 80064e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80064e8:	079d      	lsls	r5, r3, #30
 80064ea:	4606      	mov	r6, r0
 80064ec:	460c      	mov	r4, r1
 80064ee:	d507      	bpl.n	8006500 <__smakebuf_r+0x1c>
 80064f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80064f4:	6023      	str	r3, [r4, #0]
 80064f6:	6123      	str	r3, [r4, #16]
 80064f8:	2301      	movs	r3, #1
 80064fa:	6163      	str	r3, [r4, #20]
 80064fc:	b002      	add	sp, #8
 80064fe:	bd70      	pop	{r4, r5, r6, pc}
 8006500:	ab01      	add	r3, sp, #4
 8006502:	466a      	mov	r2, sp
 8006504:	f7ff ffc8 	bl	8006498 <__swhatbuf_r>
 8006508:	9900      	ldr	r1, [sp, #0]
 800650a:	4605      	mov	r5, r0
 800650c:	4630      	mov	r0, r6
 800650e:	f7fe fa0b 	bl	8004928 <_malloc_r>
 8006512:	b948      	cbnz	r0, 8006528 <__smakebuf_r+0x44>
 8006514:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006518:	059a      	lsls	r2, r3, #22
 800651a:	d4ef      	bmi.n	80064fc <__smakebuf_r+0x18>
 800651c:	f023 0303 	bic.w	r3, r3, #3
 8006520:	f043 0302 	orr.w	r3, r3, #2
 8006524:	81a3      	strh	r3, [r4, #12]
 8006526:	e7e3      	b.n	80064f0 <__smakebuf_r+0xc>
 8006528:	4b0d      	ldr	r3, [pc, #52]	; (8006560 <__smakebuf_r+0x7c>)
 800652a:	62b3      	str	r3, [r6, #40]	; 0x28
 800652c:	89a3      	ldrh	r3, [r4, #12]
 800652e:	6020      	str	r0, [r4, #0]
 8006530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006534:	81a3      	strh	r3, [r4, #12]
 8006536:	9b00      	ldr	r3, [sp, #0]
 8006538:	6163      	str	r3, [r4, #20]
 800653a:	9b01      	ldr	r3, [sp, #4]
 800653c:	6120      	str	r0, [r4, #16]
 800653e:	b15b      	cbz	r3, 8006558 <__smakebuf_r+0x74>
 8006540:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006544:	4630      	mov	r0, r6
 8006546:	f000 fec3 	bl	80072d0 <_isatty_r>
 800654a:	b128      	cbz	r0, 8006558 <__smakebuf_r+0x74>
 800654c:	89a3      	ldrh	r3, [r4, #12]
 800654e:	f023 0303 	bic.w	r3, r3, #3
 8006552:	f043 0301 	orr.w	r3, r3, #1
 8006556:	81a3      	strh	r3, [r4, #12]
 8006558:	89a0      	ldrh	r0, [r4, #12]
 800655a:	4305      	orrs	r5, r0
 800655c:	81a5      	strh	r5, [r4, #12]
 800655e:	e7cd      	b.n	80064fc <__smakebuf_r+0x18>
 8006560:	08004621 	.word	0x08004621

08006564 <__malloc_lock>:
 8006564:	4801      	ldr	r0, [pc, #4]	; (800656c <__malloc_lock+0x8>)
 8006566:	f7fe b952 	b.w	800480e <__retarget_lock_acquire_recursive>
 800656a:	bf00      	nop
 800656c:	20000344 	.word	0x20000344

08006570 <__malloc_unlock>:
 8006570:	4801      	ldr	r0, [pc, #4]	; (8006578 <__malloc_unlock+0x8>)
 8006572:	f7fe b94d 	b.w	8004810 <__retarget_lock_release_recursive>
 8006576:	bf00      	nop
 8006578:	20000344 	.word	0x20000344

0800657c <_Balloc>:
 800657c:	b570      	push	{r4, r5, r6, lr}
 800657e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006580:	4604      	mov	r4, r0
 8006582:	460d      	mov	r5, r1
 8006584:	b976      	cbnz	r6, 80065a4 <_Balloc+0x28>
 8006586:	2010      	movs	r0, #16
 8006588:	f7fe f944 	bl	8004814 <malloc>
 800658c:	4602      	mov	r2, r0
 800658e:	6260      	str	r0, [r4, #36]	; 0x24
 8006590:	b920      	cbnz	r0, 800659c <_Balloc+0x20>
 8006592:	4b18      	ldr	r3, [pc, #96]	; (80065f4 <_Balloc+0x78>)
 8006594:	4818      	ldr	r0, [pc, #96]	; (80065f8 <_Balloc+0x7c>)
 8006596:	2166      	movs	r1, #102	; 0x66
 8006598:	f7fe ffea 	bl	8005570 <__assert_func>
 800659c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80065a0:	6006      	str	r6, [r0, #0]
 80065a2:	60c6      	str	r6, [r0, #12]
 80065a4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80065a6:	68f3      	ldr	r3, [r6, #12]
 80065a8:	b183      	cbz	r3, 80065cc <_Balloc+0x50>
 80065aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065ac:	68db      	ldr	r3, [r3, #12]
 80065ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80065b2:	b9b8      	cbnz	r0, 80065e4 <_Balloc+0x68>
 80065b4:	2101      	movs	r1, #1
 80065b6:	fa01 f605 	lsl.w	r6, r1, r5
 80065ba:	1d72      	adds	r2, r6, #5
 80065bc:	0092      	lsls	r2, r2, #2
 80065be:	4620      	mov	r0, r4
 80065c0:	f000 fb60 	bl	8006c84 <_calloc_r>
 80065c4:	b160      	cbz	r0, 80065e0 <_Balloc+0x64>
 80065c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80065ca:	e00e      	b.n	80065ea <_Balloc+0x6e>
 80065cc:	2221      	movs	r2, #33	; 0x21
 80065ce:	2104      	movs	r1, #4
 80065d0:	4620      	mov	r0, r4
 80065d2:	f000 fb57 	bl	8006c84 <_calloc_r>
 80065d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065d8:	60f0      	str	r0, [r6, #12]
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d1e4      	bne.n	80065aa <_Balloc+0x2e>
 80065e0:	2000      	movs	r0, #0
 80065e2:	bd70      	pop	{r4, r5, r6, pc}
 80065e4:	6802      	ldr	r2, [r0, #0]
 80065e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80065ea:	2300      	movs	r3, #0
 80065ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80065f0:	e7f7      	b.n	80065e2 <_Balloc+0x66>
 80065f2:	bf00      	nop
 80065f4:	08007589 	.word	0x08007589
 80065f8:	0800760c 	.word	0x0800760c

080065fc <_Bfree>:
 80065fc:	b570      	push	{r4, r5, r6, lr}
 80065fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006600:	4605      	mov	r5, r0
 8006602:	460c      	mov	r4, r1
 8006604:	b976      	cbnz	r6, 8006624 <_Bfree+0x28>
 8006606:	2010      	movs	r0, #16
 8006608:	f7fe f904 	bl	8004814 <malloc>
 800660c:	4602      	mov	r2, r0
 800660e:	6268      	str	r0, [r5, #36]	; 0x24
 8006610:	b920      	cbnz	r0, 800661c <_Bfree+0x20>
 8006612:	4b09      	ldr	r3, [pc, #36]	; (8006638 <_Bfree+0x3c>)
 8006614:	4809      	ldr	r0, [pc, #36]	; (800663c <_Bfree+0x40>)
 8006616:	218a      	movs	r1, #138	; 0x8a
 8006618:	f7fe ffaa 	bl	8005570 <__assert_func>
 800661c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006620:	6006      	str	r6, [r0, #0]
 8006622:	60c6      	str	r6, [r0, #12]
 8006624:	b13c      	cbz	r4, 8006636 <_Bfree+0x3a>
 8006626:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006628:	6862      	ldr	r2, [r4, #4]
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006630:	6021      	str	r1, [r4, #0]
 8006632:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006636:	bd70      	pop	{r4, r5, r6, pc}
 8006638:	08007589 	.word	0x08007589
 800663c:	0800760c 	.word	0x0800760c

08006640 <__multadd>:
 8006640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006644:	690d      	ldr	r5, [r1, #16]
 8006646:	4607      	mov	r7, r0
 8006648:	460c      	mov	r4, r1
 800664a:	461e      	mov	r6, r3
 800664c:	f101 0c14 	add.w	ip, r1, #20
 8006650:	2000      	movs	r0, #0
 8006652:	f8dc 3000 	ldr.w	r3, [ip]
 8006656:	b299      	uxth	r1, r3
 8006658:	fb02 6101 	mla	r1, r2, r1, r6
 800665c:	0c1e      	lsrs	r6, r3, #16
 800665e:	0c0b      	lsrs	r3, r1, #16
 8006660:	fb02 3306 	mla	r3, r2, r6, r3
 8006664:	b289      	uxth	r1, r1
 8006666:	3001      	adds	r0, #1
 8006668:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800666c:	4285      	cmp	r5, r0
 800666e:	f84c 1b04 	str.w	r1, [ip], #4
 8006672:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006676:	dcec      	bgt.n	8006652 <__multadd+0x12>
 8006678:	b30e      	cbz	r6, 80066be <__multadd+0x7e>
 800667a:	68a3      	ldr	r3, [r4, #8]
 800667c:	42ab      	cmp	r3, r5
 800667e:	dc19      	bgt.n	80066b4 <__multadd+0x74>
 8006680:	6861      	ldr	r1, [r4, #4]
 8006682:	4638      	mov	r0, r7
 8006684:	3101      	adds	r1, #1
 8006686:	f7ff ff79 	bl	800657c <_Balloc>
 800668a:	4680      	mov	r8, r0
 800668c:	b928      	cbnz	r0, 800669a <__multadd+0x5a>
 800668e:	4602      	mov	r2, r0
 8006690:	4b0c      	ldr	r3, [pc, #48]	; (80066c4 <__multadd+0x84>)
 8006692:	480d      	ldr	r0, [pc, #52]	; (80066c8 <__multadd+0x88>)
 8006694:	21b5      	movs	r1, #181	; 0xb5
 8006696:	f7fe ff6b 	bl	8005570 <__assert_func>
 800669a:	6922      	ldr	r2, [r4, #16]
 800669c:	3202      	adds	r2, #2
 800669e:	f104 010c 	add.w	r1, r4, #12
 80066a2:	0092      	lsls	r2, r2, #2
 80066a4:	300c      	adds	r0, #12
 80066a6:	f7fe f8bd 	bl	8004824 <memcpy>
 80066aa:	4621      	mov	r1, r4
 80066ac:	4638      	mov	r0, r7
 80066ae:	f7ff ffa5 	bl	80065fc <_Bfree>
 80066b2:	4644      	mov	r4, r8
 80066b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80066b8:	3501      	adds	r5, #1
 80066ba:	615e      	str	r6, [r3, #20]
 80066bc:	6125      	str	r5, [r4, #16]
 80066be:	4620      	mov	r0, r4
 80066c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066c4:	080075fb 	.word	0x080075fb
 80066c8:	0800760c 	.word	0x0800760c

080066cc <__hi0bits>:
 80066cc:	0c03      	lsrs	r3, r0, #16
 80066ce:	041b      	lsls	r3, r3, #16
 80066d0:	b9d3      	cbnz	r3, 8006708 <__hi0bits+0x3c>
 80066d2:	0400      	lsls	r0, r0, #16
 80066d4:	2310      	movs	r3, #16
 80066d6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80066da:	bf04      	itt	eq
 80066dc:	0200      	lsleq	r0, r0, #8
 80066de:	3308      	addeq	r3, #8
 80066e0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80066e4:	bf04      	itt	eq
 80066e6:	0100      	lsleq	r0, r0, #4
 80066e8:	3304      	addeq	r3, #4
 80066ea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80066ee:	bf04      	itt	eq
 80066f0:	0080      	lsleq	r0, r0, #2
 80066f2:	3302      	addeq	r3, #2
 80066f4:	2800      	cmp	r0, #0
 80066f6:	db05      	blt.n	8006704 <__hi0bits+0x38>
 80066f8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80066fc:	f103 0301 	add.w	r3, r3, #1
 8006700:	bf08      	it	eq
 8006702:	2320      	moveq	r3, #32
 8006704:	4618      	mov	r0, r3
 8006706:	4770      	bx	lr
 8006708:	2300      	movs	r3, #0
 800670a:	e7e4      	b.n	80066d6 <__hi0bits+0xa>

0800670c <__lo0bits>:
 800670c:	6803      	ldr	r3, [r0, #0]
 800670e:	f013 0207 	ands.w	r2, r3, #7
 8006712:	4601      	mov	r1, r0
 8006714:	d00b      	beq.n	800672e <__lo0bits+0x22>
 8006716:	07da      	lsls	r2, r3, #31
 8006718:	d423      	bmi.n	8006762 <__lo0bits+0x56>
 800671a:	0798      	lsls	r0, r3, #30
 800671c:	bf49      	itett	mi
 800671e:	085b      	lsrmi	r3, r3, #1
 8006720:	089b      	lsrpl	r3, r3, #2
 8006722:	2001      	movmi	r0, #1
 8006724:	600b      	strmi	r3, [r1, #0]
 8006726:	bf5c      	itt	pl
 8006728:	600b      	strpl	r3, [r1, #0]
 800672a:	2002      	movpl	r0, #2
 800672c:	4770      	bx	lr
 800672e:	b298      	uxth	r0, r3
 8006730:	b9a8      	cbnz	r0, 800675e <__lo0bits+0x52>
 8006732:	0c1b      	lsrs	r3, r3, #16
 8006734:	2010      	movs	r0, #16
 8006736:	b2da      	uxtb	r2, r3
 8006738:	b90a      	cbnz	r2, 800673e <__lo0bits+0x32>
 800673a:	3008      	adds	r0, #8
 800673c:	0a1b      	lsrs	r3, r3, #8
 800673e:	071a      	lsls	r2, r3, #28
 8006740:	bf04      	itt	eq
 8006742:	091b      	lsreq	r3, r3, #4
 8006744:	3004      	addeq	r0, #4
 8006746:	079a      	lsls	r2, r3, #30
 8006748:	bf04      	itt	eq
 800674a:	089b      	lsreq	r3, r3, #2
 800674c:	3002      	addeq	r0, #2
 800674e:	07da      	lsls	r2, r3, #31
 8006750:	d403      	bmi.n	800675a <__lo0bits+0x4e>
 8006752:	085b      	lsrs	r3, r3, #1
 8006754:	f100 0001 	add.w	r0, r0, #1
 8006758:	d005      	beq.n	8006766 <__lo0bits+0x5a>
 800675a:	600b      	str	r3, [r1, #0]
 800675c:	4770      	bx	lr
 800675e:	4610      	mov	r0, r2
 8006760:	e7e9      	b.n	8006736 <__lo0bits+0x2a>
 8006762:	2000      	movs	r0, #0
 8006764:	4770      	bx	lr
 8006766:	2020      	movs	r0, #32
 8006768:	4770      	bx	lr
	...

0800676c <__i2b>:
 800676c:	b510      	push	{r4, lr}
 800676e:	460c      	mov	r4, r1
 8006770:	2101      	movs	r1, #1
 8006772:	f7ff ff03 	bl	800657c <_Balloc>
 8006776:	4602      	mov	r2, r0
 8006778:	b928      	cbnz	r0, 8006786 <__i2b+0x1a>
 800677a:	4b05      	ldr	r3, [pc, #20]	; (8006790 <__i2b+0x24>)
 800677c:	4805      	ldr	r0, [pc, #20]	; (8006794 <__i2b+0x28>)
 800677e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006782:	f7fe fef5 	bl	8005570 <__assert_func>
 8006786:	2301      	movs	r3, #1
 8006788:	6144      	str	r4, [r0, #20]
 800678a:	6103      	str	r3, [r0, #16]
 800678c:	bd10      	pop	{r4, pc}
 800678e:	bf00      	nop
 8006790:	080075fb 	.word	0x080075fb
 8006794:	0800760c 	.word	0x0800760c

08006798 <__multiply>:
 8006798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800679c:	4691      	mov	r9, r2
 800679e:	690a      	ldr	r2, [r1, #16]
 80067a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	bfb8      	it	lt
 80067a8:	460b      	movlt	r3, r1
 80067aa:	460c      	mov	r4, r1
 80067ac:	bfbc      	itt	lt
 80067ae:	464c      	movlt	r4, r9
 80067b0:	4699      	movlt	r9, r3
 80067b2:	6927      	ldr	r7, [r4, #16]
 80067b4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80067b8:	68a3      	ldr	r3, [r4, #8]
 80067ba:	6861      	ldr	r1, [r4, #4]
 80067bc:	eb07 060a 	add.w	r6, r7, sl
 80067c0:	42b3      	cmp	r3, r6
 80067c2:	b085      	sub	sp, #20
 80067c4:	bfb8      	it	lt
 80067c6:	3101      	addlt	r1, #1
 80067c8:	f7ff fed8 	bl	800657c <_Balloc>
 80067cc:	b930      	cbnz	r0, 80067dc <__multiply+0x44>
 80067ce:	4602      	mov	r2, r0
 80067d0:	4b44      	ldr	r3, [pc, #272]	; (80068e4 <__multiply+0x14c>)
 80067d2:	4845      	ldr	r0, [pc, #276]	; (80068e8 <__multiply+0x150>)
 80067d4:	f240 115d 	movw	r1, #349	; 0x15d
 80067d8:	f7fe feca 	bl	8005570 <__assert_func>
 80067dc:	f100 0514 	add.w	r5, r0, #20
 80067e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80067e4:	462b      	mov	r3, r5
 80067e6:	2200      	movs	r2, #0
 80067e8:	4543      	cmp	r3, r8
 80067ea:	d321      	bcc.n	8006830 <__multiply+0x98>
 80067ec:	f104 0314 	add.w	r3, r4, #20
 80067f0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80067f4:	f109 0314 	add.w	r3, r9, #20
 80067f8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80067fc:	9202      	str	r2, [sp, #8]
 80067fe:	1b3a      	subs	r2, r7, r4
 8006800:	3a15      	subs	r2, #21
 8006802:	f022 0203 	bic.w	r2, r2, #3
 8006806:	3204      	adds	r2, #4
 8006808:	f104 0115 	add.w	r1, r4, #21
 800680c:	428f      	cmp	r7, r1
 800680e:	bf38      	it	cc
 8006810:	2204      	movcc	r2, #4
 8006812:	9201      	str	r2, [sp, #4]
 8006814:	9a02      	ldr	r2, [sp, #8]
 8006816:	9303      	str	r3, [sp, #12]
 8006818:	429a      	cmp	r2, r3
 800681a:	d80c      	bhi.n	8006836 <__multiply+0x9e>
 800681c:	2e00      	cmp	r6, #0
 800681e:	dd03      	ble.n	8006828 <__multiply+0x90>
 8006820:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006824:	2b00      	cmp	r3, #0
 8006826:	d05a      	beq.n	80068de <__multiply+0x146>
 8006828:	6106      	str	r6, [r0, #16]
 800682a:	b005      	add	sp, #20
 800682c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006830:	f843 2b04 	str.w	r2, [r3], #4
 8006834:	e7d8      	b.n	80067e8 <__multiply+0x50>
 8006836:	f8b3 a000 	ldrh.w	sl, [r3]
 800683a:	f1ba 0f00 	cmp.w	sl, #0
 800683e:	d024      	beq.n	800688a <__multiply+0xf2>
 8006840:	f104 0e14 	add.w	lr, r4, #20
 8006844:	46a9      	mov	r9, r5
 8006846:	f04f 0c00 	mov.w	ip, #0
 800684a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800684e:	f8d9 1000 	ldr.w	r1, [r9]
 8006852:	fa1f fb82 	uxth.w	fp, r2
 8006856:	b289      	uxth	r1, r1
 8006858:	fb0a 110b 	mla	r1, sl, fp, r1
 800685c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006860:	f8d9 2000 	ldr.w	r2, [r9]
 8006864:	4461      	add	r1, ip
 8006866:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800686a:	fb0a c20b 	mla	r2, sl, fp, ip
 800686e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006872:	b289      	uxth	r1, r1
 8006874:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006878:	4577      	cmp	r7, lr
 800687a:	f849 1b04 	str.w	r1, [r9], #4
 800687e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006882:	d8e2      	bhi.n	800684a <__multiply+0xb2>
 8006884:	9a01      	ldr	r2, [sp, #4]
 8006886:	f845 c002 	str.w	ip, [r5, r2]
 800688a:	9a03      	ldr	r2, [sp, #12]
 800688c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006890:	3304      	adds	r3, #4
 8006892:	f1b9 0f00 	cmp.w	r9, #0
 8006896:	d020      	beq.n	80068da <__multiply+0x142>
 8006898:	6829      	ldr	r1, [r5, #0]
 800689a:	f104 0c14 	add.w	ip, r4, #20
 800689e:	46ae      	mov	lr, r5
 80068a0:	f04f 0a00 	mov.w	sl, #0
 80068a4:	f8bc b000 	ldrh.w	fp, [ip]
 80068a8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80068ac:	fb09 220b 	mla	r2, r9, fp, r2
 80068b0:	4492      	add	sl, r2
 80068b2:	b289      	uxth	r1, r1
 80068b4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80068b8:	f84e 1b04 	str.w	r1, [lr], #4
 80068bc:	f85c 2b04 	ldr.w	r2, [ip], #4
 80068c0:	f8be 1000 	ldrh.w	r1, [lr]
 80068c4:	0c12      	lsrs	r2, r2, #16
 80068c6:	fb09 1102 	mla	r1, r9, r2, r1
 80068ca:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80068ce:	4567      	cmp	r7, ip
 80068d0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80068d4:	d8e6      	bhi.n	80068a4 <__multiply+0x10c>
 80068d6:	9a01      	ldr	r2, [sp, #4]
 80068d8:	50a9      	str	r1, [r5, r2]
 80068da:	3504      	adds	r5, #4
 80068dc:	e79a      	b.n	8006814 <__multiply+0x7c>
 80068de:	3e01      	subs	r6, #1
 80068e0:	e79c      	b.n	800681c <__multiply+0x84>
 80068e2:	bf00      	nop
 80068e4:	080075fb 	.word	0x080075fb
 80068e8:	0800760c 	.word	0x0800760c

080068ec <__pow5mult>:
 80068ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068f0:	4615      	mov	r5, r2
 80068f2:	f012 0203 	ands.w	r2, r2, #3
 80068f6:	4606      	mov	r6, r0
 80068f8:	460f      	mov	r7, r1
 80068fa:	d007      	beq.n	800690c <__pow5mult+0x20>
 80068fc:	4c25      	ldr	r4, [pc, #148]	; (8006994 <__pow5mult+0xa8>)
 80068fe:	3a01      	subs	r2, #1
 8006900:	2300      	movs	r3, #0
 8006902:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006906:	f7ff fe9b 	bl	8006640 <__multadd>
 800690a:	4607      	mov	r7, r0
 800690c:	10ad      	asrs	r5, r5, #2
 800690e:	d03d      	beq.n	800698c <__pow5mult+0xa0>
 8006910:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006912:	b97c      	cbnz	r4, 8006934 <__pow5mult+0x48>
 8006914:	2010      	movs	r0, #16
 8006916:	f7fd ff7d 	bl	8004814 <malloc>
 800691a:	4602      	mov	r2, r0
 800691c:	6270      	str	r0, [r6, #36]	; 0x24
 800691e:	b928      	cbnz	r0, 800692c <__pow5mult+0x40>
 8006920:	4b1d      	ldr	r3, [pc, #116]	; (8006998 <__pow5mult+0xac>)
 8006922:	481e      	ldr	r0, [pc, #120]	; (800699c <__pow5mult+0xb0>)
 8006924:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006928:	f7fe fe22 	bl	8005570 <__assert_func>
 800692c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006930:	6004      	str	r4, [r0, #0]
 8006932:	60c4      	str	r4, [r0, #12]
 8006934:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006938:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800693c:	b94c      	cbnz	r4, 8006952 <__pow5mult+0x66>
 800693e:	f240 2171 	movw	r1, #625	; 0x271
 8006942:	4630      	mov	r0, r6
 8006944:	f7ff ff12 	bl	800676c <__i2b>
 8006948:	2300      	movs	r3, #0
 800694a:	f8c8 0008 	str.w	r0, [r8, #8]
 800694e:	4604      	mov	r4, r0
 8006950:	6003      	str	r3, [r0, #0]
 8006952:	f04f 0900 	mov.w	r9, #0
 8006956:	07eb      	lsls	r3, r5, #31
 8006958:	d50a      	bpl.n	8006970 <__pow5mult+0x84>
 800695a:	4639      	mov	r1, r7
 800695c:	4622      	mov	r2, r4
 800695e:	4630      	mov	r0, r6
 8006960:	f7ff ff1a 	bl	8006798 <__multiply>
 8006964:	4639      	mov	r1, r7
 8006966:	4680      	mov	r8, r0
 8006968:	4630      	mov	r0, r6
 800696a:	f7ff fe47 	bl	80065fc <_Bfree>
 800696e:	4647      	mov	r7, r8
 8006970:	106d      	asrs	r5, r5, #1
 8006972:	d00b      	beq.n	800698c <__pow5mult+0xa0>
 8006974:	6820      	ldr	r0, [r4, #0]
 8006976:	b938      	cbnz	r0, 8006988 <__pow5mult+0x9c>
 8006978:	4622      	mov	r2, r4
 800697a:	4621      	mov	r1, r4
 800697c:	4630      	mov	r0, r6
 800697e:	f7ff ff0b 	bl	8006798 <__multiply>
 8006982:	6020      	str	r0, [r4, #0]
 8006984:	f8c0 9000 	str.w	r9, [r0]
 8006988:	4604      	mov	r4, r0
 800698a:	e7e4      	b.n	8006956 <__pow5mult+0x6a>
 800698c:	4638      	mov	r0, r7
 800698e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006992:	bf00      	nop
 8006994:	08007758 	.word	0x08007758
 8006998:	08007589 	.word	0x08007589
 800699c:	0800760c 	.word	0x0800760c

080069a0 <__lshift>:
 80069a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069a4:	460c      	mov	r4, r1
 80069a6:	6849      	ldr	r1, [r1, #4]
 80069a8:	6923      	ldr	r3, [r4, #16]
 80069aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80069ae:	68a3      	ldr	r3, [r4, #8]
 80069b0:	4607      	mov	r7, r0
 80069b2:	4691      	mov	r9, r2
 80069b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80069b8:	f108 0601 	add.w	r6, r8, #1
 80069bc:	42b3      	cmp	r3, r6
 80069be:	db0b      	blt.n	80069d8 <__lshift+0x38>
 80069c0:	4638      	mov	r0, r7
 80069c2:	f7ff fddb 	bl	800657c <_Balloc>
 80069c6:	4605      	mov	r5, r0
 80069c8:	b948      	cbnz	r0, 80069de <__lshift+0x3e>
 80069ca:	4602      	mov	r2, r0
 80069cc:	4b2a      	ldr	r3, [pc, #168]	; (8006a78 <__lshift+0xd8>)
 80069ce:	482b      	ldr	r0, [pc, #172]	; (8006a7c <__lshift+0xdc>)
 80069d0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80069d4:	f7fe fdcc 	bl	8005570 <__assert_func>
 80069d8:	3101      	adds	r1, #1
 80069da:	005b      	lsls	r3, r3, #1
 80069dc:	e7ee      	b.n	80069bc <__lshift+0x1c>
 80069de:	2300      	movs	r3, #0
 80069e0:	f100 0114 	add.w	r1, r0, #20
 80069e4:	f100 0210 	add.w	r2, r0, #16
 80069e8:	4618      	mov	r0, r3
 80069ea:	4553      	cmp	r3, sl
 80069ec:	db37      	blt.n	8006a5e <__lshift+0xbe>
 80069ee:	6920      	ldr	r0, [r4, #16]
 80069f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80069f4:	f104 0314 	add.w	r3, r4, #20
 80069f8:	f019 091f 	ands.w	r9, r9, #31
 80069fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006a00:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006a04:	d02f      	beq.n	8006a66 <__lshift+0xc6>
 8006a06:	f1c9 0e20 	rsb	lr, r9, #32
 8006a0a:	468a      	mov	sl, r1
 8006a0c:	f04f 0c00 	mov.w	ip, #0
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	fa02 f209 	lsl.w	r2, r2, r9
 8006a16:	ea42 020c 	orr.w	r2, r2, ip
 8006a1a:	f84a 2b04 	str.w	r2, [sl], #4
 8006a1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a22:	4298      	cmp	r0, r3
 8006a24:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006a28:	d8f2      	bhi.n	8006a10 <__lshift+0x70>
 8006a2a:	1b03      	subs	r3, r0, r4
 8006a2c:	3b15      	subs	r3, #21
 8006a2e:	f023 0303 	bic.w	r3, r3, #3
 8006a32:	3304      	adds	r3, #4
 8006a34:	f104 0215 	add.w	r2, r4, #21
 8006a38:	4290      	cmp	r0, r2
 8006a3a:	bf38      	it	cc
 8006a3c:	2304      	movcc	r3, #4
 8006a3e:	f841 c003 	str.w	ip, [r1, r3]
 8006a42:	f1bc 0f00 	cmp.w	ip, #0
 8006a46:	d001      	beq.n	8006a4c <__lshift+0xac>
 8006a48:	f108 0602 	add.w	r6, r8, #2
 8006a4c:	3e01      	subs	r6, #1
 8006a4e:	4638      	mov	r0, r7
 8006a50:	612e      	str	r6, [r5, #16]
 8006a52:	4621      	mov	r1, r4
 8006a54:	f7ff fdd2 	bl	80065fc <_Bfree>
 8006a58:	4628      	mov	r0, r5
 8006a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a5e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006a62:	3301      	adds	r3, #1
 8006a64:	e7c1      	b.n	80069ea <__lshift+0x4a>
 8006a66:	3904      	subs	r1, #4
 8006a68:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a6c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006a70:	4298      	cmp	r0, r3
 8006a72:	d8f9      	bhi.n	8006a68 <__lshift+0xc8>
 8006a74:	e7ea      	b.n	8006a4c <__lshift+0xac>
 8006a76:	bf00      	nop
 8006a78:	080075fb 	.word	0x080075fb
 8006a7c:	0800760c 	.word	0x0800760c

08006a80 <__mcmp>:
 8006a80:	b530      	push	{r4, r5, lr}
 8006a82:	6902      	ldr	r2, [r0, #16]
 8006a84:	690c      	ldr	r4, [r1, #16]
 8006a86:	1b12      	subs	r2, r2, r4
 8006a88:	d10e      	bne.n	8006aa8 <__mcmp+0x28>
 8006a8a:	f100 0314 	add.w	r3, r0, #20
 8006a8e:	3114      	adds	r1, #20
 8006a90:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006a94:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006a98:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006a9c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006aa0:	42a5      	cmp	r5, r4
 8006aa2:	d003      	beq.n	8006aac <__mcmp+0x2c>
 8006aa4:	d305      	bcc.n	8006ab2 <__mcmp+0x32>
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	4610      	mov	r0, r2
 8006aaa:	bd30      	pop	{r4, r5, pc}
 8006aac:	4283      	cmp	r3, r0
 8006aae:	d3f3      	bcc.n	8006a98 <__mcmp+0x18>
 8006ab0:	e7fa      	b.n	8006aa8 <__mcmp+0x28>
 8006ab2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ab6:	e7f7      	b.n	8006aa8 <__mcmp+0x28>

08006ab8 <__mdiff>:
 8006ab8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006abc:	460c      	mov	r4, r1
 8006abe:	4606      	mov	r6, r0
 8006ac0:	4611      	mov	r1, r2
 8006ac2:	4620      	mov	r0, r4
 8006ac4:	4690      	mov	r8, r2
 8006ac6:	f7ff ffdb 	bl	8006a80 <__mcmp>
 8006aca:	1e05      	subs	r5, r0, #0
 8006acc:	d110      	bne.n	8006af0 <__mdiff+0x38>
 8006ace:	4629      	mov	r1, r5
 8006ad0:	4630      	mov	r0, r6
 8006ad2:	f7ff fd53 	bl	800657c <_Balloc>
 8006ad6:	b930      	cbnz	r0, 8006ae6 <__mdiff+0x2e>
 8006ad8:	4b3a      	ldr	r3, [pc, #232]	; (8006bc4 <__mdiff+0x10c>)
 8006ada:	4602      	mov	r2, r0
 8006adc:	f240 2132 	movw	r1, #562	; 0x232
 8006ae0:	4839      	ldr	r0, [pc, #228]	; (8006bc8 <__mdiff+0x110>)
 8006ae2:	f7fe fd45 	bl	8005570 <__assert_func>
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006aec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006af0:	bfa4      	itt	ge
 8006af2:	4643      	movge	r3, r8
 8006af4:	46a0      	movge	r8, r4
 8006af6:	4630      	mov	r0, r6
 8006af8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006afc:	bfa6      	itte	ge
 8006afe:	461c      	movge	r4, r3
 8006b00:	2500      	movge	r5, #0
 8006b02:	2501      	movlt	r5, #1
 8006b04:	f7ff fd3a 	bl	800657c <_Balloc>
 8006b08:	b920      	cbnz	r0, 8006b14 <__mdiff+0x5c>
 8006b0a:	4b2e      	ldr	r3, [pc, #184]	; (8006bc4 <__mdiff+0x10c>)
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006b12:	e7e5      	b.n	8006ae0 <__mdiff+0x28>
 8006b14:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006b18:	6926      	ldr	r6, [r4, #16]
 8006b1a:	60c5      	str	r5, [r0, #12]
 8006b1c:	f104 0914 	add.w	r9, r4, #20
 8006b20:	f108 0514 	add.w	r5, r8, #20
 8006b24:	f100 0e14 	add.w	lr, r0, #20
 8006b28:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006b2c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006b30:	f108 0210 	add.w	r2, r8, #16
 8006b34:	46f2      	mov	sl, lr
 8006b36:	2100      	movs	r1, #0
 8006b38:	f859 3b04 	ldr.w	r3, [r9], #4
 8006b3c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006b40:	fa1f f883 	uxth.w	r8, r3
 8006b44:	fa11 f18b 	uxtah	r1, r1, fp
 8006b48:	0c1b      	lsrs	r3, r3, #16
 8006b4a:	eba1 0808 	sub.w	r8, r1, r8
 8006b4e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006b52:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006b56:	fa1f f888 	uxth.w	r8, r8
 8006b5a:	1419      	asrs	r1, r3, #16
 8006b5c:	454e      	cmp	r6, r9
 8006b5e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006b62:	f84a 3b04 	str.w	r3, [sl], #4
 8006b66:	d8e7      	bhi.n	8006b38 <__mdiff+0x80>
 8006b68:	1b33      	subs	r3, r6, r4
 8006b6a:	3b15      	subs	r3, #21
 8006b6c:	f023 0303 	bic.w	r3, r3, #3
 8006b70:	3304      	adds	r3, #4
 8006b72:	3415      	adds	r4, #21
 8006b74:	42a6      	cmp	r6, r4
 8006b76:	bf38      	it	cc
 8006b78:	2304      	movcc	r3, #4
 8006b7a:	441d      	add	r5, r3
 8006b7c:	4473      	add	r3, lr
 8006b7e:	469e      	mov	lr, r3
 8006b80:	462e      	mov	r6, r5
 8006b82:	4566      	cmp	r6, ip
 8006b84:	d30e      	bcc.n	8006ba4 <__mdiff+0xec>
 8006b86:	f10c 0203 	add.w	r2, ip, #3
 8006b8a:	1b52      	subs	r2, r2, r5
 8006b8c:	f022 0203 	bic.w	r2, r2, #3
 8006b90:	3d03      	subs	r5, #3
 8006b92:	45ac      	cmp	ip, r5
 8006b94:	bf38      	it	cc
 8006b96:	2200      	movcc	r2, #0
 8006b98:	441a      	add	r2, r3
 8006b9a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006b9e:	b17b      	cbz	r3, 8006bc0 <__mdiff+0x108>
 8006ba0:	6107      	str	r7, [r0, #16]
 8006ba2:	e7a3      	b.n	8006aec <__mdiff+0x34>
 8006ba4:	f856 8b04 	ldr.w	r8, [r6], #4
 8006ba8:	fa11 f288 	uxtah	r2, r1, r8
 8006bac:	1414      	asrs	r4, r2, #16
 8006bae:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006bb2:	b292      	uxth	r2, r2
 8006bb4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006bb8:	f84e 2b04 	str.w	r2, [lr], #4
 8006bbc:	1421      	asrs	r1, r4, #16
 8006bbe:	e7e0      	b.n	8006b82 <__mdiff+0xca>
 8006bc0:	3f01      	subs	r7, #1
 8006bc2:	e7ea      	b.n	8006b9a <__mdiff+0xe2>
 8006bc4:	080075fb 	.word	0x080075fb
 8006bc8:	0800760c 	.word	0x0800760c

08006bcc <__d2b>:
 8006bcc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006bd0:	4689      	mov	r9, r1
 8006bd2:	2101      	movs	r1, #1
 8006bd4:	ec57 6b10 	vmov	r6, r7, d0
 8006bd8:	4690      	mov	r8, r2
 8006bda:	f7ff fccf 	bl	800657c <_Balloc>
 8006bde:	4604      	mov	r4, r0
 8006be0:	b930      	cbnz	r0, 8006bf0 <__d2b+0x24>
 8006be2:	4602      	mov	r2, r0
 8006be4:	4b25      	ldr	r3, [pc, #148]	; (8006c7c <__d2b+0xb0>)
 8006be6:	4826      	ldr	r0, [pc, #152]	; (8006c80 <__d2b+0xb4>)
 8006be8:	f240 310a 	movw	r1, #778	; 0x30a
 8006bec:	f7fe fcc0 	bl	8005570 <__assert_func>
 8006bf0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006bf4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006bf8:	bb35      	cbnz	r5, 8006c48 <__d2b+0x7c>
 8006bfa:	2e00      	cmp	r6, #0
 8006bfc:	9301      	str	r3, [sp, #4]
 8006bfe:	d028      	beq.n	8006c52 <__d2b+0x86>
 8006c00:	4668      	mov	r0, sp
 8006c02:	9600      	str	r6, [sp, #0]
 8006c04:	f7ff fd82 	bl	800670c <__lo0bits>
 8006c08:	9900      	ldr	r1, [sp, #0]
 8006c0a:	b300      	cbz	r0, 8006c4e <__d2b+0x82>
 8006c0c:	9a01      	ldr	r2, [sp, #4]
 8006c0e:	f1c0 0320 	rsb	r3, r0, #32
 8006c12:	fa02 f303 	lsl.w	r3, r2, r3
 8006c16:	430b      	orrs	r3, r1
 8006c18:	40c2      	lsrs	r2, r0
 8006c1a:	6163      	str	r3, [r4, #20]
 8006c1c:	9201      	str	r2, [sp, #4]
 8006c1e:	9b01      	ldr	r3, [sp, #4]
 8006c20:	61a3      	str	r3, [r4, #24]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	bf14      	ite	ne
 8006c26:	2202      	movne	r2, #2
 8006c28:	2201      	moveq	r2, #1
 8006c2a:	6122      	str	r2, [r4, #16]
 8006c2c:	b1d5      	cbz	r5, 8006c64 <__d2b+0x98>
 8006c2e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006c32:	4405      	add	r5, r0
 8006c34:	f8c9 5000 	str.w	r5, [r9]
 8006c38:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006c3c:	f8c8 0000 	str.w	r0, [r8]
 8006c40:	4620      	mov	r0, r4
 8006c42:	b003      	add	sp, #12
 8006c44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006c48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c4c:	e7d5      	b.n	8006bfa <__d2b+0x2e>
 8006c4e:	6161      	str	r1, [r4, #20]
 8006c50:	e7e5      	b.n	8006c1e <__d2b+0x52>
 8006c52:	a801      	add	r0, sp, #4
 8006c54:	f7ff fd5a 	bl	800670c <__lo0bits>
 8006c58:	9b01      	ldr	r3, [sp, #4]
 8006c5a:	6163      	str	r3, [r4, #20]
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	6122      	str	r2, [r4, #16]
 8006c60:	3020      	adds	r0, #32
 8006c62:	e7e3      	b.n	8006c2c <__d2b+0x60>
 8006c64:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006c68:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006c6c:	f8c9 0000 	str.w	r0, [r9]
 8006c70:	6918      	ldr	r0, [r3, #16]
 8006c72:	f7ff fd2b 	bl	80066cc <__hi0bits>
 8006c76:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006c7a:	e7df      	b.n	8006c3c <__d2b+0x70>
 8006c7c:	080075fb 	.word	0x080075fb
 8006c80:	0800760c 	.word	0x0800760c

08006c84 <_calloc_r>:
 8006c84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c86:	fba1 2402 	umull	r2, r4, r1, r2
 8006c8a:	b94c      	cbnz	r4, 8006ca0 <_calloc_r+0x1c>
 8006c8c:	4611      	mov	r1, r2
 8006c8e:	9201      	str	r2, [sp, #4]
 8006c90:	f7fd fe4a 	bl	8004928 <_malloc_r>
 8006c94:	9a01      	ldr	r2, [sp, #4]
 8006c96:	4605      	mov	r5, r0
 8006c98:	b930      	cbnz	r0, 8006ca8 <_calloc_r+0x24>
 8006c9a:	4628      	mov	r0, r5
 8006c9c:	b003      	add	sp, #12
 8006c9e:	bd30      	pop	{r4, r5, pc}
 8006ca0:	220c      	movs	r2, #12
 8006ca2:	6002      	str	r2, [r0, #0]
 8006ca4:	2500      	movs	r5, #0
 8006ca6:	e7f8      	b.n	8006c9a <_calloc_r+0x16>
 8006ca8:	4621      	mov	r1, r4
 8006caa:	f7fd fdc9 	bl	8004840 <memset>
 8006cae:	e7f4      	b.n	8006c9a <_calloc_r+0x16>

08006cb0 <_realloc_r>:
 8006cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cb4:	4680      	mov	r8, r0
 8006cb6:	4614      	mov	r4, r2
 8006cb8:	460e      	mov	r6, r1
 8006cba:	b921      	cbnz	r1, 8006cc6 <_realloc_r+0x16>
 8006cbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006cc0:	4611      	mov	r1, r2
 8006cc2:	f7fd be31 	b.w	8004928 <_malloc_r>
 8006cc6:	b92a      	cbnz	r2, 8006cd4 <_realloc_r+0x24>
 8006cc8:	f7fd fdc2 	bl	8004850 <_free_r>
 8006ccc:	4625      	mov	r5, r4
 8006cce:	4628      	mov	r0, r5
 8006cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cd4:	f000 fb38 	bl	8007348 <_malloc_usable_size_r>
 8006cd8:	4284      	cmp	r4, r0
 8006cda:	4607      	mov	r7, r0
 8006cdc:	d802      	bhi.n	8006ce4 <_realloc_r+0x34>
 8006cde:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006ce2:	d812      	bhi.n	8006d0a <_realloc_r+0x5a>
 8006ce4:	4621      	mov	r1, r4
 8006ce6:	4640      	mov	r0, r8
 8006ce8:	f7fd fe1e 	bl	8004928 <_malloc_r>
 8006cec:	4605      	mov	r5, r0
 8006cee:	2800      	cmp	r0, #0
 8006cf0:	d0ed      	beq.n	8006cce <_realloc_r+0x1e>
 8006cf2:	42bc      	cmp	r4, r7
 8006cf4:	4622      	mov	r2, r4
 8006cf6:	4631      	mov	r1, r6
 8006cf8:	bf28      	it	cs
 8006cfa:	463a      	movcs	r2, r7
 8006cfc:	f7fd fd92 	bl	8004824 <memcpy>
 8006d00:	4631      	mov	r1, r6
 8006d02:	4640      	mov	r0, r8
 8006d04:	f7fd fda4 	bl	8004850 <_free_r>
 8006d08:	e7e1      	b.n	8006cce <_realloc_r+0x1e>
 8006d0a:	4635      	mov	r5, r6
 8006d0c:	e7df      	b.n	8006cce <_realloc_r+0x1e>

08006d0e <__ssputs_r>:
 8006d0e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d12:	688e      	ldr	r6, [r1, #8]
 8006d14:	429e      	cmp	r6, r3
 8006d16:	4682      	mov	sl, r0
 8006d18:	460c      	mov	r4, r1
 8006d1a:	4690      	mov	r8, r2
 8006d1c:	461f      	mov	r7, r3
 8006d1e:	d838      	bhi.n	8006d92 <__ssputs_r+0x84>
 8006d20:	898a      	ldrh	r2, [r1, #12]
 8006d22:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006d26:	d032      	beq.n	8006d8e <__ssputs_r+0x80>
 8006d28:	6825      	ldr	r5, [r4, #0]
 8006d2a:	6909      	ldr	r1, [r1, #16]
 8006d2c:	eba5 0901 	sub.w	r9, r5, r1
 8006d30:	6965      	ldr	r5, [r4, #20]
 8006d32:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006d36:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	444b      	add	r3, r9
 8006d3e:	106d      	asrs	r5, r5, #1
 8006d40:	429d      	cmp	r5, r3
 8006d42:	bf38      	it	cc
 8006d44:	461d      	movcc	r5, r3
 8006d46:	0553      	lsls	r3, r2, #21
 8006d48:	d531      	bpl.n	8006dae <__ssputs_r+0xa0>
 8006d4a:	4629      	mov	r1, r5
 8006d4c:	f7fd fdec 	bl	8004928 <_malloc_r>
 8006d50:	4606      	mov	r6, r0
 8006d52:	b950      	cbnz	r0, 8006d6a <__ssputs_r+0x5c>
 8006d54:	230c      	movs	r3, #12
 8006d56:	f8ca 3000 	str.w	r3, [sl]
 8006d5a:	89a3      	ldrh	r3, [r4, #12]
 8006d5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d60:	81a3      	strh	r3, [r4, #12]
 8006d62:	f04f 30ff 	mov.w	r0, #4294967295
 8006d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d6a:	6921      	ldr	r1, [r4, #16]
 8006d6c:	464a      	mov	r2, r9
 8006d6e:	f7fd fd59 	bl	8004824 <memcpy>
 8006d72:	89a3      	ldrh	r3, [r4, #12]
 8006d74:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006d78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d7c:	81a3      	strh	r3, [r4, #12]
 8006d7e:	6126      	str	r6, [r4, #16]
 8006d80:	6165      	str	r5, [r4, #20]
 8006d82:	444e      	add	r6, r9
 8006d84:	eba5 0509 	sub.w	r5, r5, r9
 8006d88:	6026      	str	r6, [r4, #0]
 8006d8a:	60a5      	str	r5, [r4, #8]
 8006d8c:	463e      	mov	r6, r7
 8006d8e:	42be      	cmp	r6, r7
 8006d90:	d900      	bls.n	8006d94 <__ssputs_r+0x86>
 8006d92:	463e      	mov	r6, r7
 8006d94:	6820      	ldr	r0, [r4, #0]
 8006d96:	4632      	mov	r2, r6
 8006d98:	4641      	mov	r1, r8
 8006d9a:	f000 fabb 	bl	8007314 <memmove>
 8006d9e:	68a3      	ldr	r3, [r4, #8]
 8006da0:	1b9b      	subs	r3, r3, r6
 8006da2:	60a3      	str	r3, [r4, #8]
 8006da4:	6823      	ldr	r3, [r4, #0]
 8006da6:	4433      	add	r3, r6
 8006da8:	6023      	str	r3, [r4, #0]
 8006daa:	2000      	movs	r0, #0
 8006dac:	e7db      	b.n	8006d66 <__ssputs_r+0x58>
 8006dae:	462a      	mov	r2, r5
 8006db0:	f7ff ff7e 	bl	8006cb0 <_realloc_r>
 8006db4:	4606      	mov	r6, r0
 8006db6:	2800      	cmp	r0, #0
 8006db8:	d1e1      	bne.n	8006d7e <__ssputs_r+0x70>
 8006dba:	6921      	ldr	r1, [r4, #16]
 8006dbc:	4650      	mov	r0, sl
 8006dbe:	f7fd fd47 	bl	8004850 <_free_r>
 8006dc2:	e7c7      	b.n	8006d54 <__ssputs_r+0x46>

08006dc4 <_svfiprintf_r>:
 8006dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dc8:	4698      	mov	r8, r3
 8006dca:	898b      	ldrh	r3, [r1, #12]
 8006dcc:	061b      	lsls	r3, r3, #24
 8006dce:	b09d      	sub	sp, #116	; 0x74
 8006dd0:	4607      	mov	r7, r0
 8006dd2:	460d      	mov	r5, r1
 8006dd4:	4614      	mov	r4, r2
 8006dd6:	d50e      	bpl.n	8006df6 <_svfiprintf_r+0x32>
 8006dd8:	690b      	ldr	r3, [r1, #16]
 8006dda:	b963      	cbnz	r3, 8006df6 <_svfiprintf_r+0x32>
 8006ddc:	2140      	movs	r1, #64	; 0x40
 8006dde:	f7fd fda3 	bl	8004928 <_malloc_r>
 8006de2:	6028      	str	r0, [r5, #0]
 8006de4:	6128      	str	r0, [r5, #16]
 8006de6:	b920      	cbnz	r0, 8006df2 <_svfiprintf_r+0x2e>
 8006de8:	230c      	movs	r3, #12
 8006dea:	603b      	str	r3, [r7, #0]
 8006dec:	f04f 30ff 	mov.w	r0, #4294967295
 8006df0:	e0d1      	b.n	8006f96 <_svfiprintf_r+0x1d2>
 8006df2:	2340      	movs	r3, #64	; 0x40
 8006df4:	616b      	str	r3, [r5, #20]
 8006df6:	2300      	movs	r3, #0
 8006df8:	9309      	str	r3, [sp, #36]	; 0x24
 8006dfa:	2320      	movs	r3, #32
 8006dfc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e00:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e04:	2330      	movs	r3, #48	; 0x30
 8006e06:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006fb0 <_svfiprintf_r+0x1ec>
 8006e0a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e0e:	f04f 0901 	mov.w	r9, #1
 8006e12:	4623      	mov	r3, r4
 8006e14:	469a      	mov	sl, r3
 8006e16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e1a:	b10a      	cbz	r2, 8006e20 <_svfiprintf_r+0x5c>
 8006e1c:	2a25      	cmp	r2, #37	; 0x25
 8006e1e:	d1f9      	bne.n	8006e14 <_svfiprintf_r+0x50>
 8006e20:	ebba 0b04 	subs.w	fp, sl, r4
 8006e24:	d00b      	beq.n	8006e3e <_svfiprintf_r+0x7a>
 8006e26:	465b      	mov	r3, fp
 8006e28:	4622      	mov	r2, r4
 8006e2a:	4629      	mov	r1, r5
 8006e2c:	4638      	mov	r0, r7
 8006e2e:	f7ff ff6e 	bl	8006d0e <__ssputs_r>
 8006e32:	3001      	adds	r0, #1
 8006e34:	f000 80aa 	beq.w	8006f8c <_svfiprintf_r+0x1c8>
 8006e38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e3a:	445a      	add	r2, fp
 8006e3c:	9209      	str	r2, [sp, #36]	; 0x24
 8006e3e:	f89a 3000 	ldrb.w	r3, [sl]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	f000 80a2 	beq.w	8006f8c <_svfiprintf_r+0x1c8>
 8006e48:	2300      	movs	r3, #0
 8006e4a:	f04f 32ff 	mov.w	r2, #4294967295
 8006e4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e52:	f10a 0a01 	add.w	sl, sl, #1
 8006e56:	9304      	str	r3, [sp, #16]
 8006e58:	9307      	str	r3, [sp, #28]
 8006e5a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006e5e:	931a      	str	r3, [sp, #104]	; 0x68
 8006e60:	4654      	mov	r4, sl
 8006e62:	2205      	movs	r2, #5
 8006e64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e68:	4851      	ldr	r0, [pc, #324]	; (8006fb0 <_svfiprintf_r+0x1ec>)
 8006e6a:	f7f9 f9b9 	bl	80001e0 <memchr>
 8006e6e:	9a04      	ldr	r2, [sp, #16]
 8006e70:	b9d8      	cbnz	r0, 8006eaa <_svfiprintf_r+0xe6>
 8006e72:	06d0      	lsls	r0, r2, #27
 8006e74:	bf44      	itt	mi
 8006e76:	2320      	movmi	r3, #32
 8006e78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e7c:	0711      	lsls	r1, r2, #28
 8006e7e:	bf44      	itt	mi
 8006e80:	232b      	movmi	r3, #43	; 0x2b
 8006e82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e86:	f89a 3000 	ldrb.w	r3, [sl]
 8006e8a:	2b2a      	cmp	r3, #42	; 0x2a
 8006e8c:	d015      	beq.n	8006eba <_svfiprintf_r+0xf6>
 8006e8e:	9a07      	ldr	r2, [sp, #28]
 8006e90:	4654      	mov	r4, sl
 8006e92:	2000      	movs	r0, #0
 8006e94:	f04f 0c0a 	mov.w	ip, #10
 8006e98:	4621      	mov	r1, r4
 8006e9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e9e:	3b30      	subs	r3, #48	; 0x30
 8006ea0:	2b09      	cmp	r3, #9
 8006ea2:	d94e      	bls.n	8006f42 <_svfiprintf_r+0x17e>
 8006ea4:	b1b0      	cbz	r0, 8006ed4 <_svfiprintf_r+0x110>
 8006ea6:	9207      	str	r2, [sp, #28]
 8006ea8:	e014      	b.n	8006ed4 <_svfiprintf_r+0x110>
 8006eaa:	eba0 0308 	sub.w	r3, r0, r8
 8006eae:	fa09 f303 	lsl.w	r3, r9, r3
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	9304      	str	r3, [sp, #16]
 8006eb6:	46a2      	mov	sl, r4
 8006eb8:	e7d2      	b.n	8006e60 <_svfiprintf_r+0x9c>
 8006eba:	9b03      	ldr	r3, [sp, #12]
 8006ebc:	1d19      	adds	r1, r3, #4
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	9103      	str	r1, [sp, #12]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	bfbb      	ittet	lt
 8006ec6:	425b      	neglt	r3, r3
 8006ec8:	f042 0202 	orrlt.w	r2, r2, #2
 8006ecc:	9307      	strge	r3, [sp, #28]
 8006ece:	9307      	strlt	r3, [sp, #28]
 8006ed0:	bfb8      	it	lt
 8006ed2:	9204      	strlt	r2, [sp, #16]
 8006ed4:	7823      	ldrb	r3, [r4, #0]
 8006ed6:	2b2e      	cmp	r3, #46	; 0x2e
 8006ed8:	d10c      	bne.n	8006ef4 <_svfiprintf_r+0x130>
 8006eda:	7863      	ldrb	r3, [r4, #1]
 8006edc:	2b2a      	cmp	r3, #42	; 0x2a
 8006ede:	d135      	bne.n	8006f4c <_svfiprintf_r+0x188>
 8006ee0:	9b03      	ldr	r3, [sp, #12]
 8006ee2:	1d1a      	adds	r2, r3, #4
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	9203      	str	r2, [sp, #12]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	bfb8      	it	lt
 8006eec:	f04f 33ff 	movlt.w	r3, #4294967295
 8006ef0:	3402      	adds	r4, #2
 8006ef2:	9305      	str	r3, [sp, #20]
 8006ef4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006fc0 <_svfiprintf_r+0x1fc>
 8006ef8:	7821      	ldrb	r1, [r4, #0]
 8006efa:	2203      	movs	r2, #3
 8006efc:	4650      	mov	r0, sl
 8006efe:	f7f9 f96f 	bl	80001e0 <memchr>
 8006f02:	b140      	cbz	r0, 8006f16 <_svfiprintf_r+0x152>
 8006f04:	2340      	movs	r3, #64	; 0x40
 8006f06:	eba0 000a 	sub.w	r0, r0, sl
 8006f0a:	fa03 f000 	lsl.w	r0, r3, r0
 8006f0e:	9b04      	ldr	r3, [sp, #16]
 8006f10:	4303      	orrs	r3, r0
 8006f12:	3401      	adds	r4, #1
 8006f14:	9304      	str	r3, [sp, #16]
 8006f16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f1a:	4826      	ldr	r0, [pc, #152]	; (8006fb4 <_svfiprintf_r+0x1f0>)
 8006f1c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006f20:	2206      	movs	r2, #6
 8006f22:	f7f9 f95d 	bl	80001e0 <memchr>
 8006f26:	2800      	cmp	r0, #0
 8006f28:	d038      	beq.n	8006f9c <_svfiprintf_r+0x1d8>
 8006f2a:	4b23      	ldr	r3, [pc, #140]	; (8006fb8 <_svfiprintf_r+0x1f4>)
 8006f2c:	bb1b      	cbnz	r3, 8006f76 <_svfiprintf_r+0x1b2>
 8006f2e:	9b03      	ldr	r3, [sp, #12]
 8006f30:	3307      	adds	r3, #7
 8006f32:	f023 0307 	bic.w	r3, r3, #7
 8006f36:	3308      	adds	r3, #8
 8006f38:	9303      	str	r3, [sp, #12]
 8006f3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f3c:	4433      	add	r3, r6
 8006f3e:	9309      	str	r3, [sp, #36]	; 0x24
 8006f40:	e767      	b.n	8006e12 <_svfiprintf_r+0x4e>
 8006f42:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f46:	460c      	mov	r4, r1
 8006f48:	2001      	movs	r0, #1
 8006f4a:	e7a5      	b.n	8006e98 <_svfiprintf_r+0xd4>
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	3401      	adds	r4, #1
 8006f50:	9305      	str	r3, [sp, #20]
 8006f52:	4619      	mov	r1, r3
 8006f54:	f04f 0c0a 	mov.w	ip, #10
 8006f58:	4620      	mov	r0, r4
 8006f5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f5e:	3a30      	subs	r2, #48	; 0x30
 8006f60:	2a09      	cmp	r2, #9
 8006f62:	d903      	bls.n	8006f6c <_svfiprintf_r+0x1a8>
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d0c5      	beq.n	8006ef4 <_svfiprintf_r+0x130>
 8006f68:	9105      	str	r1, [sp, #20]
 8006f6a:	e7c3      	b.n	8006ef4 <_svfiprintf_r+0x130>
 8006f6c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f70:	4604      	mov	r4, r0
 8006f72:	2301      	movs	r3, #1
 8006f74:	e7f0      	b.n	8006f58 <_svfiprintf_r+0x194>
 8006f76:	ab03      	add	r3, sp, #12
 8006f78:	9300      	str	r3, [sp, #0]
 8006f7a:	462a      	mov	r2, r5
 8006f7c:	4b0f      	ldr	r3, [pc, #60]	; (8006fbc <_svfiprintf_r+0x1f8>)
 8006f7e:	a904      	add	r1, sp, #16
 8006f80:	4638      	mov	r0, r7
 8006f82:	f7fd fde5 	bl	8004b50 <_printf_float>
 8006f86:	1c42      	adds	r2, r0, #1
 8006f88:	4606      	mov	r6, r0
 8006f8a:	d1d6      	bne.n	8006f3a <_svfiprintf_r+0x176>
 8006f8c:	89ab      	ldrh	r3, [r5, #12]
 8006f8e:	065b      	lsls	r3, r3, #25
 8006f90:	f53f af2c 	bmi.w	8006dec <_svfiprintf_r+0x28>
 8006f94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f96:	b01d      	add	sp, #116	; 0x74
 8006f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f9c:	ab03      	add	r3, sp, #12
 8006f9e:	9300      	str	r3, [sp, #0]
 8006fa0:	462a      	mov	r2, r5
 8006fa2:	4b06      	ldr	r3, [pc, #24]	; (8006fbc <_svfiprintf_r+0x1f8>)
 8006fa4:	a904      	add	r1, sp, #16
 8006fa6:	4638      	mov	r0, r7
 8006fa8:	f7fe f876 	bl	8005098 <_printf_i>
 8006fac:	e7eb      	b.n	8006f86 <_svfiprintf_r+0x1c2>
 8006fae:	bf00      	nop
 8006fb0:	08007764 	.word	0x08007764
 8006fb4:	0800776e 	.word	0x0800776e
 8006fb8:	08004b51 	.word	0x08004b51
 8006fbc:	08006d0f 	.word	0x08006d0f
 8006fc0:	0800776a 	.word	0x0800776a

08006fc4 <__sfputc_r>:
 8006fc4:	6893      	ldr	r3, [r2, #8]
 8006fc6:	3b01      	subs	r3, #1
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	b410      	push	{r4}
 8006fcc:	6093      	str	r3, [r2, #8]
 8006fce:	da08      	bge.n	8006fe2 <__sfputc_r+0x1e>
 8006fd0:	6994      	ldr	r4, [r2, #24]
 8006fd2:	42a3      	cmp	r3, r4
 8006fd4:	db01      	blt.n	8006fda <__sfputc_r+0x16>
 8006fd6:	290a      	cmp	r1, #10
 8006fd8:	d103      	bne.n	8006fe2 <__sfputc_r+0x1e>
 8006fda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006fde:	f7fe b9f5 	b.w	80053cc <__swbuf_r>
 8006fe2:	6813      	ldr	r3, [r2, #0]
 8006fe4:	1c58      	adds	r0, r3, #1
 8006fe6:	6010      	str	r0, [r2, #0]
 8006fe8:	7019      	strb	r1, [r3, #0]
 8006fea:	4608      	mov	r0, r1
 8006fec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ff0:	4770      	bx	lr

08006ff2 <__sfputs_r>:
 8006ff2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ff4:	4606      	mov	r6, r0
 8006ff6:	460f      	mov	r7, r1
 8006ff8:	4614      	mov	r4, r2
 8006ffa:	18d5      	adds	r5, r2, r3
 8006ffc:	42ac      	cmp	r4, r5
 8006ffe:	d101      	bne.n	8007004 <__sfputs_r+0x12>
 8007000:	2000      	movs	r0, #0
 8007002:	e007      	b.n	8007014 <__sfputs_r+0x22>
 8007004:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007008:	463a      	mov	r2, r7
 800700a:	4630      	mov	r0, r6
 800700c:	f7ff ffda 	bl	8006fc4 <__sfputc_r>
 8007010:	1c43      	adds	r3, r0, #1
 8007012:	d1f3      	bne.n	8006ffc <__sfputs_r+0xa>
 8007014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007018 <_vfiprintf_r>:
 8007018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800701c:	460d      	mov	r5, r1
 800701e:	b09d      	sub	sp, #116	; 0x74
 8007020:	4614      	mov	r4, r2
 8007022:	4698      	mov	r8, r3
 8007024:	4606      	mov	r6, r0
 8007026:	b118      	cbz	r0, 8007030 <_vfiprintf_r+0x18>
 8007028:	6983      	ldr	r3, [r0, #24]
 800702a:	b90b      	cbnz	r3, 8007030 <_vfiprintf_r+0x18>
 800702c:	f7fd fb2c 	bl	8004688 <__sinit>
 8007030:	4b89      	ldr	r3, [pc, #548]	; (8007258 <_vfiprintf_r+0x240>)
 8007032:	429d      	cmp	r5, r3
 8007034:	d11b      	bne.n	800706e <_vfiprintf_r+0x56>
 8007036:	6875      	ldr	r5, [r6, #4]
 8007038:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800703a:	07d9      	lsls	r1, r3, #31
 800703c:	d405      	bmi.n	800704a <_vfiprintf_r+0x32>
 800703e:	89ab      	ldrh	r3, [r5, #12]
 8007040:	059a      	lsls	r2, r3, #22
 8007042:	d402      	bmi.n	800704a <_vfiprintf_r+0x32>
 8007044:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007046:	f7fd fbe2 	bl	800480e <__retarget_lock_acquire_recursive>
 800704a:	89ab      	ldrh	r3, [r5, #12]
 800704c:	071b      	lsls	r3, r3, #28
 800704e:	d501      	bpl.n	8007054 <_vfiprintf_r+0x3c>
 8007050:	692b      	ldr	r3, [r5, #16]
 8007052:	b9eb      	cbnz	r3, 8007090 <_vfiprintf_r+0x78>
 8007054:	4629      	mov	r1, r5
 8007056:	4630      	mov	r0, r6
 8007058:	f7fe fa1c 	bl	8005494 <__swsetup_r>
 800705c:	b1c0      	cbz	r0, 8007090 <_vfiprintf_r+0x78>
 800705e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007060:	07dc      	lsls	r4, r3, #31
 8007062:	d50e      	bpl.n	8007082 <_vfiprintf_r+0x6a>
 8007064:	f04f 30ff 	mov.w	r0, #4294967295
 8007068:	b01d      	add	sp, #116	; 0x74
 800706a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800706e:	4b7b      	ldr	r3, [pc, #492]	; (800725c <_vfiprintf_r+0x244>)
 8007070:	429d      	cmp	r5, r3
 8007072:	d101      	bne.n	8007078 <_vfiprintf_r+0x60>
 8007074:	68b5      	ldr	r5, [r6, #8]
 8007076:	e7df      	b.n	8007038 <_vfiprintf_r+0x20>
 8007078:	4b79      	ldr	r3, [pc, #484]	; (8007260 <_vfiprintf_r+0x248>)
 800707a:	429d      	cmp	r5, r3
 800707c:	bf08      	it	eq
 800707e:	68f5      	ldreq	r5, [r6, #12]
 8007080:	e7da      	b.n	8007038 <_vfiprintf_r+0x20>
 8007082:	89ab      	ldrh	r3, [r5, #12]
 8007084:	0598      	lsls	r0, r3, #22
 8007086:	d4ed      	bmi.n	8007064 <_vfiprintf_r+0x4c>
 8007088:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800708a:	f7fd fbc1 	bl	8004810 <__retarget_lock_release_recursive>
 800708e:	e7e9      	b.n	8007064 <_vfiprintf_r+0x4c>
 8007090:	2300      	movs	r3, #0
 8007092:	9309      	str	r3, [sp, #36]	; 0x24
 8007094:	2320      	movs	r3, #32
 8007096:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800709a:	f8cd 800c 	str.w	r8, [sp, #12]
 800709e:	2330      	movs	r3, #48	; 0x30
 80070a0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007264 <_vfiprintf_r+0x24c>
 80070a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80070a8:	f04f 0901 	mov.w	r9, #1
 80070ac:	4623      	mov	r3, r4
 80070ae:	469a      	mov	sl, r3
 80070b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80070b4:	b10a      	cbz	r2, 80070ba <_vfiprintf_r+0xa2>
 80070b6:	2a25      	cmp	r2, #37	; 0x25
 80070b8:	d1f9      	bne.n	80070ae <_vfiprintf_r+0x96>
 80070ba:	ebba 0b04 	subs.w	fp, sl, r4
 80070be:	d00b      	beq.n	80070d8 <_vfiprintf_r+0xc0>
 80070c0:	465b      	mov	r3, fp
 80070c2:	4622      	mov	r2, r4
 80070c4:	4629      	mov	r1, r5
 80070c6:	4630      	mov	r0, r6
 80070c8:	f7ff ff93 	bl	8006ff2 <__sfputs_r>
 80070cc:	3001      	adds	r0, #1
 80070ce:	f000 80aa 	beq.w	8007226 <_vfiprintf_r+0x20e>
 80070d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070d4:	445a      	add	r2, fp
 80070d6:	9209      	str	r2, [sp, #36]	; 0x24
 80070d8:	f89a 3000 	ldrb.w	r3, [sl]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	f000 80a2 	beq.w	8007226 <_vfiprintf_r+0x20e>
 80070e2:	2300      	movs	r3, #0
 80070e4:	f04f 32ff 	mov.w	r2, #4294967295
 80070e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070ec:	f10a 0a01 	add.w	sl, sl, #1
 80070f0:	9304      	str	r3, [sp, #16]
 80070f2:	9307      	str	r3, [sp, #28]
 80070f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80070f8:	931a      	str	r3, [sp, #104]	; 0x68
 80070fa:	4654      	mov	r4, sl
 80070fc:	2205      	movs	r2, #5
 80070fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007102:	4858      	ldr	r0, [pc, #352]	; (8007264 <_vfiprintf_r+0x24c>)
 8007104:	f7f9 f86c 	bl	80001e0 <memchr>
 8007108:	9a04      	ldr	r2, [sp, #16]
 800710a:	b9d8      	cbnz	r0, 8007144 <_vfiprintf_r+0x12c>
 800710c:	06d1      	lsls	r1, r2, #27
 800710e:	bf44      	itt	mi
 8007110:	2320      	movmi	r3, #32
 8007112:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007116:	0713      	lsls	r3, r2, #28
 8007118:	bf44      	itt	mi
 800711a:	232b      	movmi	r3, #43	; 0x2b
 800711c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007120:	f89a 3000 	ldrb.w	r3, [sl]
 8007124:	2b2a      	cmp	r3, #42	; 0x2a
 8007126:	d015      	beq.n	8007154 <_vfiprintf_r+0x13c>
 8007128:	9a07      	ldr	r2, [sp, #28]
 800712a:	4654      	mov	r4, sl
 800712c:	2000      	movs	r0, #0
 800712e:	f04f 0c0a 	mov.w	ip, #10
 8007132:	4621      	mov	r1, r4
 8007134:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007138:	3b30      	subs	r3, #48	; 0x30
 800713a:	2b09      	cmp	r3, #9
 800713c:	d94e      	bls.n	80071dc <_vfiprintf_r+0x1c4>
 800713e:	b1b0      	cbz	r0, 800716e <_vfiprintf_r+0x156>
 8007140:	9207      	str	r2, [sp, #28]
 8007142:	e014      	b.n	800716e <_vfiprintf_r+0x156>
 8007144:	eba0 0308 	sub.w	r3, r0, r8
 8007148:	fa09 f303 	lsl.w	r3, r9, r3
 800714c:	4313      	orrs	r3, r2
 800714e:	9304      	str	r3, [sp, #16]
 8007150:	46a2      	mov	sl, r4
 8007152:	e7d2      	b.n	80070fa <_vfiprintf_r+0xe2>
 8007154:	9b03      	ldr	r3, [sp, #12]
 8007156:	1d19      	adds	r1, r3, #4
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	9103      	str	r1, [sp, #12]
 800715c:	2b00      	cmp	r3, #0
 800715e:	bfbb      	ittet	lt
 8007160:	425b      	neglt	r3, r3
 8007162:	f042 0202 	orrlt.w	r2, r2, #2
 8007166:	9307      	strge	r3, [sp, #28]
 8007168:	9307      	strlt	r3, [sp, #28]
 800716a:	bfb8      	it	lt
 800716c:	9204      	strlt	r2, [sp, #16]
 800716e:	7823      	ldrb	r3, [r4, #0]
 8007170:	2b2e      	cmp	r3, #46	; 0x2e
 8007172:	d10c      	bne.n	800718e <_vfiprintf_r+0x176>
 8007174:	7863      	ldrb	r3, [r4, #1]
 8007176:	2b2a      	cmp	r3, #42	; 0x2a
 8007178:	d135      	bne.n	80071e6 <_vfiprintf_r+0x1ce>
 800717a:	9b03      	ldr	r3, [sp, #12]
 800717c:	1d1a      	adds	r2, r3, #4
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	9203      	str	r2, [sp, #12]
 8007182:	2b00      	cmp	r3, #0
 8007184:	bfb8      	it	lt
 8007186:	f04f 33ff 	movlt.w	r3, #4294967295
 800718a:	3402      	adds	r4, #2
 800718c:	9305      	str	r3, [sp, #20]
 800718e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007274 <_vfiprintf_r+0x25c>
 8007192:	7821      	ldrb	r1, [r4, #0]
 8007194:	2203      	movs	r2, #3
 8007196:	4650      	mov	r0, sl
 8007198:	f7f9 f822 	bl	80001e0 <memchr>
 800719c:	b140      	cbz	r0, 80071b0 <_vfiprintf_r+0x198>
 800719e:	2340      	movs	r3, #64	; 0x40
 80071a0:	eba0 000a 	sub.w	r0, r0, sl
 80071a4:	fa03 f000 	lsl.w	r0, r3, r0
 80071a8:	9b04      	ldr	r3, [sp, #16]
 80071aa:	4303      	orrs	r3, r0
 80071ac:	3401      	adds	r4, #1
 80071ae:	9304      	str	r3, [sp, #16]
 80071b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071b4:	482c      	ldr	r0, [pc, #176]	; (8007268 <_vfiprintf_r+0x250>)
 80071b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80071ba:	2206      	movs	r2, #6
 80071bc:	f7f9 f810 	bl	80001e0 <memchr>
 80071c0:	2800      	cmp	r0, #0
 80071c2:	d03f      	beq.n	8007244 <_vfiprintf_r+0x22c>
 80071c4:	4b29      	ldr	r3, [pc, #164]	; (800726c <_vfiprintf_r+0x254>)
 80071c6:	bb1b      	cbnz	r3, 8007210 <_vfiprintf_r+0x1f8>
 80071c8:	9b03      	ldr	r3, [sp, #12]
 80071ca:	3307      	adds	r3, #7
 80071cc:	f023 0307 	bic.w	r3, r3, #7
 80071d0:	3308      	adds	r3, #8
 80071d2:	9303      	str	r3, [sp, #12]
 80071d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071d6:	443b      	add	r3, r7
 80071d8:	9309      	str	r3, [sp, #36]	; 0x24
 80071da:	e767      	b.n	80070ac <_vfiprintf_r+0x94>
 80071dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80071e0:	460c      	mov	r4, r1
 80071e2:	2001      	movs	r0, #1
 80071e4:	e7a5      	b.n	8007132 <_vfiprintf_r+0x11a>
 80071e6:	2300      	movs	r3, #0
 80071e8:	3401      	adds	r4, #1
 80071ea:	9305      	str	r3, [sp, #20]
 80071ec:	4619      	mov	r1, r3
 80071ee:	f04f 0c0a 	mov.w	ip, #10
 80071f2:	4620      	mov	r0, r4
 80071f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071f8:	3a30      	subs	r2, #48	; 0x30
 80071fa:	2a09      	cmp	r2, #9
 80071fc:	d903      	bls.n	8007206 <_vfiprintf_r+0x1ee>
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d0c5      	beq.n	800718e <_vfiprintf_r+0x176>
 8007202:	9105      	str	r1, [sp, #20]
 8007204:	e7c3      	b.n	800718e <_vfiprintf_r+0x176>
 8007206:	fb0c 2101 	mla	r1, ip, r1, r2
 800720a:	4604      	mov	r4, r0
 800720c:	2301      	movs	r3, #1
 800720e:	e7f0      	b.n	80071f2 <_vfiprintf_r+0x1da>
 8007210:	ab03      	add	r3, sp, #12
 8007212:	9300      	str	r3, [sp, #0]
 8007214:	462a      	mov	r2, r5
 8007216:	4b16      	ldr	r3, [pc, #88]	; (8007270 <_vfiprintf_r+0x258>)
 8007218:	a904      	add	r1, sp, #16
 800721a:	4630      	mov	r0, r6
 800721c:	f7fd fc98 	bl	8004b50 <_printf_float>
 8007220:	4607      	mov	r7, r0
 8007222:	1c78      	adds	r0, r7, #1
 8007224:	d1d6      	bne.n	80071d4 <_vfiprintf_r+0x1bc>
 8007226:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007228:	07d9      	lsls	r1, r3, #31
 800722a:	d405      	bmi.n	8007238 <_vfiprintf_r+0x220>
 800722c:	89ab      	ldrh	r3, [r5, #12]
 800722e:	059a      	lsls	r2, r3, #22
 8007230:	d402      	bmi.n	8007238 <_vfiprintf_r+0x220>
 8007232:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007234:	f7fd faec 	bl	8004810 <__retarget_lock_release_recursive>
 8007238:	89ab      	ldrh	r3, [r5, #12]
 800723a:	065b      	lsls	r3, r3, #25
 800723c:	f53f af12 	bmi.w	8007064 <_vfiprintf_r+0x4c>
 8007240:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007242:	e711      	b.n	8007068 <_vfiprintf_r+0x50>
 8007244:	ab03      	add	r3, sp, #12
 8007246:	9300      	str	r3, [sp, #0]
 8007248:	462a      	mov	r2, r5
 800724a:	4b09      	ldr	r3, [pc, #36]	; (8007270 <_vfiprintf_r+0x258>)
 800724c:	a904      	add	r1, sp, #16
 800724e:	4630      	mov	r0, r6
 8007250:	f7fd ff22 	bl	8005098 <_printf_i>
 8007254:	e7e4      	b.n	8007220 <_vfiprintf_r+0x208>
 8007256:	bf00      	nop
 8007258:	080074c8 	.word	0x080074c8
 800725c:	080074e8 	.word	0x080074e8
 8007260:	080074a8 	.word	0x080074a8
 8007264:	08007764 	.word	0x08007764
 8007268:	0800776e 	.word	0x0800776e
 800726c:	08004b51 	.word	0x08004b51
 8007270:	08006ff3 	.word	0x08006ff3
 8007274:	0800776a 	.word	0x0800776a

08007278 <_read_r>:
 8007278:	b538      	push	{r3, r4, r5, lr}
 800727a:	4d07      	ldr	r5, [pc, #28]	; (8007298 <_read_r+0x20>)
 800727c:	4604      	mov	r4, r0
 800727e:	4608      	mov	r0, r1
 8007280:	4611      	mov	r1, r2
 8007282:	2200      	movs	r2, #0
 8007284:	602a      	str	r2, [r5, #0]
 8007286:	461a      	mov	r2, r3
 8007288:	f7fd f891 	bl	80043ae <_read>
 800728c:	1c43      	adds	r3, r0, #1
 800728e:	d102      	bne.n	8007296 <_read_r+0x1e>
 8007290:	682b      	ldr	r3, [r5, #0]
 8007292:	b103      	cbz	r3, 8007296 <_read_r+0x1e>
 8007294:	6023      	str	r3, [r4, #0]
 8007296:	bd38      	pop	{r3, r4, r5, pc}
 8007298:	20000350 	.word	0x20000350

0800729c <abort>:
 800729c:	b508      	push	{r3, lr}
 800729e:	2006      	movs	r0, #6
 80072a0:	f000 f882 	bl	80073a8 <raise>
 80072a4:	2001      	movs	r0, #1
 80072a6:	f000 f8b1 	bl	800740c <_exit>
	...

080072ac <_fstat_r>:
 80072ac:	b538      	push	{r3, r4, r5, lr}
 80072ae:	4d07      	ldr	r5, [pc, #28]	; (80072cc <_fstat_r+0x20>)
 80072b0:	2300      	movs	r3, #0
 80072b2:	4604      	mov	r4, r0
 80072b4:	4608      	mov	r0, r1
 80072b6:	4611      	mov	r1, r2
 80072b8:	602b      	str	r3, [r5, #0]
 80072ba:	f7fd f95c 	bl	8004576 <_fstat>
 80072be:	1c43      	adds	r3, r0, #1
 80072c0:	d102      	bne.n	80072c8 <_fstat_r+0x1c>
 80072c2:	682b      	ldr	r3, [r5, #0]
 80072c4:	b103      	cbz	r3, 80072c8 <_fstat_r+0x1c>
 80072c6:	6023      	str	r3, [r4, #0]
 80072c8:	bd38      	pop	{r3, r4, r5, pc}
 80072ca:	bf00      	nop
 80072cc:	20000350 	.word	0x20000350

080072d0 <_isatty_r>:
 80072d0:	b538      	push	{r3, r4, r5, lr}
 80072d2:	4d06      	ldr	r5, [pc, #24]	; (80072ec <_isatty_r+0x1c>)
 80072d4:	2300      	movs	r3, #0
 80072d6:	4604      	mov	r4, r0
 80072d8:	4608      	mov	r0, r1
 80072da:	602b      	str	r3, [r5, #0]
 80072dc:	f7fd f959 	bl	8004592 <_isatty>
 80072e0:	1c43      	adds	r3, r0, #1
 80072e2:	d102      	bne.n	80072ea <_isatty_r+0x1a>
 80072e4:	682b      	ldr	r3, [r5, #0]
 80072e6:	b103      	cbz	r3, 80072ea <_isatty_r+0x1a>
 80072e8:	6023      	str	r3, [r4, #0]
 80072ea:	bd38      	pop	{r3, r4, r5, pc}
 80072ec:	20000350 	.word	0x20000350

080072f0 <__ascii_mbtowc>:
 80072f0:	b082      	sub	sp, #8
 80072f2:	b901      	cbnz	r1, 80072f6 <__ascii_mbtowc+0x6>
 80072f4:	a901      	add	r1, sp, #4
 80072f6:	b142      	cbz	r2, 800730a <__ascii_mbtowc+0x1a>
 80072f8:	b14b      	cbz	r3, 800730e <__ascii_mbtowc+0x1e>
 80072fa:	7813      	ldrb	r3, [r2, #0]
 80072fc:	600b      	str	r3, [r1, #0]
 80072fe:	7812      	ldrb	r2, [r2, #0]
 8007300:	1e10      	subs	r0, r2, #0
 8007302:	bf18      	it	ne
 8007304:	2001      	movne	r0, #1
 8007306:	b002      	add	sp, #8
 8007308:	4770      	bx	lr
 800730a:	4610      	mov	r0, r2
 800730c:	e7fb      	b.n	8007306 <__ascii_mbtowc+0x16>
 800730e:	f06f 0001 	mvn.w	r0, #1
 8007312:	e7f8      	b.n	8007306 <__ascii_mbtowc+0x16>

08007314 <memmove>:
 8007314:	4288      	cmp	r0, r1
 8007316:	b510      	push	{r4, lr}
 8007318:	eb01 0402 	add.w	r4, r1, r2
 800731c:	d902      	bls.n	8007324 <memmove+0x10>
 800731e:	4284      	cmp	r4, r0
 8007320:	4623      	mov	r3, r4
 8007322:	d807      	bhi.n	8007334 <memmove+0x20>
 8007324:	1e43      	subs	r3, r0, #1
 8007326:	42a1      	cmp	r1, r4
 8007328:	d008      	beq.n	800733c <memmove+0x28>
 800732a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800732e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007332:	e7f8      	b.n	8007326 <memmove+0x12>
 8007334:	4402      	add	r2, r0
 8007336:	4601      	mov	r1, r0
 8007338:	428a      	cmp	r2, r1
 800733a:	d100      	bne.n	800733e <memmove+0x2a>
 800733c:	bd10      	pop	{r4, pc}
 800733e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007342:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007346:	e7f7      	b.n	8007338 <memmove+0x24>

08007348 <_malloc_usable_size_r>:
 8007348:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800734c:	1f18      	subs	r0, r3, #4
 800734e:	2b00      	cmp	r3, #0
 8007350:	bfbc      	itt	lt
 8007352:	580b      	ldrlt	r3, [r1, r0]
 8007354:	18c0      	addlt	r0, r0, r3
 8007356:	4770      	bx	lr

08007358 <_raise_r>:
 8007358:	291f      	cmp	r1, #31
 800735a:	b538      	push	{r3, r4, r5, lr}
 800735c:	4604      	mov	r4, r0
 800735e:	460d      	mov	r5, r1
 8007360:	d904      	bls.n	800736c <_raise_r+0x14>
 8007362:	2316      	movs	r3, #22
 8007364:	6003      	str	r3, [r0, #0]
 8007366:	f04f 30ff 	mov.w	r0, #4294967295
 800736a:	bd38      	pop	{r3, r4, r5, pc}
 800736c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800736e:	b112      	cbz	r2, 8007376 <_raise_r+0x1e>
 8007370:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007374:	b94b      	cbnz	r3, 800738a <_raise_r+0x32>
 8007376:	4620      	mov	r0, r4
 8007378:	f000 f830 	bl	80073dc <_getpid_r>
 800737c:	462a      	mov	r2, r5
 800737e:	4601      	mov	r1, r0
 8007380:	4620      	mov	r0, r4
 8007382:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007386:	f000 b817 	b.w	80073b8 <_kill_r>
 800738a:	2b01      	cmp	r3, #1
 800738c:	d00a      	beq.n	80073a4 <_raise_r+0x4c>
 800738e:	1c59      	adds	r1, r3, #1
 8007390:	d103      	bne.n	800739a <_raise_r+0x42>
 8007392:	2316      	movs	r3, #22
 8007394:	6003      	str	r3, [r0, #0]
 8007396:	2001      	movs	r0, #1
 8007398:	e7e7      	b.n	800736a <_raise_r+0x12>
 800739a:	2400      	movs	r4, #0
 800739c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80073a0:	4628      	mov	r0, r5
 80073a2:	4798      	blx	r3
 80073a4:	2000      	movs	r0, #0
 80073a6:	e7e0      	b.n	800736a <_raise_r+0x12>

080073a8 <raise>:
 80073a8:	4b02      	ldr	r3, [pc, #8]	; (80073b4 <raise+0xc>)
 80073aa:	4601      	mov	r1, r0
 80073ac:	6818      	ldr	r0, [r3, #0]
 80073ae:	f7ff bfd3 	b.w	8007358 <_raise_r>
 80073b2:	bf00      	nop
 80073b4:	2000000c 	.word	0x2000000c

080073b8 <_kill_r>:
 80073b8:	b538      	push	{r3, r4, r5, lr}
 80073ba:	4d07      	ldr	r5, [pc, #28]	; (80073d8 <_kill_r+0x20>)
 80073bc:	2300      	movs	r3, #0
 80073be:	4604      	mov	r4, r0
 80073c0:	4608      	mov	r0, r1
 80073c2:	4611      	mov	r1, r2
 80073c4:	602b      	str	r3, [r5, #0]
 80073c6:	f000 f819 	bl	80073fc <_kill>
 80073ca:	1c43      	adds	r3, r0, #1
 80073cc:	d102      	bne.n	80073d4 <_kill_r+0x1c>
 80073ce:	682b      	ldr	r3, [r5, #0]
 80073d0:	b103      	cbz	r3, 80073d4 <_kill_r+0x1c>
 80073d2:	6023      	str	r3, [r4, #0]
 80073d4:	bd38      	pop	{r3, r4, r5, pc}
 80073d6:	bf00      	nop
 80073d8:	20000350 	.word	0x20000350

080073dc <_getpid_r>:
 80073dc:	f7fd b8a8 	b.w	8004530 <_getpid>

080073e0 <__ascii_wctomb>:
 80073e0:	b149      	cbz	r1, 80073f6 <__ascii_wctomb+0x16>
 80073e2:	2aff      	cmp	r2, #255	; 0xff
 80073e4:	bf85      	ittet	hi
 80073e6:	238a      	movhi	r3, #138	; 0x8a
 80073e8:	6003      	strhi	r3, [r0, #0]
 80073ea:	700a      	strbls	r2, [r1, #0]
 80073ec:	f04f 30ff 	movhi.w	r0, #4294967295
 80073f0:	bf98      	it	ls
 80073f2:	2001      	movls	r0, #1
 80073f4:	4770      	bx	lr
 80073f6:	4608      	mov	r0, r1
 80073f8:	4770      	bx	lr
	...

080073fc <_kill>:
 80073fc:	4b02      	ldr	r3, [pc, #8]	; (8007408 <_kill+0xc>)
 80073fe:	2258      	movs	r2, #88	; 0x58
 8007400:	601a      	str	r2, [r3, #0]
 8007402:	f04f 30ff 	mov.w	r0, #4294967295
 8007406:	4770      	bx	lr
 8007408:	20000350 	.word	0x20000350

0800740c <_exit>:
 800740c:	e7fe      	b.n	800740c <_exit>
	...

08007410 <_init>:
 8007410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007412:	bf00      	nop
 8007414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007416:	bc08      	pop	{r3}
 8007418:	469e      	mov	lr, r3
 800741a:	4770      	bx	lr

0800741c <_fini>:
 800741c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800741e:	bf00      	nop
 8007420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007422:	bc08      	pop	{r3}
 8007424:	469e      	mov	lr, r3
 8007426:	4770      	bx	lr
